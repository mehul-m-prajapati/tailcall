<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="486" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="469.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="469.00"> </text><svg id="frames" x="10" width="1180" total_samples="28254"><g><title>dyld`start (5 samples, 0.02%)</title><rect x="0.0000%" y="421" width="0.0177%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="5"/><text x="0.2500%" y="431.50"></text></g><g><title>tailcall`main (5 samples, 0.02%)</title><rect x="0.0000%" y="405" width="0.0177%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="5"/><text x="0.2500%" y="415.50"></text></g><g><title>tailcall`std::sys_common::backtrace::__rust_begin_short_backtrace (5 samples, 0.02%)</title><rect x="0.0000%" y="389" width="0.0177%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="5"/><text x="0.2500%" y="399.50"></text></g><g><title>tailcall`tailcall::main (5 samples, 0.02%)</title><rect x="0.0000%" y="373" width="0.0177%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="5"/><text x="0.2500%" y="383.50"></text></g><g><title>tailcall`tailcall::cli::tc::run::run::_{{closure}} (5 samples, 0.02%)</title><rect x="0.0000%" y="357" width="0.0177%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="5"/><text x="0.2500%" y="367.50"></text></g><g><title>tailcall`std::sys::pal::unix::time::Timespec::now (3 samples, 0.01%)</title><rect x="0.0248%" y="341" width="0.0106%" height="15" fill="rgb(232,128,0)" fg:x="7" fg:w="3"/><text x="0.2748%" y="351.50"></text></g><g><title>tailcall`tokio::runtime::scheduler::multi_thread::worker::Context::run_task (6 samples, 0.02%)</title><rect x="0.0354%" y="341" width="0.0212%" height="15" fill="rgb(207,160,47)" fg:x="10" fg:w="6"/><text x="0.2854%" y="351.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (6 samples, 0.02%)</title><rect x="0.4141%" y="325" width="0.0212%" height="15" fill="rgb(228,23,34)" fg:x="117" fg:w="6"/><text x="0.6641%" y="335.50"></text></g><g><title>libsystem_m.dylib`pow (4 samples, 0.01%)</title><rect x="0.4353%" y="325" width="0.0142%" height="15" fill="rgb(218,30,26)" fg:x="123" fg:w="4"/><text x="0.6853%" y="335.50"></text></g><g><title>libsystem_c.dylib`clock_gettime_nsec_np (8 samples, 0.03%)</title><rect x="0.4849%" y="293" width="0.0283%" height="15" fill="rgb(220,122,19)" fg:x="137" fg:w="8"/><text x="0.7349%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`mach_timebase_info (4 samples, 0.01%)</title><rect x="0.4990%" y="277" width="0.0142%" height="15" fill="rgb(250,228,42)" fg:x="141" fg:w="4"/><text x="0.7490%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (42 samples, 0.15%)</title><rect x="0.5132%" y="293" width="0.1487%" height="15" fill="rgb(240,193,28)" fg:x="145" fg:w="42"/><text x="0.7632%" y="303.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (58 samples, 0.21%)</title><rect x="0.4637%" y="309" width="0.2053%" height="15" fill="rgb(216,20,37)" fg:x="131" fg:w="58"/><text x="0.7137%" y="319.50"></text></g><g><title>tailcall`std::sys::pal::unix::time::Timespec::now (66 samples, 0.23%)</title><rect x="0.4637%" y="325" width="0.2336%" height="15" fill="rgb(206,188,39)" fg:x="131" fg:w="66"/><text x="0.7137%" y="335.50"></text></g><g><title>libsystem_c.dylib`clock_gettime_nsec_np (8 samples, 0.03%)</title><rect x="0.6689%" y="309" width="0.0283%" height="15" fill="rgb(217,207,13)" fg:x="189" fg:w="8"/><text x="0.9189%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (39 samples, 0.14%)</title><rect x="0.8459%" y="293" width="0.1380%" height="15" fill="rgb(231,73,38)" fg:x="239" fg:w="39"/><text x="1.0959%" y="303.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (3 samples, 0.01%)</title><rect x="0.9945%" y="277" width="0.0106%" height="15" fill="rgb(225,20,46)" fg:x="281" fg:w="3"/><text x="1.2445%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (3 samples, 0.01%)</title><rect x="0.9945%" y="261" width="0.0106%" height="15" fill="rgb(210,31,41)" fg:x="281" fg:w="3"/><text x="1.2445%" y="271.50"></text></g><g><title>tailcall`parking_lot::condvar::Condvar::notify_one_slow (46 samples, 0.16%)</title><rect x="0.8459%" y="309" width="0.1628%" height="15" fill="rgb(221,200,47)" fg:x="239" fg:w="46"/><text x="1.0959%" y="319.50"></text></g><g><title>tailcall`std::sys::pal::unix::time::Timespec::now (4 samples, 0.01%)</title><rect x="0.9945%" y="293" width="0.0142%" height="15" fill="rgb(226,26,5)" fg:x="281" fg:w="4"/><text x="1.2445%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (304 samples, 1.08%)</title><rect x="1.0335%" y="293" width="1.0760%" height="15" fill="rgb(249,33,26)" fg:x="292" fg:w="304"/><text x="1.2835%" y="303.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_droplock (3 samples, 0.01%)</title><rect x="2.1413%" y="277" width="0.0106%" height="15" fill="rgb(235,183,28)" fg:x="605" fg:w="3"/><text x="2.3913%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (8 samples, 0.03%)</title><rect x="2.1519%" y="277" width="0.0283%" height="15" fill="rgb(221,5,38)" fg:x="608" fg:w="8"/><text x="2.4019%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (8 samples, 0.03%)</title><rect x="2.1519%" y="261" width="0.0283%" height="15" fill="rgb(247,18,42)" fg:x="608" fg:w="8"/><text x="2.4019%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (23 samples, 0.08%)</title><rect x="2.1094%" y="293" width="0.0814%" height="15" fill="rgb(241,131,45)" fg:x="596" fg:w="23"/><text x="2.3594%" y="303.50"></text></g><g><title>tailcall`parking_lot::condvar::Condvar::wait_until_internal (335 samples, 1.19%)</title><rect x="1.0087%" y="309" width="1.1857%" height="15" fill="rgb(249,31,29)" fg:x="285" fg:w="335"/><text x="1.2587%" y="319.50"></text></g><g><title>tailcall`tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (3 samples, 0.01%)</title><rect x="2.2015%" y="309" width="0.0106%" height="15" fill="rgb(225,111,53)" fg:x="622" fg:w="3"/><text x="2.4515%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`kevent (853 samples, 3.02%)</title><rect x="2.2864%" y="293" width="3.0190%" height="15" fill="rgb(238,160,17)" fg:x="646" fg:w="853"/><text x="2.5364%" y="303.50">lib..</text></g><g><title>tailcall`std::sys::pal::unix::time::Timespec::now (14 samples, 0.05%)</title><rect x="5.3090%" y="293" width="0.0496%" height="15" fill="rgb(214,148,48)" fg:x="1500" fg:w="14"/><text x="5.5590%" y="303.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (14 samples, 0.05%)</title><rect x="5.3090%" y="277" width="0.0496%" height="15" fill="rgb(232,36,49)" fg:x="1500" fg:w="14"/><text x="5.5590%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (12 samples, 0.04%)</title><rect x="5.3161%" y="261" width="0.0425%" height="15" fill="rgb(209,103,24)" fg:x="1502" fg:w="12"/><text x="5.5661%" y="271.50"></text></g><g><title>tailcall`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (4 samples, 0.01%)</title><rect x="5.7691%" y="261" width="0.0142%" height="15" fill="rgb(229,88,8)" fg:x="1630" fg:w="4"/><text x="6.0191%" y="271.50"></text></g><g><title>tailcall`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task::_{{closure}} (3 samples, 0.01%)</title><rect x="5.8682%" y="245" width="0.0106%" height="15" fill="rgb(213,181,19)" fg:x="1658" fg:w="3"/><text x="6.1182%" y="255.50"></text></g><g><title>tailcall`tokio::runtime::io::scheduled_io::ScheduledIo::wake (104 samples, 0.37%)</title><rect x="5.5497%" y="277" width="0.3681%" height="15" fill="rgb(254,191,54)" fg:x="1568" fg:w="104"/><text x="5.7997%" y="287.50"></text></g><g><title>tailcall`tokio::runtime::task::waker::wake_by_val (37 samples, 0.13%)</title><rect x="5.7868%" y="261" width="0.1310%" height="15" fill="rgb(241,83,37)" fg:x="1635" fg:w="37"/><text x="6.0368%" y="271.50"></text></g><g><title>tailcall`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (11 samples, 0.04%)</title><rect x="5.8788%" y="245" width="0.0389%" height="15" fill="rgb(233,36,39)" fg:x="1661" fg:w="11"/><text x="6.1288%" y="255.50"></text></g><g><title>tailcall`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task::_{{closure}} (10 samples, 0.04%)</title><rect x="5.8824%" y="229" width="0.0354%" height="15" fill="rgb(226,3,54)" fg:x="1662" fg:w="10"/><text x="6.1324%" y="239.50"></text></g><g><title>tailcall`tokio::runtime::io::driver::Driver::turn (156 samples, 0.55%)</title><rect x="5.3692%" y="293" width="0.5521%" height="15" fill="rgb(245,192,40)" fg:x="1517" fg:w="156"/><text x="5.6192%" y="303.50"></text></g><g><title>tailcall`tokio::runtime::io::scheduled_io::ScheduledIo::wake (6 samples, 0.02%)</title><rect x="5.9213%" y="293" width="0.0212%" height="15" fill="rgb(238,167,29)" fg:x="1673" fg:w="6"/><text x="6.1713%" y="303.50"></text></g><g><title>tailcall`tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time::_{{closure}} (44 samples, 0.16%)</title><rect x="5.9425%" y="293" width="0.1557%" height="15" fill="rgb(232,182,51)" fg:x="1679" fg:w="44"/><text x="6.1925%" y="303.50"></text></g><g><title>tailcall`tokio::runtime::time::wheel::Wheel::next_expiration (14 samples, 0.05%)</title><rect x="6.0487%" y="277" width="0.0496%" height="15" fill="rgb(231,60,39)" fg:x="1709" fg:w="14"/><text x="6.2987%" y="287.50"></text></g><g><title>tailcall`tokio::runtime::time::Driver::park_internal (1,107 samples, 3.92%)</title><rect x="2.2227%" y="309" width="3.9180%" height="15" fill="rgb(208,69,12)" fg:x="628" fg:w="1107"/><text x="2.4727%" y="319.50">tail..</text></g><g><title>tailcall`tokio::runtime::time::wheel::Wheel::next_expiration (12 samples, 0.04%)</title><rect x="6.0983%" y="293" width="0.0425%" height="15" fill="rgb(235,93,37)" fg:x="1723" fg:w="12"/><text x="6.3483%" y="303.50"></text></g><g><title>tailcall`tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time::_{{closure}} (3 samples, 0.01%)</title><rect x="6.1407%" y="309" width="0.0106%" height="15" fill="rgb(213,116,39)" fg:x="1735" fg:w="3"/><text x="6.3907%" y="319.50"></text></g><g><title>tailcall`tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (1,541 samples, 5.45%)</title><rect x="0.7043%" y="325" width="5.4541%" height="15" fill="rgb(222,207,29)" fg:x="199" fg:w="1541"/><text x="0.9543%" y="335.50">tailcal..</text></g><g><title>libdyld.dylib`tlv_get_addr (7 samples, 0.02%)</title><rect x="6.2434%" y="309" width="0.0248%" height="15" fill="rgb(206,96,30)" fg:x="1764" fg:w="7"/><text x="6.4934%" y="319.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (6 samples, 0.02%)</title><rect x="6.2681%" y="309" width="0.0212%" height="15" fill="rgb(218,138,4)" fg:x="1771" fg:w="6"/><text x="6.5181%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (6 samples, 0.02%)</title><rect x="6.2681%" y="293" width="0.0212%" height="15" fill="rgb(250,191,14)" fg:x="1771" fg:w="6"/><text x="6.5181%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (129 samples, 0.46%)</title><rect x="6.3106%" y="293" width="0.4566%" height="15" fill="rgb(239,60,40)" fg:x="1783" fg:w="129"/><text x="6.5606%" y="303.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_updateval (3 samples, 0.01%)</title><rect x="6.7672%" y="293" width="0.0106%" height="15" fill="rgb(206,27,48)" fg:x="1912" fg:w="3"/><text x="7.0172%" y="303.50"></text></g><g><title>tailcall`parking_lot::condvar::Condvar::notify_one_slow (144 samples, 0.51%)</title><rect x="6.3000%" y="309" width="0.5097%" height="15" fill="rgb(225,35,8)" fg:x="1780" fg:w="144"/><text x="6.5500%" y="319.50"></text></g><g><title>tailcall`std::sys::pal::unix::time::Timespec::now (4 samples, 0.01%)</title><rect x="6.7955%" y="293" width="0.0142%" height="15" fill="rgb(250,213,24)" fg:x="1920" fg:w="4"/><text x="7.0455%" y="303.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (4 samples, 0.01%)</title><rect x="6.7955%" y="277" width="0.0142%" height="15" fill="rgb(247,123,22)" fg:x="1920" fg:w="4"/><text x="7.0455%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (4 samples, 0.01%)</title><rect x="6.7955%" y="261" width="0.0142%" height="15" fill="rgb(231,138,38)" fg:x="1920" fg:w="4"/><text x="7.0455%" y="271.50"></text></g><g><title>tailcall`&lt;hyper::server::conn::upgrades::UpgradeableConnection&lt;I,S,E&gt; as core::future::future::Future&gt;::poll (5 samples, 0.02%)</title><rect x="6.9229%" y="293" width="0.0177%" height="15" fill="rgb(231,145,46)" fg:x="1956" fg:w="5"/><text x="7.1729%" y="303.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.01%)</title><rect x="6.9618%" y="277" width="0.0106%" height="15" fill="rgb(251,118,11)" fg:x="1967" fg:w="3"/><text x="7.2118%" y="287.50"></text></g><g><title>tailcall`&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.02%)</title><rect x="6.9725%" y="277" width="0.0177%" height="15" fill="rgb(217,147,25)" fg:x="1970" fg:w="5"/><text x="7.2225%" y="287.50"></text></g><g><title>tailcall`&lt;hyper::proto::h1::dispatch::Server&lt;S,hyper::body::body::Body&gt; as hyper::proto::h1::dispatch::Dispatch&gt;::recv_msg (3 samples, 0.01%)</title><rect x="6.9902%" y="277" width="0.0106%" height="15" fill="rgb(247,81,37)" fg:x="1975" fg:w="3"/><text x="7.2402%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (581 samples, 2.06%)</title><rect x="7.4821%" y="261" width="2.0563%" height="15" fill="rgb(209,12,38)" fg:x="2114" fg:w="581"/><text x="7.7321%" y="271.50">l..</text></g><g><title>tailcall`&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (17 samples, 0.06%)</title><rect x="9.5385%" y="261" width="0.0602%" height="15" fill="rgb(227,1,9)" fg:x="2695" fg:w="17"/><text x="9.7885%" y="271.50"></text></g><g><title>tailcall`&lt;hyper::proto::h1::conn::KA as core::ops::bit::BitAndAssign&lt;bool&gt;&gt;::bitand_assign (8 samples, 0.03%)</title><rect x="9.6057%" y="261" width="0.0283%" height="15" fill="rgb(248,47,43)" fg:x="2714" fg:w="8"/><text x="9.8557%" y="271.50"></text></g><g><title>tailcall`&lt;hyper::proto::h1::dispatch::Server&lt;S,hyper::body::body::Body&gt; as hyper::proto::h1::dispatch::Dispatch&gt;::recv_msg (61 samples, 0.22%)</title><rect x="9.6340%" y="261" width="0.2159%" height="15" fill="rgb(221,10,30)" fg:x="2722" fg:w="61"/><text x="9.8840%" y="271.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;http::header::map::HeaderMap&gt; (26 samples, 0.09%)</title><rect x="9.7579%" y="245" width="0.0920%" height="15" fill="rgb(210,229,1)" fg:x="2757" fg:w="26"/><text x="10.0079%" y="255.50"></text></g><g><title>tailcall`&lt;hyper::proto::h1::io::WriteBuf&lt;B&gt; as bytes::buf::buf_impl::Buf&gt;::advance (7 samples, 0.02%)</title><rect x="9.8499%" y="261" width="0.0248%" height="15" fill="rgb(222,148,37)" fg:x="2783" fg:w="7"/><text x="10.0999%" y="271.50"></text></g><g><title>tailcall`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (3 samples, 0.01%)</title><rect x="9.8747%" y="261" width="0.0106%" height="15" fill="rgb(234,67,33)" fg:x="2790" fg:w="3"/><text x="10.1247%" y="271.50"></text></g><g><title>tailcall`DYLD-STUB$$memcpy (7 samples, 0.02%)</title><rect x="9.8924%" y="261" width="0.0248%" height="15" fill="rgb(247,98,35)" fg:x="2795" fg:w="7"/><text x="10.1424%" y="271.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;http::header::map::HeaderMap&gt; (3 samples, 0.01%)</title><rect x="9.9172%" y="261" width="0.0106%" height="15" fill="rgb(247,138,52)" fg:x="2802" fg:w="3"/><text x="10.1672%" y="271.50"></text></g><g><title>tailcall`DYLD-STUB$$clock_gettime (4 samples, 0.01%)</title><rect x="9.9526%" y="245" width="0.0142%" height="15" fill="rgb(213,79,30)" fg:x="2812" fg:w="4"/><text x="10.2026%" y="255.50"></text></g><g><title>libsystem_c.dylib`gettimeofday (111 samples, 0.39%)</title><rect x="10.0057%" y="213" width="0.3929%" height="15" fill="rgb(246,177,23)" fg:x="2827" fg:w="111"/><text x="10.2557%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (106 samples, 0.38%)</title><rect x="10.0234%" y="197" width="0.3752%" height="15" fill="rgb(230,62,27)" fg:x="2832" fg:w="106"/><text x="10.2734%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__commpage_gettimeofday (3 samples, 0.01%)</title><rect x="10.3985%" y="213" width="0.0106%" height="15" fill="rgb(216,154,8)" fg:x="2938" fg:w="3"/><text x="10.6485%" y="223.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (125 samples, 0.44%)</title><rect x="9.9703%" y="229" width="0.4424%" height="15" fill="rgb(244,35,45)" fg:x="2817" fg:w="125"/><text x="10.2203%" y="239.50"></text></g><g><title>tailcall`hyper::common::date::CachedDate::check (132 samples, 0.47%)</title><rect x="9.9490%" y="261" width="0.4672%" height="15" fill="rgb(251,115,12)" fg:x="2811" fg:w="132"/><text x="10.1990%" y="271.50"></text></g><g><title>tailcall`std::sys::pal::unix::time::Timespec::now (126 samples, 0.45%)</title><rect x="9.9703%" y="245" width="0.4460%" height="15" fill="rgb(240,54,50)" fg:x="2817" fg:w="126"/><text x="10.2203%" y="255.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (6 samples, 0.02%)</title><rect x="10.4516%" y="245" width="0.0212%" height="15" fill="rgb(233,84,52)" fg:x="2953" fg:w="6"/><text x="10.7016%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (27 samples, 0.10%)</title><rect x="10.4729%" y="245" width="0.0956%" height="15" fill="rgb(207,117,47)" fg:x="2959" fg:w="27"/><text x="10.7229%" y="255.50"></text></g><g><title>tailcall`_mi_page_retire (11 samples, 0.04%)</title><rect x="10.5720%" y="245" width="0.0389%" height="15" fill="rgb(249,43,39)" fg:x="2987" fg:w="11"/><text x="10.8220%" y="255.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;std::collections::hash::map::HashMap&lt;core::any::TypeId,alloc::boxed::Box&lt;dyn core::any::Any+core::marker::Sync+core::marker::Send&gt;,core::hash::BuildHasherDefault&lt;http::extensions::IdHasher&gt;&gt;&gt;&gt;&gt; (5 samples, 0.02%)</title><rect x="10.6144%" y="245" width="0.0177%" height="15" fill="rgb(209,38,44)" fg:x="2999" fg:w="5"/><text x="10.8644%" y="255.50"></text></g><g><title>tailcall`http::header::name::HeaderName::as_str (24 samples, 0.08%)</title><rect x="10.6357%" y="245" width="0.0849%" height="15" fill="rgb(236,212,23)" fg:x="3005" fg:w="24"/><text x="10.8857%" y="255.50"></text></g><g><title>tailcall`hyper::proto::h1::role::encode_headers (129 samples, 0.46%)</title><rect x="10.7206%" y="245" width="0.4566%" height="15" fill="rgb(242,79,21)" fg:x="3029" fg:w="129"/><text x="10.9706%" y="255.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;http::header::map::Drain&lt;http::header::value::HeaderValue&gt;&gt; (4 samples, 0.01%)</title><rect x="11.1630%" y="229" width="0.0142%" height="15" fill="rgb(211,96,35)" fg:x="3154" fg:w="4"/><text x="11.4130%" y="239.50"></text></g><g><title>tailcall`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::encode_head (220 samples, 0.78%)</title><rect x="10.4162%" y="261" width="0.7787%" height="15" fill="rgb(253,215,40)" fg:x="2943" fg:w="220"/><text x="10.6662%" y="271.50"></text></g><g><title>tailcall`mi_free (5 samples, 0.02%)</title><rect x="11.1772%" y="245" width="0.0177%" height="15" fill="rgb(211,81,21)" fg:x="3158" fg:w="5"/><text x="11.4272%" y="255.50"></text></g><g><title>tailcall`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::maybe_notify (5 samples, 0.02%)</title><rect x="11.2020%" y="261" width="0.0177%" height="15" fill="rgb(208,190,38)" fg:x="3165" fg:w="5"/><text x="11.4520%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`writev (17,126 samples, 60.61%)</title><rect x="11.5099%" y="245" width="60.6144%" height="15" fill="rgb(235,213,38)" fg:x="3252" fg:w="17126"/><text x="11.7599%" y="255.50">libsystem_kernel.dylib`writev</text></g><g><title>tailcall`&lt;hyper::common::buf::BufList&lt;T&gt; as bytes::buf::buf_impl::Buf&gt;::chunks_vectored (6 samples, 0.02%)</title><rect x="72.1243%" y="245" width="0.0212%" height="15" fill="rgb(237,122,38)" fg:x="20378" fg:w="6"/><text x="72.3743%" y="255.50"></text></g><g><title>tailcall`&lt;hyper::proto::h1::encode::EncodedBuf&lt;B&gt; as bytes::buf::buf_impl::Buf&gt;::advance (22 samples, 0.08%)</title><rect x="72.1455%" y="245" width="0.0779%" height="15" fill="rgb(244,218,35)" fg:x="20384" fg:w="22"/><text x="72.3955%" y="255.50"></text></g><g><title>tailcall`&lt;hyper::proto::h1::io::WriteBuf&lt;B&gt; as bytes::buf::buf_impl::Buf&gt;::advance (21 samples, 0.07%)</title><rect x="72.2234%" y="245" width="0.0743%" height="15" fill="rgb(240,68,47)" fg:x="20406" fg:w="21"/><text x="72.4734%" y="255.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.01%)</title><rect x="72.3614%" y="229" width="0.0106%" height="15" fill="rgb(210,16,53)" fg:x="20445" fg:w="3"/><text x="72.6114%" y="239.50"></text></g><g><title>tailcall`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (31 samples, 0.11%)</title><rect x="72.2977%" y="245" width="0.1097%" height="15" fill="rgb(235,124,12)" fg:x="20427" fg:w="31"/><text x="72.5477%" y="255.50"></text></g><g><title>tailcall`tokio::runtime::io::registration::Registration::poll_ready (10 samples, 0.04%)</title><rect x="72.3721%" y="229" width="0.0354%" height="15" fill="rgb(224,169,11)" fg:x="20448" fg:w="10"/><text x="72.6221%" y="239.50"></text></g><g><title>tailcall`bytes::bytes::static_drop (5 samples, 0.02%)</title><rect x="72.4074%" y="245" width="0.0177%" height="15" fill="rgb(250,166,2)" fg:x="20458" fg:w="5"/><text x="72.6574%" y="255.50"></text></g><g><title>tailcall`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::maybe_notify (5 samples, 0.02%)</title><rect x="72.4251%" y="245" width="0.0177%" height="15" fill="rgb(242,216,29)" fg:x="20463" fg:w="5"/><text x="72.6751%" y="255.50"></text></g><g><title>tailcall`hyper::proto::h1::conn::State::try_keep_alive (7 samples, 0.02%)</title><rect x="72.4428%" y="245" width="0.0248%" height="15" fill="rgb(230,116,27)" fg:x="20468" fg:w="7"/><text x="72.6928%" y="255.50"></text></g><g><title>tailcall`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_flush (17,311 samples, 61.27%)</title><rect x="11.2197%" y="261" width="61.2692%" height="15" fill="rgb(228,99,48)" fg:x="3170" fg:w="17311"/><text x="11.4697%" y="271.50">tailcall`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_flush</text></g><g><title>tailcall`tokio::runtime::io::registration::Registration::poll_ready (6 samples, 0.02%)</title><rect x="72.4676%" y="245" width="0.0212%" height="15" fill="rgb(253,11,6)" fg:x="20475" fg:w="6"/><text x="72.7176%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.02%)</title><rect x="72.7295%" y="245" width="0.0248%" height="15" fill="rgb(247,143,39)" fg:x="20549" fg:w="7"/><text x="72.9795%" y="255.50"></text></g><g><title>tailcall`&lt;http::method::Inner as core::clone::Clone&gt;::clone (3 samples, 0.01%)</title><rect x="72.7543%" y="245" width="0.0106%" height="15" fill="rgb(236,97,10)" fg:x="20556" fg:w="3"/><text x="73.0043%" y="255.50"></text></g><g><title>tailcall`&lt;hyper::proto::h1::conn::KA as core::ops::bit::BitAndAssign&lt;bool&gt;&gt;::bitand_assign (3 samples, 0.01%)</title><rect x="72.7649%" y="245" width="0.0106%" height="15" fill="rgb(233,208,19)" fg:x="20559" fg:w="3"/><text x="73.0149%" y="255.50"></text></g><g><title>tailcall`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (4 samples, 0.01%)</title><rect x="72.7755%" y="245" width="0.0142%" height="15" fill="rgb(216,164,2)" fg:x="20562" fg:w="4"/><text x="73.0255%" y="255.50"></text></g><g><title>tailcall`bytes::bytes::Bytes::slice (3 samples, 0.01%)</title><rect x="72.7897%" y="245" width="0.0106%" height="15" fill="rgb(220,129,5)" fg:x="20566" fg:w="3"/><text x="73.0397%" y="255.50"></text></g><g><title>tailcall`bytes::bytes_mut::BytesMut::split_to (3 samples, 0.01%)</title><rect x="72.8003%" y="245" width="0.0106%" height="15" fill="rgb(242,17,10)" fg:x="20569" fg:w="3"/><text x="73.0503%" y="255.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;core::option::Option&lt;http::method::Method&gt;&gt; (5 samples, 0.02%)</title><rect x="72.8145%" y="245" width="0.0177%" height="15" fill="rgb(242,107,0)" fg:x="20573" fg:w="5"/><text x="73.0645%" y="255.50"></text></g><g><title>tailcall`http::header::map::HeaderMap&lt;T&gt;::try_append2 (19 samples, 0.07%)</title><rect x="72.8322%" y="245" width="0.0672%" height="15" fill="rgb(251,28,31)" fg:x="20578" fg:w="19"/><text x="73.0822%" y="255.50"></text></g><g><title>tailcall`http::header::map::HeaderMap&lt;T&gt;::try_reserve (5 samples, 0.02%)</title><rect x="72.8994%" y="245" width="0.0177%" height="15" fill="rgb(233,223,10)" fg:x="20597" fg:w="5"/><text x="73.1494%" y="255.50"></text></g><g><title>tailcall`http::header::name::HeaderName::from_bytes (4 samples, 0.01%)</title><rect x="72.9171%" y="245" width="0.0142%" height="15" fill="rgb(215,21,27)" fg:x="20602" fg:w="4"/><text x="73.1671%" y="255.50"></text></g><g><title>tailcall`http::method::Method::from_bytes (3 samples, 0.01%)</title><rect x="72.9313%" y="245" width="0.0106%" height="15" fill="rgb(232,23,21)" fg:x="20606" fg:w="3"/><text x="73.1813%" y="255.50"></text></g><g><title>tailcall`httparse::parse_headers_iter_uninit (4 samples, 0.01%)</title><rect x="72.9454%" y="245" width="0.0142%" height="15" fill="rgb(244,5,23)" fg:x="20610" fg:w="4"/><text x="73.1954%" y="255.50"></text></g><g><title>tailcall`httparse::parse_version (4 samples, 0.01%)</title><rect x="72.9596%" y="245" width="0.0142%" height="15" fill="rgb(226,81,46)" fg:x="20614" fg:w="4"/><text x="73.2096%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (4,616 samples, 16.34%)</title><rect x="73.1542%" y="229" width="16.3375%" height="15" fill="rgb(247,70,30)" fg:x="20669" fg:w="4616"/><text x="73.4042%" y="239.50">libsystem_kernel.dylib`__..</text></g><g><title>libdyld.dylib`tlv_get_addr (6 samples, 0.02%)</title><rect x="89.5413%" y="213" width="0.0212%" height="15" fill="rgb(212,68,19)" fg:x="25299" fg:w="6"/><text x="89.7913%" y="223.50"></text></g><g><title>tailcall`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (31 samples, 0.11%)</title><rect x="89.4918%" y="229" width="0.1097%" height="15" fill="rgb(240,187,13)" fg:x="25285" fg:w="31"/><text x="89.7418%" y="239.50"></text></g><g><title>tailcall`tokio::runtime::io::registration::Registration::poll_ready (11 samples, 0.04%)</title><rect x="89.5625%" y="213" width="0.0389%" height="15" fill="rgb(223,113,26)" fg:x="25305" fg:w="11"/><text x="89.8125%" y="223.50"></text></g><g><title>tailcall`hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (4,700 samples, 16.63%)</title><rect x="72.9737%" y="245" width="16.6348%" height="15" fill="rgb(206,192,2)" fg:x="20618" fg:w="4700"/><text x="73.2237%" y="255.50">tailcall`hyper::proto::h1:..</text></g><g><title>tailcall`&lt;http::method::Inner as core::clone::Clone&gt;::clone (5 samples, 0.02%)</title><rect x="90.1961%" y="229" width="0.0177%" height="15" fill="rgb(241,108,4)" fg:x="25484" fg:w="5"/><text x="90.4461%" y="239.50"></text></g><g><title>tailcall`bytes::bytes::Bytes::slice (5 samples, 0.02%)</title><rect x="90.2138%" y="229" width="0.0177%" height="15" fill="rgb(247,173,49)" fg:x="25489" fg:w="5"/><text x="90.4638%" y="239.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (3 samples, 0.01%)</title><rect x="90.2456%" y="213" width="0.0106%" height="15" fill="rgb(224,114,35)" fg:x="25498" fg:w="3"/><text x="90.4956%" y="223.50"></text></g><g><title>tailcall`_mi_malloc_generic (3 samples, 0.01%)</title><rect x="90.2456%" y="197" width="0.0106%" height="15" fill="rgb(245,159,27)" fg:x="25498" fg:w="3"/><text x="90.4956%" y="207.50"></text></g><g><title>tailcall`bytes::bytes_mut::BytesMut::split_to (11 samples, 0.04%)</title><rect x="90.2315%" y="229" width="0.0389%" height="15" fill="rgb(245,172,44)" fg:x="25494" fg:w="11"/><text x="90.4815%" y="239.50"></text></g><g><title>tailcall`mi_malloc_aligned (4 samples, 0.01%)</title><rect x="90.2562%" y="213" width="0.0142%" height="15" fill="rgb(236,23,11)" fg:x="25501" fg:w="4"/><text x="90.5062%" y="223.50"></text></g><g><title>tailcall`bytes::bytes_mut::shared_v_drop (3 samples, 0.01%)</title><rect x="90.2739%" y="229" width="0.0106%" height="15" fill="rgb(205,117,38)" fg:x="25506" fg:w="3"/><text x="90.5239%" y="239.50"></text></g><g><title>tailcall`http::header::map::HeaderMap&lt;T&gt;::try_reserve_one (4 samples, 0.01%)</title><rect x="90.4261%" y="213" width="0.0142%" height="15" fill="rgb(237,72,25)" fg:x="25549" fg:w="4"/><text x="90.6761%" y="223.50"></text></g><g><title>tailcall`http::header::map::HeaderMap&lt;T&gt;::try_append2 (48 samples, 0.17%)</title><rect x="90.2846%" y="229" width="0.1699%" height="15" fill="rgb(244,70,9)" fg:x="25509" fg:w="48"/><text x="90.5346%" y="239.50"></text></g><g><title>tailcall`http::header::map::hash_elem_using (4 samples, 0.01%)</title><rect x="90.4403%" y="213" width="0.0142%" height="15" fill="rgb(217,125,39)" fg:x="25553" fg:w="4"/><text x="90.6903%" y="223.50"></text></g><g><title>tailcall`http::header::map::HeaderMap&lt;T&gt;::try_reserve (4 samples, 0.01%)</title><rect x="90.4544%" y="229" width="0.0142%" height="15" fill="rgb(235,36,10)" fg:x="25557" fg:w="4"/><text x="90.7044%" y="239.50"></text></g><g><title>tailcall`http::header::map::HeaderMap&lt;T&gt;::try_reserve_one (3 samples, 0.01%)</title><rect x="90.4686%" y="229" width="0.0106%" height="15" fill="rgb(251,123,47)" fg:x="25561" fg:w="3"/><text x="90.7186%" y="239.50"></text></g><g><title>tailcall`http::header::name::HeaderName::from_bytes (7 samples, 0.02%)</title><rect x="90.4863%" y="229" width="0.0248%" height="15" fill="rgb(221,13,13)" fg:x="25566" fg:w="7"/><text x="90.7363%" y="239.50"></text></g><g><title>tailcall`http::header::name::StandardHeader::from_bytes (14 samples, 0.05%)</title><rect x="90.5111%" y="229" width="0.0496%" height="15" fill="rgb(238,131,9)" fg:x="25573" fg:w="14"/><text x="90.7611%" y="239.50"></text></g><g><title>tailcall`http::method::Method::from_bytes (11 samples, 0.04%)</title><rect x="90.5606%" y="229" width="0.0389%" height="15" fill="rgb(211,50,8)" fg:x="25587" fg:w="11"/><text x="90.8106%" y="239.50"></text></g><g><title>tailcall`http::uri::Uri::from_shared (65 samples, 0.23%)</title><rect x="90.5996%" y="229" width="0.2301%" height="15" fill="rgb(245,182,24)" fg:x="25598" fg:w="65"/><text x="90.8496%" y="239.50"></text></g><g><title>tailcall`http::uri::path::PathAndQuery::from_shared (58 samples, 0.21%)</title><rect x="90.6243%" y="213" width="0.2053%" height="15" fill="rgb(242,14,37)" fg:x="25605" fg:w="58"/><text x="90.8743%" y="223.50"></text></g><g><title>tailcall`httparse::parse_headers_iter_uninit (37 samples, 0.13%)</title><rect x="90.8296%" y="229" width="0.1310%" height="15" fill="rgb(246,228,12)" fg:x="25663" fg:w="37"/><text x="91.0796%" y="239.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (6 samples, 0.02%)</title><rect x="90.9606%" y="229" width="0.0212%" height="15" fill="rgb(213,55,15)" fg:x="25700" fg:w="6"/><text x="91.2106%" y="239.50"></text></g><g><title>tailcall`_mi_malloc_generic (6 samples, 0.02%)</title><rect x="90.9606%" y="213" width="0.0212%" height="15" fill="rgb(209,9,3)" fg:x="25700" fg:w="6"/><text x="91.2106%" y="223.50"></text></g><g><title>tailcall`_mi_free_delayed_block (6 samples, 0.02%)</title><rect x="90.9606%" y="197" width="0.0212%" height="15" fill="rgb(230,59,30)" fg:x="25700" fg:w="6"/><text x="91.2106%" y="207.50"></text></g><g><title>tailcall`_mi_page_free (3 samples, 0.01%)</title><rect x="90.9712%" y="181" width="0.0106%" height="15" fill="rgb(209,121,21)" fg:x="25703" fg:w="3"/><text x="91.2212%" y="191.50"></text></g><g><title>tailcall`mi_segment_page_clear (3 samples, 0.01%)</title><rect x="90.9712%" y="165" width="0.0106%" height="15" fill="rgb(220,109,13)" fg:x="25703" fg:w="3"/><text x="91.2212%" y="175.50"></text></g><g><title>tailcall`mi_segment_span_free_coalesce (3 samples, 0.01%)</title><rect x="90.9712%" y="149" width="0.0106%" height="15" fill="rgb(232,18,1)" fg:x="25703" fg:w="3"/><text x="91.2212%" y="159.50"></text></g><g><title>tailcall`mi_segment_span_free (3 samples, 0.01%)</title><rect x="90.9712%" y="133" width="0.0106%" height="15" fill="rgb(215,41,42)" fg:x="25703" fg:w="3"/><text x="91.2212%" y="143.50"></text></g><g><title>tailcall`mi_segment_try_purge (3 samples, 0.01%)</title><rect x="90.9712%" y="117" width="0.0106%" height="15" fill="rgb(224,123,36)" fg:x="25703" fg:w="3"/><text x="91.2212%" y="127.50"></text></g><g><title>tailcall`mi_segment_purge (3 samples, 0.01%)</title><rect x="90.9712%" y="101" width="0.0106%" height="15" fill="rgb(240,125,3)" fg:x="25703" fg:w="3"/><text x="91.2212%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.01%)</title><rect x="90.9712%" y="85" width="0.0106%" height="15" fill="rgb(205,98,50)" fg:x="25703" fg:w="3"/><text x="91.2212%" y="95.50"></text></g><g><title>tailcall`hyper::proto::h1::role::parse_headers (390 samples, 1.38%)</title><rect x="89.6086%" y="245" width="1.3803%" height="15" fill="rgb(205,185,37)" fg:x="25318" fg:w="390"/><text x="89.8586%" y="255.50"></text></g><g><title>tailcall`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_head (5,229 samples, 18.51%)</title><rect x="72.4889%" y="261" width="18.5071%" height="15" fill="rgb(238,207,15)" fg:x="20481" fg:w="5229"/><text x="72.7389%" y="271.50">tailcall`hyper::proto::h1::co..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (9 samples, 0.03%)</title><rect x="91.0703%" y="213" width="0.0319%" height="15" fill="rgb(213,199,42)" fg:x="25731" fg:w="9"/><text x="91.3203%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (10 samples, 0.04%)</title><rect x="91.1411%" y="197" width="0.0354%" height="15" fill="rgb(235,201,11)" fg:x="25751" fg:w="10"/><text x="91.3911%" y="207.50"></text></g><g><title>tailcall`tokio::runtime::io::registration::Registration::poll_ready (36 samples, 0.13%)</title><rect x="91.1765%" y="197" width="0.1274%" height="15" fill="rgb(207,46,11)" fg:x="25761" fg:w="36"/><text x="91.4265%" y="207.50"></text></g><g><title>tailcall`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (61 samples, 0.22%)</title><rect x="91.1021%" y="213" width="0.2159%" height="15" fill="rgb(241,35,35)" fg:x="25740" fg:w="61"/><text x="91.3521%" y="223.50"></text></g><g><title>tailcall`tokio::runtime::task::waker::clone_waker (4 samples, 0.01%)</title><rect x="91.3039%" y="197" width="0.0142%" height="15" fill="rgb(243,32,47)" fg:x="25797" fg:w="4"/><text x="91.5539%" y="207.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (8 samples, 0.03%)</title><rect x="91.3464%" y="197" width="0.0283%" height="15" fill="rgb(247,202,23)" fg:x="25809" fg:w="8"/><text x="91.5964%" y="207.50"></text></g><g><title>tailcall`_mi_free_delayed_block (3 samples, 0.01%)</title><rect x="91.3924%" y="181" width="0.0106%" height="15" fill="rgb(219,102,11)" fg:x="25822" fg:w="3"/><text x="91.6424%" y="191.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (9 samples, 0.03%)</title><rect x="91.9339%" y="85" width="0.0319%" height="15" fill="rgb(243,110,44)" fg:x="25975" fg:w="9"/><text x="92.1839%" y="95.50"></text></g><g><title>libsystem_c.dylib`_mach_boottime_usec (9 samples, 0.03%)</title><rect x="91.9339%" y="69" width="0.0319%" height="15" fill="rgb(222,74,54)" fg:x="25975" fg:w="9"/><text x="92.1839%" y="79.50"></text></g><g><title>libsystem_c.dylib`gettimeofday (8 samples, 0.03%)</title><rect x="91.9374%" y="53" width="0.0283%" height="15" fill="rgb(216,99,12)" fg:x="25976" fg:w="8"/><text x="92.1874%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (8 samples, 0.03%)</title><rect x="91.9374%" y="37" width="0.0283%" height="15" fill="rgb(226,22,26)" fg:x="25976" fg:w="8"/><text x="92.1874%" y="47.50"></text></g><g><title>tailcall`mi_segment_page_clear (142 samples, 0.50%)</title><rect x="91.8985%" y="133" width="0.5026%" height="15" fill="rgb(217,163,10)" fg:x="25965" fg:w="142"/><text x="92.1485%" y="143.50"></text></g><g><title>tailcall`mi_segment_span_free_coalesce (136 samples, 0.48%)</title><rect x="91.9197%" y="117" width="0.4813%" height="15" fill="rgb(213,25,53)" fg:x="25971" fg:w="136"/><text x="92.1697%" y="127.50"></text></g><g><title>tailcall`mi_segment_span_free (132 samples, 0.47%)</title><rect x="91.9339%" y="101" width="0.4672%" height="15" fill="rgb(252,105,26)" fg:x="25975" fg:w="132"/><text x="92.1839%" y="111.50"></text></g><g><title>tailcall`mi_segment_try_purge (123 samples, 0.44%)</title><rect x="91.9657%" y="85" width="0.4353%" height="15" fill="rgb(220,39,43)" fg:x="25984" fg:w="123"/><text x="92.2157%" y="95.50"></text></g><g><title>tailcall`mi_segment_purge (122 samples, 0.43%)</title><rect x="91.9693%" y="69" width="0.4318%" height="15" fill="rgb(229,68,48)" fg:x="25985" fg:w="122"/><text x="92.2193%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`madvise (122 samples, 0.43%)</title><rect x="91.9693%" y="53" width="0.4318%" height="15" fill="rgb(252,8,32)" fg:x="25985" fg:w="122"/><text x="92.2193%" y="63.50"></text></g><g><title>tailcall`_mi_page_free (144 samples, 0.51%)</title><rect x="91.8950%" y="149" width="0.5097%" height="15" fill="rgb(223,20,43)" fg:x="25964" fg:w="144"/><text x="92.1450%" y="159.50"></text></g><g><title>tailcall`mi_page_queue_remove (4 samples, 0.01%)</title><rect x="92.4046%" y="149" width="0.0142%" height="15" fill="rgb(229,81,49)" fg:x="26108" fg:w="4"/><text x="92.6546%" y="159.50"></text></g><g><title>tailcall`_mi_free_delayed_block (265 samples, 0.94%)</title><rect x="91.5021%" y="165" width="0.9379%" height="15" fill="rgb(236,28,36)" fg:x="25853" fg:w="265"/><text x="91.7521%" y="175.50"></text></g><g><title>tailcall`mi_segment_try_purge (6 samples, 0.02%)</title><rect x="92.4188%" y="149" width="0.0212%" height="15" fill="rgb(249,185,26)" fg:x="26112" fg:w="6"/><text x="92.6688%" y="159.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (6 samples, 0.02%)</title><rect x="92.4188%" y="133" width="0.0212%" height="15" fill="rgb(249,174,33)" fg:x="26112" fg:w="6"/><text x="92.6688%" y="143.50"></text></g><g><title>libsystem_c.dylib`_mach_boottime_usec (5 samples, 0.02%)</title><rect x="92.4223%" y="117" width="0.0177%" height="15" fill="rgb(233,201,37)" fg:x="26113" fg:w="5"/><text x="92.6723%" y="127.50"></text></g><g><title>libsystem_c.dylib`gettimeofday (5 samples, 0.02%)</title><rect x="92.4223%" y="101" width="0.0177%" height="15" fill="rgb(221,78,26)" fg:x="26113" fg:w="5"/><text x="92.6723%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (5 samples, 0.02%)</title><rect x="92.4223%" y="85" width="0.0177%" height="15" fill="rgb(250,127,30)" fg:x="26113" fg:w="5"/><text x="92.6723%" y="95.50"></text></g><g><title>tailcall`_mi_page_retire (3 samples, 0.01%)</title><rect x="92.4400%" y="165" width="0.0106%" height="15" fill="rgb(230,49,44)" fg:x="26118" fg:w="3"/><text x="92.6900%" y="175.50"></text></g><g><title>tailcall`_mi_page_try_use_delayed_free (14 samples, 0.05%)</title><rect x="92.4506%" y="165" width="0.0496%" height="15" fill="rgb(229,67,23)" fg:x="26121" fg:w="14"/><text x="92.7006%" y="175.50"></text></g><g><title>tailcall`mi_page_free_list_extend (6 samples, 0.02%)</title><rect x="92.6948%" y="149" width="0.0212%" height="15" fill="rgb(249,83,47)" fg:x="26190" fg:w="6"/><text x="92.9448%" y="159.50"></text></g><g><title>libsystem_c.dylib`_mach_boottime_usec (3 samples, 0.01%)</title><rect x="92.7409%" y="85" width="0.0106%" height="15" fill="rgb(215,43,3)" fg:x="26203" fg:w="3"/><text x="92.9909%" y="95.50"></text></g><g><title>libsystem_c.dylib`gettimeofday (3 samples, 0.01%)</title><rect x="92.7409%" y="69" width="0.0106%" height="15" fill="rgb(238,154,13)" fg:x="26203" fg:w="3"/><text x="92.9909%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (3 samples, 0.01%)</title><rect x="92.7409%" y="53" width="0.0106%" height="15" fill="rgb(219,56,2)" fg:x="26203" fg:w="3"/><text x="92.9909%" y="63.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (4 samples, 0.01%)</title><rect x="92.7409%" y="101" width="0.0142%" height="15" fill="rgb(233,0,4)" fg:x="26203" fg:w="4"/><text x="92.9909%" y="111.50"></text></g><g><title>tailcall`mi_segment_span_allocate (7 samples, 0.02%)</title><rect x="92.7338%" y="117" width="0.0248%" height="15" fill="rgb(235,30,7)" fg:x="26201" fg:w="7"/><text x="92.9838%" y="127.50"></text></g><g><title>tailcall`mi_find_page (78 samples, 0.28%)</title><rect x="92.5002%" y="165" width="0.2761%" height="15" fill="rgb(250,79,13)" fg:x="26135" fg:w="78"/><text x="92.7502%" y="175.50"></text></g><g><title>tailcall`mi_page_fresh_alloc (17 samples, 0.06%)</title><rect x="92.7161%" y="149" width="0.0602%" height="15" fill="rgb(211,146,34)" fg:x="26196" fg:w="17"/><text x="92.9661%" y="159.50"></text></g><g><title>tailcall`mi_segments_page_alloc (16 samples, 0.06%)</title><rect x="92.7196%" y="133" width="0.0566%" height="15" fill="rgb(228,22,38)" fg:x="26197" fg:w="16"/><text x="92.9696%" y="143.50"></text></g><g><title>tailcall`mi_segment_try_purge (5 samples, 0.02%)</title><rect x="92.7585%" y="117" width="0.0177%" height="15" fill="rgb(235,168,5)" fg:x="26208" fg:w="5"/><text x="93.0085%" y="127.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (4 samples, 0.01%)</title><rect x="92.7621%" y="101" width="0.0142%" height="15" fill="rgb(221,155,16)" fg:x="26209" fg:w="4"/><text x="93.0121%" y="111.50"></text></g><g><title>libsystem_c.dylib`_mach_boottime_usec (4 samples, 0.01%)</title><rect x="92.7621%" y="85" width="0.0142%" height="15" fill="rgb(215,215,53)" fg:x="26209" fg:w="4"/><text x="93.0121%" y="95.50"></text></g><g><title>libsystem_c.dylib`gettimeofday (4 samples, 0.01%)</title><rect x="92.7621%" y="69" width="0.0142%" height="15" fill="rgb(223,4,10)" fg:x="26209" fg:w="4"/><text x="93.0121%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (4 samples, 0.01%)</title><rect x="92.7621%" y="53" width="0.0142%" height="15" fill="rgb(234,103,6)" fg:x="26209" fg:w="4"/><text x="93.0121%" y="63.50"></text></g><g><title>tailcall`mi_page_free_list_extend (8 samples, 0.03%)</title><rect x="92.7762%" y="165" width="0.0283%" height="15" fill="rgb(227,97,0)" fg:x="26213" fg:w="8"/><text x="93.0262%" y="175.50"></text></g><g><title>tailcall`_mi_malloc_generic (404 samples, 1.43%)</title><rect x="91.4030%" y="181" width="1.4299%" height="15" fill="rgb(234,150,53)" fg:x="25825" fg:w="404"/><text x="91.6530%" y="191.50"></text></g><g><title>tailcall`mi_page_queue_enqueue_from (8 samples, 0.03%)</title><rect x="92.8046%" y="165" width="0.0283%" height="15" fill="rgb(228,201,54)" fg:x="26221" fg:w="8"/><text x="93.0546%" y="175.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (414 samples, 1.47%)</title><rect x="91.3782%" y="197" width="1.4653%" height="15" fill="rgb(222,22,37)" fg:x="25818" fg:w="414"/><text x="91.6282%" y="207.50"></text></g><g><title>tailcall`mi_find_page (3 samples, 0.01%)</title><rect x="92.8329%" y="181" width="0.0106%" height="15" fill="rgb(237,53,32)" fg:x="26229" fg:w="3"/><text x="93.0829%" y="191.50"></text></g><g><title>tailcall`bytes::bytes_mut::BytesMut::reserve_inner (431 samples, 1.53%)</title><rect x="91.3251%" y="213" width="1.5254%" height="15" fill="rgb(233,25,53)" fg:x="25803" fg:w="431"/><text x="91.5751%" y="223.50"></text></g><g><title>tailcall`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::force_io_read (523 samples, 1.85%)</title><rect x="91.0101%" y="245" width="1.8511%" height="15" fill="rgb(210,40,34)" fg:x="25714" fg:w="523"/><text x="91.2601%" y="255.50">t..</text></g><g><title>tailcall`hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (514 samples, 1.82%)</title><rect x="91.0420%" y="229" width="1.8192%" height="15" fill="rgb(241,220,44)" fg:x="25723" fg:w="514"/><text x="91.2920%" y="239.50">t..</text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (3 samples, 0.01%)</title><rect x="92.8506%" y="213" width="0.0106%" height="15" fill="rgb(235,28,35)" fg:x="26234" fg:w="3"/><text x="93.1006%" y="223.50"></text></g><g><title>tailcall`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_keep_alive (529 samples, 1.87%)</title><rect x="90.9960%" y="261" width="1.8723%" height="15" fill="rgb(210,56,17)" fg:x="25710" fg:w="529"/><text x="91.2460%" y="271.50">t..</text></g><g><title>tailcall`hyper::proto::h1::conn::State::try_keep_alive (3 samples, 0.01%)</title><rect x="92.8683%" y="261" width="0.0106%" height="15" fill="rgb(224,130,29)" fg:x="26239" fg:w="3"/><text x="93.1183%" y="271.50"></text></g><g><title>tailcall`hyper::proto::h1::encode::Encoder::danger_full_buf (6 samples, 0.02%)</title><rect x="92.8789%" y="261" width="0.0212%" height="15" fill="rgb(235,212,8)" fg:x="26242" fg:w="6"/><text x="93.1289%" y="271.50"></text></g><g><title>tailcall`hyper::proto::h1::io::WriteBuf&lt;B&gt;::buffer (5 samples, 0.02%)</title><rect x="92.8824%" y="245" width="0.0177%" height="15" fill="rgb(223,33,50)" fg:x="26243" fg:w="5"/><text x="93.1324%" y="255.50"></text></g><g><title>tailcall`hyper::proto::h1::io::WriteBuf&lt;B&gt;::buffer (3 samples, 0.01%)</title><rect x="92.9072%" y="261" width="0.0106%" height="15" fill="rgb(219,149,13)" fg:x="26250" fg:w="3"/><text x="93.1572%" y="271.50"></text></g><g><title>tailcall`hyper::proto::h1::role::parse_headers (4 samples, 0.01%)</title><rect x="92.9249%" y="261" width="0.0142%" height="15" fill="rgb(250,156,29)" fg:x="26255" fg:w="4"/><text x="93.1749%" y="271.50"></text></g><g><title>tailcall`tailcall::core::http::request_handler::handle_request::_{{closure}} (47 samples, 0.17%)</title><rect x="92.9497%" y="261" width="0.1663%" height="15" fill="rgb(216,193,19)" fg:x="26262" fg:w="47"/><text x="93.1997%" y="271.50"></text></g><g><title>tailcall`tailcall::core::http::request_handler::handle_request::_{{closure}}::_{{closure}} (4 samples, 0.01%)</title><rect x="93.1160%" y="261" width="0.0142%" height="15" fill="rgb(216,135,14)" fg:x="26309" fg:w="4"/><text x="93.3660%" y="271.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (31 samples, 0.11%)</title><rect x="93.1302%" y="245" width="0.1097%" height="15" fill="rgb(241,47,5)" fg:x="26313" fg:w="31"/><text x="93.3802%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (24 samples, 0.08%)</title><rect x="93.2399%" y="245" width="0.0849%" height="15" fill="rgb(233,42,35)" fg:x="26344" fg:w="24"/><text x="93.4899%" y="255.50"></text></g><g><title>tailcall`&lt;tracing::span::Span as tracing_opentelemetry::span_ext::OpenTelemetrySpanExt&gt;::set_attribute (5 samples, 0.02%)</title><rect x="93.3248%" y="245" width="0.0177%" height="15" fill="rgb(231,13,6)" fg:x="26368" fg:w="5"/><text x="93.5748%" y="255.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::enabled (3 samples, 0.01%)</title><rect x="93.3425%" y="245" width="0.0106%" height="15" fill="rgb(207,181,40)" fg:x="26373" fg:w="3"/><text x="93.5925%" y="255.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (24 samples, 0.08%)</title><rect x="93.3815%" y="229" width="0.0849%" height="15" fill="rgb(254,173,49)" fg:x="26384" fg:w="24"/><text x="93.6315%" y="239.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (13 samples, 0.05%)</title><rect x="93.4204%" y="213" width="0.0460%" height="15" fill="rgb(221,1,38)" fg:x="26395" fg:w="13"/><text x="93.6704%" y="223.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::enter (10 samples, 0.04%)</title><rect x="93.4664%" y="229" width="0.0354%" height="15" fill="rgb(206,124,46)" fg:x="26408" fg:w="10"/><text x="93.7164%" y="239.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::span (112 samples, 0.40%)</title><rect x="93.6788%" y="213" width="0.3964%" height="15" fill="rgb(249,21,11)" fg:x="26468" fg:w="112"/><text x="93.9288%" y="223.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (59 samples, 0.21%)</title><rect x="93.8664%" y="197" width="0.2088%" height="15" fill="rgb(222,201,40)" fg:x="26521" fg:w="59"/><text x="94.1164%" y="207.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::is_enabled_inner (168 samples, 0.59%)</title><rect x="93.5018%" y="229" width="0.5946%" height="15" fill="rgb(235,61,29)" fg:x="26418" fg:w="168"/><text x="93.7518%" y="239.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (6 samples, 0.02%)</title><rect x="94.0752%" y="213" width="0.0212%" height="15" fill="rgb(219,207,3)" fg:x="26580" fg:w="6"/><text x="94.3252%" y="223.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::span (5 samples, 0.02%)</title><rect x="94.0964%" y="229" width="0.0177%" height="15" fill="rgb(222,56,46)" fg:x="26586" fg:w="5"/><text x="94.3464%" y="239.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::enter (216 samples, 0.76%)</title><rect x="93.3532%" y="245" width="0.7645%" height="15" fill="rgb(239,76,54)" fg:x="26376" fg:w="216"/><text x="93.6032%" y="255.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (9 samples, 0.03%)</title><rect x="94.1247%" y="229" width="0.0319%" height="15" fill="rgb(231,124,27)" fg:x="26594" fg:w="9"/><text x="94.3747%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.02%)</title><rect x="94.1566%" y="229" width="0.0177%" height="15" fill="rgb(249,195,6)" fg:x="26603" fg:w="5"/><text x="94.4066%" y="239.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (3 samples, 0.01%)</title><rect x="94.1743%" y="229" width="0.0106%" height="15" fill="rgb(237,174,47)" fg:x="26608" fg:w="3"/><text x="94.4243%" y="239.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (27 samples, 0.10%)</title><rect x="94.1849%" y="229" width="0.0956%" height="15" fill="rgb(206,201,31)" fg:x="26611" fg:w="27"/><text x="94.4349%" y="239.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (17 samples, 0.06%)</title><rect x="94.2203%" y="213" width="0.0602%" height="15" fill="rgb(231,57,52)" fg:x="26621" fg:w="17"/><text x="94.4703%" y="223.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (11 samples, 0.04%)</title><rect x="94.2415%" y="197" width="0.0389%" height="15" fill="rgb(248,177,22)" fg:x="26627" fg:w="11"/><text x="94.4915%" y="207.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (5 samples, 0.02%)</title><rect x="94.2628%" y="181" width="0.0177%" height="15" fill="rgb(215,211,37)" fg:x="26633" fg:w="5"/><text x="94.5128%" y="191.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::span (27 samples, 0.10%)</title><rect x="94.3123%" y="213" width="0.0956%" height="15" fill="rgb(241,128,51)" fg:x="26647" fg:w="27"/><text x="94.5623%" y="223.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (24 samples, 0.08%)</title><rect x="94.3229%" y="197" width="0.0849%" height="15" fill="rgb(227,165,31)" fg:x="26650" fg:w="24"/><text x="94.5729%" y="207.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::is_enabled_inner (36 samples, 0.13%)</title><rect x="94.2875%" y="229" width="0.1274%" height="15" fill="rgb(228,167,24)" fg:x="26640" fg:w="36"/><text x="94.5375%" y="239.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::exit (85 samples, 0.30%)</title><rect x="94.1176%" y="245" width="0.3008%" height="15" fill="rgb(228,143,12)" fg:x="26592" fg:w="85"/><text x="94.3676%" y="255.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::new_span (4 samples, 0.01%)</title><rect x="94.4185%" y="245" width="0.0142%" height="15" fill="rgb(249,149,8)" fg:x="26677" fg:w="4"/><text x="94.6685%" y="255.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (8 samples, 0.03%)</title><rect x="94.4787%" y="229" width="0.0283%" height="15" fill="rgb(243,35,44)" fg:x="26694" fg:w="8"/><text x="94.7287%" y="239.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::CloseGuard as core::ops::drop::Drop&gt;::drop (31 samples, 0.11%)</title><rect x="94.5070%" y="229" width="0.1097%" height="15" fill="rgb(246,89,9)" fg:x="26702" fg:w="31"/><text x="94.7570%" y="239.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (9 samples, 0.03%)</title><rect x="94.6202%" y="229" width="0.0319%" height="15" fill="rgb(233,213,13)" fg:x="26734" fg:w="9"/><text x="94.8702%" y="239.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (5 samples, 0.02%)</title><rect x="94.6344%" y="213" width="0.0177%" height="15" fill="rgb(233,141,41)" fg:x="26738" fg:w="5"/><text x="94.8844%" y="223.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::span (20 samples, 0.07%)</title><rect x="94.6910%" y="213" width="0.0708%" height="15" fill="rgb(239,167,4)" fg:x="26754" fg:w="20"/><text x="94.9410%" y="223.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (19 samples, 0.07%)</title><rect x="94.6946%" y="197" width="0.0672%" height="15" fill="rgb(209,217,16)" fg:x="26755" fg:w="19"/><text x="94.9446%" y="207.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::is_enabled_inner (35 samples, 0.12%)</title><rect x="94.6521%" y="229" width="0.1239%" height="15" fill="rgb(219,88,35)" fg:x="26743" fg:w="35"/><text x="94.9021%" y="239.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (4 samples, 0.01%)</title><rect x="94.7618%" y="213" width="0.0142%" height="15" fill="rgb(220,193,23)" fg:x="26774" fg:w="4"/><text x="95.0118%" y="223.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (102 samples, 0.36%)</title><rect x="94.4326%" y="245" width="0.3610%" height="15" fill="rgb(230,90,52)" fg:x="26681" fg:w="102"/><text x="94.6826%" y="255.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::span (5 samples, 0.02%)</title><rect x="94.7760%" y="229" width="0.0177%" height="15" fill="rgb(252,106,19)" fg:x="26778" fg:w="5"/><text x="95.0260%" y="239.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::CloseGuard as core::ops::drop::Drop&gt;::drop (5 samples, 0.02%)</title><rect x="94.7937%" y="245" width="0.0177%" height="15" fill="rgb(206,74,20)" fg:x="26783" fg:w="5"/><text x="95.0437%" y="255.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (5 samples, 0.02%)</title><rect x="94.8114%" y="245" width="0.0177%" height="15" fill="rgb(230,138,44)" fg:x="26788" fg:w="5"/><text x="95.0614%" y="255.50"></text></g><g><title>tailcall`DYLD-STUB$$memcpy (5 samples, 0.02%)</title><rect x="94.8467%" y="245" width="0.0177%" height="15" fill="rgb(235,182,43)" fg:x="26798" fg:w="5"/><text x="95.0967%" y="255.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (15 samples, 0.05%)</title><rect x="94.9211%" y="213" width="0.0531%" height="15" fill="rgb(242,16,51)" fg:x="26819" fg:w="15"/><text x="95.1711%" y="223.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (11 samples, 0.04%)</title><rect x="94.9352%" y="197" width="0.0389%" height="15" fill="rgb(248,9,4)" fg:x="26823" fg:w="11"/><text x="95.1852%" y="207.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::enter (10 samples, 0.04%)</title><rect x="94.9742%" y="213" width="0.0354%" height="15" fill="rgb(210,31,22)" fg:x="26834" fg:w="10"/><text x="95.2242%" y="223.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::span (36 samples, 0.13%)</title><rect x="95.0414%" y="197" width="0.1274%" height="15" fill="rgb(239,54,39)" fg:x="26853" fg:w="36"/><text x="95.2914%" y="207.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (30 samples, 0.11%)</title><rect x="95.0626%" y="181" width="0.1062%" height="15" fill="rgb(230,99,41)" fg:x="26859" fg:w="30"/><text x="95.3126%" y="191.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::is_enabled_inner (48 samples, 0.17%)</title><rect x="95.0096%" y="213" width="0.1699%" height="15" fill="rgb(253,106,12)" fg:x="26844" fg:w="48"/><text x="95.2596%" y="223.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (3 samples, 0.01%)</title><rect x="95.1688%" y="197" width="0.0106%" height="15" fill="rgb(213,46,41)" fg:x="26889" fg:w="3"/><text x="95.4188%" y="207.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::span (3 samples, 0.01%)</title><rect x="95.1794%" y="213" width="0.0106%" height="15" fill="rgb(215,133,35)" fg:x="26892" fg:w="3"/><text x="95.4294%" y="223.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::enter (84 samples, 0.30%)</title><rect x="94.9034%" y="229" width="0.2973%" height="15" fill="rgb(213,28,5)" fg:x="26814" fg:w="84"/><text x="95.1534%" y="239.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (3 samples, 0.01%)</title><rect x="95.1901%" y="213" width="0.0106%" height="15" fill="rgb(215,77,49)" fg:x="26895" fg:w="3"/><text x="95.4401%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (9 samples, 0.03%)</title><rect x="95.2113%" y="213" width="0.0319%" height="15" fill="rgb(248,100,22)" fg:x="26901" fg:w="9"/><text x="95.4613%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (4 samples, 0.01%)</title><rect x="95.3387%" y="197" width="0.0142%" height="15" fill="rgb(208,67,9)" fg:x="26937" fg:w="4"/><text x="95.5887%" y="207.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.01%)</title><rect x="95.3670%" y="181" width="0.0106%" height="15" fill="rgb(219,133,21)" fg:x="26945" fg:w="3"/><text x="95.6170%" y="191.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (21 samples, 0.07%)</title><rect x="95.3529%" y="197" width="0.0743%" height="15" fill="rgb(246,46,29)" fg:x="26941" fg:w="21"/><text x="95.6029%" y="207.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (13 samples, 0.05%)</title><rect x="95.3812%" y="181" width="0.0460%" height="15" fill="rgb(246,185,52)" fg:x="26949" fg:w="13"/><text x="95.6312%" y="191.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (6 samples, 0.02%)</title><rect x="95.4060%" y="165" width="0.0212%" height="15" fill="rgb(252,136,11)" fg:x="26956" fg:w="6"/><text x="95.6560%" y="175.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::CloseGuard as core::ops::drop::Drop&gt;::drop (4 samples, 0.01%)</title><rect x="95.4272%" y="197" width="0.0142%" height="15" fill="rgb(219,138,53)" fg:x="26962" fg:w="4"/><text x="95.6772%" y="207.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (54 samples, 0.19%)</title><rect x="95.2538%" y="213" width="0.1911%" height="15" fill="rgb(211,51,23)" fg:x="26913" fg:w="54"/><text x="95.5038%" y="223.50"></text></g><g><title>tailcall`DYLD-STUB$$memmove (3 samples, 0.01%)</title><rect x="95.4449%" y="213" width="0.0106%" height="15" fill="rgb(247,221,28)" fg:x="26967" fg:w="3"/><text x="95.6949%" y="223.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::span (30 samples, 0.11%)</title><rect x="95.5015%" y="197" width="0.1062%" height="15" fill="rgb(251,222,45)" fg:x="26983" fg:w="30"/><text x="95.7515%" y="207.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (26 samples, 0.09%)</title><rect x="95.5157%" y="181" width="0.0920%" height="15" fill="rgb(217,162,53)" fg:x="26987" fg:w="26"/><text x="95.7657%" y="191.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::is_enabled_inner (44 samples, 0.16%)</title><rect x="95.4555%" y="213" width="0.1557%" height="15" fill="rgb(229,93,14)" fg:x="26970" fg:w="44"/><text x="95.7055%" y="223.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::exit (120 samples, 0.42%)</title><rect x="95.2007%" y="229" width="0.4247%" height="15" fill="rgb(209,67,49)" fg:x="26898" fg:w="120"/><text x="95.4507%" y="239.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::span (4 samples, 0.01%)</title><rect x="95.6112%" y="213" width="0.0142%" height="15" fill="rgb(213,87,29)" fg:x="27014" fg:w="4"/><text x="95.8612%" y="223.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;tracing::instrument::Instrumented&lt;tailcall::core::http::request_handler::handle_request&lt;tailcall::core::async_graphql_hyper::GraphQLRequest&gt;::{{closure}}::{{closure}}&gt;&gt; (219 samples, 0.78%)</title><rect x="94.8786%" y="245" width="0.7751%" height="15" fill="rgb(205,151,52)" fg:x="26807" fg:w="219"/><text x="95.1286%" y="255.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::is_enabled_inner (5 samples, 0.02%)</title><rect x="95.6360%" y="229" width="0.0177%" height="15" fill="rgb(253,215,39)" fg:x="27021" fg:w="5"/><text x="95.8860%" y="239.50"></text></g><g><title>tailcall`http::header::map::hash_elem_using (3 samples, 0.01%)</title><rect x="95.6537%" y="245" width="0.0106%" height="15" fill="rgb(221,220,41)" fg:x="27026" fg:w="3"/><text x="95.9037%" y="255.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (8 samples, 0.03%)</title><rect x="95.8307%" y="229" width="0.0283%" height="15" fill="rgb(218,133,21)" fg:x="27076" fg:w="8"/><text x="96.0807%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.02%)</title><rect x="95.8590%" y="229" width="0.0177%" height="15" fill="rgb(221,193,43)" fg:x="27084" fg:w="5"/><text x="96.1090%" y="239.50"></text></g><g><title>tailcall`&lt;tracing::span::Span as tracing_opentelemetry::span_ext::OpenTelemetrySpanExt&gt;::set_attribute (10 samples, 0.04%)</title><rect x="95.8767%" y="229" width="0.0354%" height="15" fill="rgb(240,128,52)" fg:x="27089" fg:w="10"/><text x="96.1267%" y="239.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::downcast_raw (16 samples, 0.06%)</title><rect x="95.9192%" y="229" width="0.0566%" height="15" fill="rgb(253,114,12)" fg:x="27101" fg:w="16"/><text x="96.1692%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (4 samples, 0.01%)</title><rect x="95.9970%" y="213" width="0.0142%" height="15" fill="rgb(215,223,47)" fg:x="27123" fg:w="4"/><text x="96.2470%" y="223.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::CloseGuard as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="96.0112%" y="213" width="0.0106%" height="15" fill="rgb(248,225,23)" fg:x="27127" fg:w="3"/><text x="96.2612%" y="223.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (16 samples, 0.06%)</title><rect x="96.0218%" y="213" width="0.0566%" height="15" fill="rgb(250,108,0)" fg:x="27130" fg:w="16"/><text x="96.2718%" y="223.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (9 samples, 0.03%)</title><rect x="96.0466%" y="197" width="0.0319%" height="15" fill="rgb(228,208,7)" fg:x="27137" fg:w="9"/><text x="96.2966%" y="207.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (30 samples, 0.11%)</title><rect x="95.9758%" y="229" width="0.1062%" height="15" fill="rgb(244,45,10)" fg:x="27117" fg:w="30"/><text x="96.2258%" y="239.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::current_span (4 samples, 0.01%)</title><rect x="96.0820%" y="229" width="0.0142%" height="15" fill="rgb(207,125,25)" fg:x="27147" fg:w="4"/><text x="96.3320%" y="239.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (3 samples, 0.01%)</title><rect x="96.0961%" y="229" width="0.0106%" height="15" fill="rgb(210,195,18)" fg:x="27151" fg:w="3"/><text x="96.3461%" y="239.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;opentelemetry::common::Value&gt; (3 samples, 0.01%)</title><rect x="96.1174%" y="229" width="0.0106%" height="15" fill="rgb(249,80,12)" fg:x="27157" fg:w="3"/><text x="96.3674%" y="239.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;tailcall::core::http::request_handler::handle_request&lt;tailcall::core::async_graphql_hyper::GraphQLRequest&gt;::{{closure}}::{{closure}}::{{closure}}&gt; (5 samples, 0.02%)</title><rect x="96.1315%" y="229" width="0.0177%" height="15" fill="rgb(221,65,9)" fg:x="27161" fg:w="5"/><text x="96.3815%" y="239.50"></text></g><g><title>tailcall`http::header::map::hash_elem_using (3 samples, 0.01%)</title><rect x="96.1528%" y="229" width="0.0106%" height="15" fill="rgb(235,49,36)" fg:x="27167" fg:w="3"/><text x="96.4028%" y="239.50"></text></g><g><title>tailcall`http::response::Builder::header (8 samples, 0.03%)</title><rect x="96.1634%" y="229" width="0.0283%" height="15" fill="rgb(225,32,20)" fg:x="27170" fg:w="8"/><text x="96.4134%" y="239.50"></text></g><g><title>tailcall`bytes::bytes::static_drop (8 samples, 0.03%)</title><rect x="96.5385%" y="213" width="0.0283%" height="15" fill="rgb(215,141,46)" fg:x="27276" fg:w="8"/><text x="96.7885%" y="223.50"></text></g><g><title>tailcall`bytes::bytes_mut::shared_v_drop (23 samples, 0.08%)</title><rect x="96.6306%" y="181" width="0.0814%" height="15" fill="rgb(250,160,47)" fg:x="27302" fg:w="23"/><text x="96.8806%" y="191.50"></text></g><g><title>tailcall`mi_free (5 samples, 0.02%)</title><rect x="96.7120%" y="181" width="0.0177%" height="15" fill="rgb(216,222,40)" fg:x="27325" fg:w="5"/><text x="96.9620%" y="191.50"></text></g><g><title>tailcall`mi_free_block_delayed_mt (14 samples, 0.05%)</title><rect x="96.7297%" y="181" width="0.0496%" height="15" fill="rgb(234,217,39)" fg:x="27330" fg:w="14"/><text x="96.9797%" y="191.50"></text></g><g><title>tailcall`mi_free_block_mt (11 samples, 0.04%)</title><rect x="96.7792%" y="181" width="0.0389%" height="15" fill="rgb(207,178,40)" fg:x="27344" fg:w="11"/><text x="97.0292%" y="191.50"></text></g><g><title>tailcall`mi_free_generic_local (4 samples, 0.01%)</title><rect x="96.8181%" y="181" width="0.0142%" height="15" fill="rgb(221,136,13)" fg:x="27355" fg:w="4"/><text x="97.0681%" y="191.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;http::header::map::HeaderMap&gt; (70 samples, 0.25%)</title><rect x="96.5987%" y="197" width="0.2478%" height="15" fill="rgb(249,199,10)" fg:x="27293" fg:w="70"/><text x="96.8487%" y="207.50"></text></g><g><title>tailcall`mi_free (37 samples, 0.13%)</title><rect x="96.8465%" y="197" width="0.1310%" height="15" fill="rgb(249,222,13)" fg:x="27363" fg:w="37"/><text x="97.0965%" y="207.50"></text></g><g><title>tailcall`mi_free_block_delayed_mt (44 samples, 0.16%)</title><rect x="96.9774%" y="197" width="0.1557%" height="15" fill="rgb(244,185,38)" fg:x="27400" fg:w="44"/><text x="97.2274%" y="207.50"></text></g><g><title>tailcall`mi_free_block_mt (15 samples, 0.05%)</title><rect x="97.1331%" y="197" width="0.0531%" height="15" fill="rgb(236,202,9)" fg:x="27444" fg:w="15"/><text x="97.3831%" y="207.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;http::request::Parts&gt; (178 samples, 0.63%)</title><rect x="96.5704%" y="213" width="0.6300%" height="15" fill="rgb(250,229,37)" fg:x="27285" fg:w="178"/><text x="96.8204%" y="223.50"></text></g><g><title>tailcall`mi_free_generic_mt (4 samples, 0.01%)</title><rect x="97.1862%" y="197" width="0.0142%" height="15" fill="rgb(206,174,23)" fg:x="27459" fg:w="4"/><text x="97.4362%" y="207.50"></text></g><g><title>tailcall`http::header::map::HeaderMap&lt;T&gt;::try_append2 (6 samples, 0.02%)</title><rect x="97.2075%" y="213" width="0.0212%" height="15" fill="rgb(211,33,43)" fg:x="27465" fg:w="6"/><text x="97.4575%" y="223.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (4 samples, 0.01%)</title><rect x="97.5189%" y="165" width="0.0142%" height="15" fill="rgb(245,58,50)" fg:x="27553" fg:w="4"/><text x="97.7689%" y="175.50"></text></g><g><title>tailcall`http::header::map::HeaderMap&lt;T&gt;::try_reserve_one (27 samples, 0.10%)</title><rect x="97.4623%" y="181" width="0.0956%" height="15" fill="rgb(244,68,36)" fg:x="27537" fg:w="27"/><text x="97.7123%" y="191.50"></text></g><g><title>tailcall`mi_malloc_aligned (7 samples, 0.02%)</title><rect x="97.5331%" y="165" width="0.0248%" height="15" fill="rgb(232,229,15)" fg:x="27557" fg:w="7"/><text x="97.7831%" y="175.50"></text></g><g><title>tailcall`http::header::map::hash_elem_using (3 samples, 0.01%)</title><rect x="97.5579%" y="181" width="0.0106%" height="15" fill="rgb(254,30,23)" fg:x="27564" fg:w="3"/><text x="97.8079%" y="191.50"></text></g><g><title>tailcall`http::header::map::HeaderMap&lt;T&gt;::try_append2 (73 samples, 0.26%)</title><rect x="97.3137%" y="197" width="0.2584%" height="15" fill="rgb(235,160,14)" fg:x="27495" fg:w="73"/><text x="97.5637%" y="207.50"></text></g><g><title>tailcall`http::header::map::HeaderMap&lt;T&gt;::try_reserve_one (3 samples, 0.01%)</title><rect x="97.5720%" y="197" width="0.0106%" height="15" fill="rgb(212,155,44)" fg:x="27568" fg:w="3"/><text x="97.8220%" y="207.50"></text></g><g><title>tailcall`http::response::Builder::header (109 samples, 0.39%)</title><rect x="97.2287%" y="213" width="0.3858%" height="15" fill="rgb(226,2,50)" fg:x="27471" fg:w="109"/><text x="97.4787%" y="223.50"></text></g><g><title>tailcall`mi_malloc_aligned (7 samples, 0.02%)</title><rect x="97.5897%" y="197" width="0.0248%" height="15" fill="rgb(234,177,6)" fg:x="27573" fg:w="7"/><text x="97.8397%" y="207.50"></text></g><g><title>tailcall`tailcall::core::http::request_handler::handle_request_inner::_{{closure}} (417 samples, 1.48%)</title><rect x="96.1952%" y="229" width="1.4759%" height="15" fill="rgb(217,24,9)" fg:x="27179" fg:w="417"/><text x="96.4452%" y="239.50"></text></g><g><title>tailcall`mi_free (16 samples, 0.06%)</title><rect x="97.6145%" y="213" width="0.0566%" height="15" fill="rgb(220,13,46)" fg:x="27580" fg:w="16"/><text x="97.8645%" y="223.50"></text></g><g><title>tailcall`tailcall::core::http::telemetry::RequestCounter::new (8 samples, 0.03%)</title><rect x="97.6711%" y="229" width="0.0283%" height="15" fill="rgb(239,221,27)" fg:x="27596" fg:w="8"/><text x="97.9211%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (20 samples, 0.07%)</title><rect x="97.8198%" y="213" width="0.0708%" height="15" fill="rgb(222,198,25)" fg:x="27638" fg:w="20"/><text x="98.0698%" y="223.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::clone_span (5 samples, 0.02%)</title><rect x="97.8906%" y="213" width="0.0177%" height="15" fill="rgb(211,99,13)" fg:x="27658" fg:w="5"/><text x="98.1406%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.01%)</title><rect x="97.9472%" y="197" width="0.0106%" height="15" fill="rgb(232,111,31)" fg:x="27674" fg:w="3"/><text x="98.1972%" y="207.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::CloseGuard as core::ops::drop::Drop&gt;::drop (5 samples, 0.02%)</title><rect x="97.9578%" y="197" width="0.0177%" height="15" fill="rgb(245,82,37)" fg:x="27677" fg:w="5"/><text x="98.2078%" y="207.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (39 samples, 0.14%)</title><rect x="97.9083%" y="213" width="0.1380%" height="15" fill="rgb(227,149,46)" fg:x="27663" fg:w="39"/><text x="98.1583%" y="223.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (20 samples, 0.07%)</title><rect x="97.9755%" y="197" width="0.0708%" height="15" fill="rgb(218,36,50)" fg:x="27682" fg:w="20"/><text x="98.2255%" y="207.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (14 samples, 0.05%)</title><rect x="97.9967%" y="181" width="0.0496%" height="15" fill="rgb(226,80,48)" fg:x="27688" fg:w="14"/><text x="98.2467%" y="191.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::current_span (3 samples, 0.01%)</title><rect x="98.0463%" y="213" width="0.0106%" height="15" fill="rgb(238,224,15)" fg:x="27702" fg:w="3"/><text x="98.2963%" y="223.50"></text></g><g><title>tailcall`opentelemetry::context::Context::current (4 samples, 0.01%)</title><rect x="98.0675%" y="213" width="0.0142%" height="15" fill="rgb(241,136,10)" fg:x="27708" fg:w="4"/><text x="98.3175%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (16 samples, 0.06%)</title><rect x="98.1171%" y="197" width="0.0566%" height="15" fill="rgb(208,32,45)" fg:x="27722" fg:w="16"/><text x="98.3671%" y="207.50"></text></g><g><title>tailcall`opentelemetry::propagation::text_map_propagator::TextMapPropagator::extract (80 samples, 0.28%)</title><rect x="98.0817%" y="213" width="0.2831%" height="15" fill="rgb(207,135,9)" fg:x="27712" fg:w="80"/><text x="98.3317%" y="223.50"></text></g><g><title>tailcall`opentelemetry::context::Context::current (52 samples, 0.18%)</title><rect x="98.1808%" y="197" width="0.1840%" height="15" fill="rgb(206,86,44)" fg:x="27740" fg:w="52"/><text x="98.4308%" y="207.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (23 samples, 0.08%)</title><rect x="98.4356%" y="181" width="0.0814%" height="15" fill="rgb(245,177,15)" fg:x="27812" fg:w="23"/><text x="98.6856%" y="191.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (11 samples, 0.04%)</title><rect x="98.4781%" y="165" width="0.0389%" height="15" fill="rgb(206,64,50)" fg:x="27824" fg:w="11"/><text x="98.7281%" y="175.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::clone_span (26 samples, 0.09%)</title><rect x="98.4321%" y="197" width="0.0920%" height="15" fill="rgb(234,36,40)" fg:x="27811" fg:w="26"/><text x="98.6821%" y="207.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::current_span (23 samples, 0.08%)</title><rect x="98.5241%" y="197" width="0.0814%" height="15" fill="rgb(213,64,8)" fg:x="27837" fg:w="23"/><text x="98.7741%" y="207.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (11 samples, 0.04%)</title><rect x="98.5666%" y="181" width="0.0389%" height="15" fill="rgb(210,75,36)" fg:x="27849" fg:w="11"/><text x="98.8166%" y="191.50"></text></g><g><title>tailcall`tailcall::core::http::telemetry::propagate_context (257 samples, 0.91%)</title><rect x="97.6994%" y="229" width="0.9096%" height="15" fill="rgb(229,88,21)" fg:x="27604" fg:w="257"/><text x="97.9494%" y="239.50"></text></g><g><title>tailcall`tracing::span::Span::current (69 samples, 0.24%)</title><rect x="98.3648%" y="213" width="0.2442%" height="15" fill="rgb(252,204,47)" fg:x="27792" fg:w="69"/><text x="98.6148%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.01%)</title><rect x="98.9594%" y="213" width="0.0106%" height="15" fill="rgb(208,77,27)" fg:x="27960" fg:w="3"/><text x="99.2094%" y="223.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::clone_span (23 samples, 0.08%)</title><rect x="98.9701%" y="213" width="0.0814%" height="15" fill="rgb(221,76,26)" fg:x="27963" fg:w="23"/><text x="99.2201%" y="223.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (23 samples, 0.08%)</title><rect x="98.9701%" y="197" width="0.0814%" height="15" fill="rgb(225,139,18)" fg:x="27963" fg:w="23"/><text x="99.2201%" y="207.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (12 samples, 0.04%)</title><rect x="99.0090%" y="181" width="0.0425%" height="15" fill="rgb(230,137,11)" fg:x="27974" fg:w="12"/><text x="99.2590%" y="191.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::current_span (23 samples, 0.08%)</title><rect x="99.0515%" y="213" width="0.0814%" height="15" fill="rgb(212,28,1)" fg:x="27986" fg:w="23"/><text x="99.3015%" y="223.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (8 samples, 0.03%)</title><rect x="99.1046%" y="197" width="0.0283%" height="15" fill="rgb(248,164,17)" fg:x="28001" fg:w="8"/><text x="99.3546%" y="207.50"></text></g><g><title>tailcall`tailcall::core::http::request_handler::handle_request::_{{closure}}::_{{closure}} (981 samples, 3.47%)</title><rect x="95.6643%" y="245" width="3.4721%" height="15" fill="rgb(222,171,42)" fg:x="27029" fg:w="981"/><text x="95.9143%" y="255.50">tai..</text></g><g><title>tailcall`tracing::span::Span::current (149 samples, 0.53%)</title><rect x="98.6090%" y="229" width="0.5274%" height="15" fill="rgb(243,84,45)" fg:x="27861" fg:w="149"/><text x="98.8590%" y="239.50"></text></g><g><title>tailcall`tailcall::core::http::request_handler::handle_request_inner::_{{closure}} (8 samples, 0.03%)</title><rect x="99.1364%" y="245" width="0.0283%" height="15" fill="rgb(252,49,23)" fg:x="28010" fg:w="8"/><text x="99.3864%" y="255.50"></text></g><g><title>tailcall`tailcall::core::http::telemetry::RequestCounter::new (8 samples, 0.03%)</title><rect x="99.1647%" y="245" width="0.0283%" height="15" fill="rgb(215,19,7)" fg:x="28018" fg:w="8"/><text x="99.4147%" y="255.50"></text></g><g><title>tailcall`tailcall::core::http::telemetry::propagate_context (3 samples, 0.01%)</title><rect x="99.2001%" y="245" width="0.0106%" height="15" fill="rgb(238,81,41)" fg:x="28028" fg:w="3"/><text x="99.4501%" y="255.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (6 samples, 0.02%)</title><rect x="99.2567%" y="229" width="0.0212%" height="15" fill="rgb(210,199,37)" fg:x="28044" fg:w="6"/><text x="99.5067%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (20 samples, 0.07%)</title><rect x="99.2780%" y="229" width="0.0708%" height="15" fill="rgb(244,192,49)" fg:x="28050" fg:w="20"/><text x="99.5280%" y="239.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::enabled (16 samples, 0.06%)</title><rect x="99.3488%" y="229" width="0.0566%" height="15" fill="rgb(226,211,11)" fg:x="28070" fg:w="16"/><text x="99.5988%" y="239.50"></text></g><g><title>tailcall`tracing::__macro_support::__is_enabled (56 samples, 0.20%)</title><rect x="99.2107%" y="245" width="0.1982%" height="15" fill="rgb(236,162,54)" fg:x="28031" fg:w="56"/><text x="99.4607%" y="255.50"></text></g><g><title>tailcall`tracing::span::Span::current (10 samples, 0.04%)</title><rect x="99.4089%" y="245" width="0.0354%" height="15" fill="rgb(220,229,9)" fg:x="28087" fg:w="10"/><text x="99.6589%" y="255.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.01%)</title><rect x="99.4833%" y="229" width="0.0106%" height="15" fill="rgb(250,87,22)" fg:x="28108" fg:w="3"/><text x="99.7333%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (8 samples, 0.03%)</title><rect x="99.5116%" y="213" width="0.0283%" height="15" fill="rgb(239,43,17)" fg:x="28116" fg:w="8"/><text x="99.7616%" y="223.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::current_span (6 samples, 0.02%)</title><rect x="99.5399%" y="213" width="0.0212%" height="15" fill="rgb(231,177,25)" fg:x="28124" fg:w="6"/><text x="99.7899%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (6 samples, 0.02%)</title><rect x="99.6921%" y="197" width="0.0212%" height="15" fill="rgb(219,179,1)" fg:x="28167" fg:w="6"/><text x="99.9421%" y="207.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::new_span (66 samples, 0.23%)</title><rect x="99.4939%" y="229" width="0.2336%" height="15" fill="rgb(238,219,53)" fg:x="28111" fg:w="66"/><text x="99.7439%" y="239.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::new_span (47 samples, 0.17%)</title><rect x="99.5611%" y="213" width="0.1663%" height="15" fill="rgb(232,167,36)" fg:x="28130" fg:w="47"/><text x="99.8111%" y="223.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::current_span (4 samples, 0.01%)</title><rect x="99.7133%" y="197" width="0.0142%" height="15" fill="rgb(244,19,51)" fg:x="28173" fg:w="4"/><text x="99.9633%" y="207.50"></text></g><g><title>tailcall`tracing::span::Span::new (83 samples, 0.29%)</title><rect x="99.4443%" y="245" width="0.2938%" height="15" fill="rgb(224,6,22)" fg:x="28097" fg:w="83"/><text x="99.6943%" y="255.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::new_span (3 samples, 0.01%)</title><rect x="99.7275%" y="229" width="0.0106%" height="15" fill="rgb(224,145,5)" fg:x="28177" fg:w="3"/><text x="99.9775%" y="239.50"></text></g><g><title>tailcall`tailcall::core::http::request_handler::handle_request::_{{closure}} (1,871 samples, 6.62%)</title><rect x="93.1302%" y="261" width="6.6221%" height="15" fill="rgb(234,130,49)" fg:x="26313" fg:w="1871"/><text x="93.3802%" y="271.50">tailcall`..</text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::is_enabled_inner (4 samples, 0.01%)</title><rect x="99.7381%" y="245" width="0.0142%" height="15" fill="rgb(254,6,2)" fg:x="28180" fg:w="4"/><text x="99.9881%" y="255.50"></text></g><g><title>tailcall`tracing::__macro_support::__is_enabled (3 samples, 0.01%)</title><rect x="99.7522%" y="261" width="0.0106%" height="15" fill="rgb(208,96,46)" fg:x="28184" fg:w="3"/><text x="100.0022%" y="271.50"></text></g><g><title>tailcall`&lt;hyper::server::conn::upgrades::UpgradeableConnection&lt;I,S,E&gt; as core::future::future::Future&gt;::poll (26,214 samples, 92.78%)</title><rect x="7.0008%" y="277" width="92.7798%" height="15" fill="rgb(239,3,39)" fg:x="1978" fg:w="26214"/><text x="7.2508%" y="287.50">tailcall`&lt;hyper::server::conn::upgrades::UpgradeableConnection&lt;I,S,E&gt; as core::future::future::Future&gt;::poll</text></g><g><title>tailcall`tracing::span::Span::new (5 samples, 0.02%)</title><rect x="99.7629%" y="261" width="0.0177%" height="15" fill="rgb(233,210,1)" fg:x="28187" fg:w="5"/><text x="100.0129%" y="271.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;hyper::body::body::Body&gt; (4 samples, 0.01%)</title><rect x="99.7806%" y="277" width="0.0142%" height="15" fill="rgb(244,137,37)" fg:x="28192" fg:w="4"/><text x="100.0306%" y="287.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;tailcall::core::http::request_handler::handle_request&lt;tailcall::core::async_graphql_hyper::GraphQLRequest&gt;::{{closure}}&gt; (3 samples, 0.01%)</title><rect x="99.7947%" y="277" width="0.0106%" height="15" fill="rgb(240,136,2)" fg:x="28196" fg:w="3"/><text x="100.0447%" y="287.50"></text></g><g><title>tailcall`core::task::poll::Poll&lt;core::result::Result&lt;T,E&gt;&gt;::map_err (3 samples, 0.01%)</title><rect x="99.8053%" y="277" width="0.0106%" height="15" fill="rgb(239,18,37)" fg:x="28199" fg:w="3"/><text x="100.0553%" y="287.50"></text></g><g><title>tailcall`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::encode_head (4 samples, 0.01%)</title><rect x="99.8160%" y="277" width="0.0142%" height="15" fill="rgb(218,185,22)" fg:x="28202" fg:w="4"/><text x="100.0660%" y="287.50"></text></g><g><title>tailcall`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_flush (4 samples, 0.01%)</title><rect x="99.8301%" y="277" width="0.0142%" height="15" fill="rgb(225,218,4)" fg:x="28206" fg:w="4"/><text x="100.0801%" y="287.50"></text></g><g><title>tailcall`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_head (7 samples, 0.02%)</title><rect x="99.8443%" y="277" width="0.0248%" height="15" fill="rgb(230,182,32)" fg:x="28210" fg:w="7"/><text x="100.0943%" y="287.50"></text></g><g><title>tailcall`hyper::proto::h1::encode::Encoder::danger_full_buf (6 samples, 0.02%)</title><rect x="99.8761%" y="277" width="0.0212%" height="15" fill="rgb(242,56,43)" fg:x="28219" fg:w="6"/><text x="100.1261%" y="287.50"></text></g><g><title>tailcall`&lt;hyper::server::server::new_svc::NewSvcTask&lt;I,N,S,E,W&gt; as core::future::future::Future&gt;::poll (26,274 samples, 92.99%)</title><rect x="6.9406%" y="293" width="92.9921%" height="15" fill="rgb(233,99,24)" fg:x="1961" fg:w="26274"/><text x="7.1906%" y="303.50">tailcall`&lt;hyper::server::server::new_svc::NewSvcTask&lt;I,N,S,E,W&gt; as core::future::future::Future&gt;::poll</text></g><g><title>tailcall`tailcall::core::http::request_handler::handle_request::_{{closure}} (9 samples, 0.03%)</title><rect x="99.9009%" y="277" width="0.0319%" height="15" fill="rgb(234,209,42)" fg:x="28226" fg:w="9"/><text x="100.1509%" y="287.50"></text></g><g><title>tailcall`tailcall::cli::server::http_server::Server::start::_{{closure}} (5 samples, 0.02%)</title><rect x="99.9363%" y="293" width="0.0177%" height="15" fill="rgb(227,7,12)" fg:x="28236" fg:w="5"/><text x="100.1863%" y="303.50"></text></g><g><title>tailcall`tokio::runtime::scheduler::multi_thread::worker::Context::run_task (26,510 samples, 93.83%)</title><rect x="6.1584%" y="325" width="93.8274%" height="15" fill="rgb(245,203,43)" fg:x="1740" fg:w="26510"/><text x="6.4084%" y="335.50">tailcall`tokio::runtime::scheduler::multi_thread::worker::Context::run_task</text></g><g><title>tailcall`tokio::runtime::task::raw::poll (26,324 samples, 93.17%)</title><rect x="6.8167%" y="309" width="93.1691%" height="15" fill="rgb(238,205,33)" fg:x="1926" fg:w="26324"/><text x="7.0667%" y="319.50">tailcall`tokio::runtime::task::raw::poll</text></g><g><title>tailcall`tokio::runtime::task::state::State::transition_to_idle (9 samples, 0.03%)</title><rect x="99.9540%" y="293" width="0.0319%" height="15" fill="rgb(231,56,7)" fg:x="28241" fg:w="9"/><text x="100.2040%" y="303.50"></text></g><g><title>all (28,254 samples, 100%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(244,186,29)" fg:x="0" fg:w="28254"/><text x="0.2500%" y="447.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (28,249 samples, 99.98%)</title><rect x="0.0177%" y="421" width="99.9823%" height="15" fill="rgb(234,111,31)" fg:x="5" fg:w="28249"/><text x="0.2677%" y="431.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (28,249 samples, 99.98%)</title><rect x="0.0177%" y="405" width="99.9823%" height="15" fill="rgb(241,149,10)" fg:x="5" fg:w="28249"/><text x="0.2677%" y="415.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>tailcall`std::sys::pal::unix::thread::Thread::new::thread_start (28,249 samples, 99.98%)</title><rect x="0.0177%" y="389" width="99.9823%" height="15" fill="rgb(249,206,44)" fg:x="5" fg:w="28249"/><text x="0.2677%" y="399.50">tailcall`std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>tailcall`core::ops::function::FnOnce::call_once{{vtable.shim}} (28,249 samples, 99.98%)</title><rect x="0.0177%" y="373" width="99.9823%" height="15" fill="rgb(251,153,30)" fg:x="5" fg:w="28249"/><text x="0.2677%" y="383.50">tailcall`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>tailcall`std::sys_common::backtrace::__rust_begin_short_backtrace (28,249 samples, 99.98%)</title><rect x="0.0177%" y="357" width="99.9823%" height="15" fill="rgb(239,152,38)" fg:x="5" fg:w="28249"/><text x="0.2677%" y="367.50">tailcall`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>tailcall`tokio::runtime::task::raw::poll (28,238 samples, 99.94%)</title><rect x="0.0566%" y="341" width="99.9434%" height="15" fill="rgb(249,139,47)" fg:x="16" fg:w="28238"/><text x="0.3066%" y="351.50">tailcall`tokio::runtime::task::raw::poll</text></g></svg></svg>
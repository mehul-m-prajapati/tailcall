<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="758" onload="init(evt)" viewBox="0 0 1200 758" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="758" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="741.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="741.00"> </text><svg id="frames" x="10" width="1180" total_samples="52426"><g><title>dyld`start (6 samples, 0.01%)</title><rect x="0.0000%" y="693" width="0.0114%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="6"/><text x="0.2500%" y="703.50"></text></g><g><title>tailcall`main (6 samples, 0.01%)</title><rect x="0.0000%" y="677" width="0.0114%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="6"/><text x="0.2500%" y="687.50"></text></g><g><title>tailcall`std::sys_common::backtrace::__rust_begin_short_backtrace (6 samples, 0.01%)</title><rect x="0.0000%" y="661" width="0.0114%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="6"/><text x="0.2500%" y="671.50"></text></g><g><title>tailcall`tailcall::main (6 samples, 0.01%)</title><rect x="0.0000%" y="645" width="0.0114%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="6"/><text x="0.2500%" y="655.50"></text></g><g><title>tailcall`tokio::runtime::scheduler::multi_thread::worker::Context::run_task (11 samples, 0.02%)</title><rect x="0.0172%" y="613" width="0.0210%" height="15" fill="rgb(208,68,35)" fg:x="9" fg:w="11"/><text x="0.2672%" y="623.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (14 samples, 0.03%)</title><rect x="0.2670%" y="597" width="0.0267%" height="15" fill="rgb(232,128,0)" fg:x="140" fg:w="14"/><text x="0.5170%" y="607.50"></text></g><g><title>libsystem_m.dylib`pow (6 samples, 0.01%)</title><rect x="0.2976%" y="597" width="0.0114%" height="15" fill="rgb(207,160,47)" fg:x="156" fg:w="6"/><text x="0.5476%" y="607.50"></text></g><g><title>libsystem_c.dylib`clock_gettime_nsec_np (9 samples, 0.02%)</title><rect x="0.3338%" y="565" width="0.0172%" height="15" fill="rgb(228,23,34)" fg:x="175" fg:w="9"/><text x="0.5838%" y="575.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (46 samples, 0.09%)</title><rect x="0.3510%" y="565" width="0.0877%" height="15" fill="rgb(218,30,26)" fg:x="184" fg:w="46"/><text x="0.6010%" y="575.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (69 samples, 0.13%)</title><rect x="0.3185%" y="581" width="0.1316%" height="15" fill="rgb(220,122,19)" fg:x="167" fg:w="69"/><text x="0.5685%" y="591.50"></text></g><g><title>libsystem_kernel.dylib`mach_timebase_info (6 samples, 0.01%)</title><rect x="0.4387%" y="565" width="0.0114%" height="15" fill="rgb(250,228,42)" fg:x="230" fg:w="6"/><text x="0.6887%" y="575.50"></text></g><g><title>tailcall`std::sys::pal::unix::time::Timespec::now (74 samples, 0.14%)</title><rect x="0.3166%" y="597" width="0.1412%" height="15" fill="rgb(240,193,28)" fg:x="166" fg:w="74"/><text x="0.5666%" y="607.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (19 samples, 0.04%)</title><rect x="0.5245%" y="565" width="0.0362%" height="15" fill="rgb(216,20,37)" fg:x="275" fg:w="19"/><text x="0.7745%" y="575.50"></text></g><g><title>tailcall`parking_lot::condvar::Condvar::notify_one_slow (20 samples, 0.04%)</title><rect x="0.5245%" y="581" width="0.0381%" height="15" fill="rgb(206,188,39)" fg:x="275" fg:w="20"/><text x="0.7745%" y="591.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (251 samples, 0.48%)</title><rect x="0.5761%" y="565" width="0.4788%" height="15" fill="rgb(217,207,13)" fg:x="302" fg:w="251"/><text x="0.8261%" y="575.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (13 samples, 0.02%)</title><rect x="1.0644%" y="549" width="0.0248%" height="15" fill="rgb(231,73,38)" fg:x="558" fg:w="13"/><text x="1.3144%" y="559.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (12 samples, 0.02%)</title><rect x="1.0663%" y="533" width="0.0229%" height="15" fill="rgb(225,20,46)" fg:x="559" fg:w="12"/><text x="1.3163%" y="543.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (20 samples, 0.04%)</title><rect x="1.0548%" y="565" width="0.0381%" height="15" fill="rgb(210,31,41)" fg:x="553" fg:w="20"/><text x="1.3048%" y="575.50"></text></g><g><title>tailcall`parking_lot::condvar::Condvar::wait_until_internal (279 samples, 0.53%)</title><rect x="0.5627%" y="581" width="0.5322%" height="15" fill="rgb(221,200,47)" fg:x="295" fg:w="279"/><text x="0.8127%" y="591.50"></text></g><g><title>libsystem_kernel.dylib`kevent (509 samples, 0.97%)</title><rect x="1.1292%" y="565" width="0.9709%" height="15" fill="rgb(226,26,5)" fg:x="592" fg:w="509"/><text x="1.3792%" y="575.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (10 samples, 0.02%)</title><rect x="2.1096%" y="533" width="0.0191%" height="15" fill="rgb(249,33,26)" fg:x="1106" fg:w="10"/><text x="2.3596%" y="543.50"></text></g><g><title>tailcall`std::sys::pal::unix::time::Timespec::now (16 samples, 0.03%)</title><rect x="2.1001%" y="565" width="0.0305%" height="15" fill="rgb(235,183,28)" fg:x="1101" fg:w="16"/><text x="2.3501%" y="575.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (16 samples, 0.03%)</title><rect x="2.1001%" y="549" width="0.0305%" height="15" fill="rgb(221,5,38)" fg:x="1101" fg:w="16"/><text x="2.3501%" y="559.50"></text></g><g><title>tailcall`tokio::runtime::io::driver::Driver::turn (57 samples, 0.11%)</title><rect x="2.1344%" y="565" width="0.1087%" height="15" fill="rgb(247,18,42)" fg:x="1119" fg:w="57"/><text x="2.3844%" y="575.50"></text></g><g><title>tailcall`tokio::runtime::io::scheduled_io::ScheduledIo::wake (41 samples, 0.08%)</title><rect x="2.1650%" y="549" width="0.0782%" height="15" fill="rgb(241,131,45)" fg:x="1135" fg:w="41"/><text x="2.4150%" y="559.50"></text></g><g><title>tailcall`tokio::runtime::task::waker::wake_by_val (13 samples, 0.02%)</title><rect x="2.2184%" y="533" width="0.0248%" height="15" fill="rgb(249,31,29)" fg:x="1163" fg:w="13"/><text x="2.4684%" y="543.50"></text></g><g><title>tailcall`tokio::runtime::io::scheduled_io::ScheduledIo::wake (8 samples, 0.02%)</title><rect x="2.2432%" y="565" width="0.0153%" height="15" fill="rgb(225,111,53)" fg:x="1176" fg:w="8"/><text x="2.4932%" y="575.50"></text></g><g><title>tailcall`tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time::_{{closure}} (49 samples, 0.09%)</title><rect x="2.2584%" y="565" width="0.0935%" height="15" fill="rgb(238,160,17)" fg:x="1184" fg:w="49"/><text x="2.5084%" y="575.50"></text></g><g><title>tailcall`tokio::runtime::time::wheel::Wheel::next_expiration (13 samples, 0.02%)</title><rect x="2.3271%" y="549" width="0.0248%" height="15" fill="rgb(214,148,48)" fg:x="1220" fg:w="13"/><text x="2.5771%" y="559.50"></text></g><g><title>tailcall`tokio::runtime::time::Driver::park_internal (678 samples, 1.29%)</title><rect x="1.1025%" y="581" width="1.2933%" height="15" fill="rgb(232,36,49)" fg:x="578" fg:w="678"/><text x="1.3525%" y="591.50"></text></g><g><title>tailcall`tokio::runtime::time::wheel::Wheel::next_expiration (23 samples, 0.04%)</title><rect x="2.3519%" y="565" width="0.0439%" height="15" fill="rgb(209,103,24)" fg:x="1233" fg:w="23"/><text x="2.6019%" y="575.50"></text></g><g><title>tailcall`tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (1,017 samples, 1.94%)</title><rect x="0.4635%" y="597" width="1.9399%" height="15" fill="rgb(229,88,8)" fg:x="243" fg:w="1017"/><text x="0.7135%" y="607.50">t..</text></g><g><title>libdyld.dylib`tlv_get_addr (10 samples, 0.02%)</title><rect x="2.4568%" y="581" width="0.0191%" height="15" fill="rgb(213,181,19)" fg:x="1288" fg:w="10"/><text x="2.7068%" y="591.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (10 samples, 0.02%)</title><rect x="2.4835%" y="581" width="0.0191%" height="15" fill="rgb(254,191,54)" fg:x="1302" fg:w="10"/><text x="2.7335%" y="591.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (10 samples, 0.02%)</title><rect x="2.4835%" y="565" width="0.0191%" height="15" fill="rgb(241,83,37)" fg:x="1302" fg:w="10"/><text x="2.7335%" y="575.50"></text></g><g><title>tailcall`&lt;hyper::server::server::new_svc::NewSvcTask&lt;I,N,S,E,W&gt; as core::future::future::Future&gt;::poll (7 samples, 0.01%)</title><rect x="2.5064%" y="581" width="0.0134%" height="15" fill="rgb(233,36,39)" fg:x="1314" fg:w="7"/><text x="2.7564%" y="591.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (104 samples, 0.20%)</title><rect x="2.5369%" y="565" width="0.1984%" height="15" fill="rgb(226,3,54)" fg:x="1330" fg:w="104"/><text x="2.7869%" y="575.50"></text></g><g><title>tailcall`parking_lot::condvar::Condvar::notify_one_slow (118 samples, 0.23%)</title><rect x="2.5216%" y="581" width="0.2251%" height="15" fill="rgb(245,192,40)" fg:x="1322" fg:w="118"/><text x="2.7716%" y="591.50"></text></g><g><title>tailcall`&lt;hyper::proto::h1::role::Client as hyper::proto::h1::Http1Transaction&gt;::parse (12 samples, 0.02%)</title><rect x="2.8841%" y="533" width="0.0229%" height="15" fill="rgb(238,167,29)" fg:x="1512" fg:w="12"/><text x="3.1341%" y="543.50"></text></g><g><title>tailcall`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::encode_head (9 samples, 0.02%)</title><rect x="2.9260%" y="533" width="0.0172%" height="15" fill="rgb(232,182,51)" fg:x="1534" fg:w="9"/><text x="3.1760%" y="543.50"></text></g><g><title>tailcall`&lt;hyper::proto::h1::role::Client as hyper::proto::h1::Http1Transaction&gt;::encode (7 samples, 0.01%)</title><rect x="2.9298%" y="517" width="0.0134%" height="15" fill="rgb(231,60,39)" fg:x="1536" fg:w="7"/><text x="3.1798%" y="527.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (41 samples, 0.08%)</title><rect x="2.9508%" y="517" width="0.0782%" height="15" fill="rgb(208,69,12)" fg:x="1547" fg:w="41"/><text x="3.2008%" y="527.50"></text></g><g><title>tailcall`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_flush (45 samples, 0.09%)</title><rect x="2.9470%" y="533" width="0.0858%" height="15" fill="rgb(235,93,37)" fg:x="1545" fg:w="45"/><text x="3.1970%" y="543.50"></text></g><g><title>tailcall`_mi_free_delayed_block (29 samples, 0.06%)</title><rect x="3.0328%" y="437" width="0.0553%" height="15" fill="rgb(213,116,39)" fg:x="1590" fg:w="29"/><text x="3.2828%" y="447.50"></text></g><g><title>tailcall`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::maybe_notify (35 samples, 0.07%)</title><rect x="3.0328%" y="517" width="0.0668%" height="15" fill="rgb(222,207,29)" fg:x="1590" fg:w="35"/><text x="3.2828%" y="527.50"></text></g><g><title>tailcall`hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (35 samples, 0.07%)</title><rect x="3.0328%" y="501" width="0.0668%" height="15" fill="rgb(206,96,30)" fg:x="1590" fg:w="35"/><text x="3.2828%" y="511.50"></text></g><g><title>tailcall`bytes::bytes_mut::BytesMut::reserve_inner (35 samples, 0.07%)</title><rect x="3.0328%" y="485" width="0.0668%" height="15" fill="rgb(218,138,4)" fg:x="1590" fg:w="35"/><text x="3.2828%" y="495.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (35 samples, 0.07%)</title><rect x="3.0328%" y="469" width="0.0668%" height="15" fill="rgb(250,191,14)" fg:x="1590" fg:w="35"/><text x="3.2828%" y="479.50"></text></g><g><title>tailcall`_mi_malloc_generic (35 samples, 0.07%)</title><rect x="3.0328%" y="453" width="0.0668%" height="15" fill="rgb(239,60,40)" fg:x="1590" fg:w="35"/><text x="3.2828%" y="463.50"></text></g><g><title>tailcall`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (36 samples, 0.07%)</title><rect x="3.0328%" y="533" width="0.0687%" height="15" fill="rgb(206,27,48)" fg:x="1590" fg:w="36"/><text x="3.2828%" y="543.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (132 samples, 0.25%)</title><rect x="3.1053%" y="517" width="0.2518%" height="15" fill="rgb(225,35,8)" fg:x="1628" fg:w="132"/><text x="3.3553%" y="527.50"></text></g><g><title>tailcall`hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (134 samples, 0.26%)</title><rect x="3.1034%" y="533" width="0.2556%" height="15" fill="rgb(250,213,24)" fg:x="1627" fg:w="134"/><text x="3.3534%" y="543.50"></text></g><g><title>tailcall`&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (280 samples, 0.53%)</title><rect x="2.8307%" y="565" width="0.5341%" height="15" fill="rgb(247,123,22)" fg:x="1484" fg:w="280"/><text x="3.0807%" y="575.50"></text></g><g><title>tailcall`hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop (275 samples, 0.52%)</title><rect x="2.8402%" y="549" width="0.5245%" height="15" fill="rgb(231,138,38)" fg:x="1489" fg:w="275"/><text x="3.0902%" y="559.50"></text></g><g><title>tailcall`&lt;hyper::server::conn::upgrades::UpgradeableConnection&lt;I,S,E&gt; as core::future::future::Future&gt;::poll (9 samples, 0.02%)</title><rect x="3.3647%" y="565" width="0.0172%" height="15" fill="rgb(231,145,46)" fg:x="1764" fg:w="9"/><text x="3.6147%" y="575.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (6 samples, 0.01%)</title><rect x="3.3972%" y="549" width="0.0114%" height="15" fill="rgb(251,118,11)" fg:x="1781" fg:w="6"/><text x="3.6472%" y="559.50"></text></g><g><title>tailcall`&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.01%)</title><rect x="3.4086%" y="549" width="0.0134%" height="15" fill="rgb(217,147,25)" fg:x="1787" fg:w="7"/><text x="3.6586%" y="559.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (371 samples, 0.71%)</title><rect x="3.7806%" y="533" width="0.7077%" height="15" fill="rgb(247,81,37)" fg:x="1982" fg:w="371"/><text x="4.0306%" y="543.50"></text></g><g><title>tailcall`&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (36 samples, 0.07%)</title><rect x="4.4882%" y="533" width="0.0687%" height="15" fill="rgb(209,12,38)" fg:x="2353" fg:w="36"/><text x="4.7382%" y="543.50"></text></g><g><title>tailcall`&lt;hyper::proto::h1::dispatch::Server&lt;S,hyper::body::body::Body&gt; as hyper::proto::h1::dispatch::Dispatch&gt;::recv_msg (122 samples, 0.23%)</title><rect x="4.5569%" y="533" width="0.2327%" height="15" fill="rgb(227,1,9)" fg:x="2389" fg:w="122"/><text x="4.8069%" y="543.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;http::header::map::HeaderMap&gt; (59 samples, 0.11%)</title><rect x="4.6771%" y="517" width="0.1125%" height="15" fill="rgb(248,47,43)" fg:x="2452" fg:w="59"/><text x="4.9271%" y="527.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;tailcall::core::http::request_handler::handle_request&lt;tailcall::core::async_graphql_hyper::GraphQLRequest&gt;::{{closure}}&gt; (7 samples, 0.01%)</title><rect x="4.8392%" y="533" width="0.0134%" height="15" fill="rgb(221,10,30)" fg:x="2537" fg:w="7"/><text x="5.0892%" y="543.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_init (7 samples, 0.01%)</title><rect x="4.8735%" y="517" width="0.0134%" height="15" fill="rgb(210,229,1)" fg:x="2555" fg:w="7"/><text x="5.1235%" y="527.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (6 samples, 0.01%)</title><rect x="4.8869%" y="517" width="0.0114%" height="15" fill="rgb(222,148,37)" fg:x="2562" fg:w="6"/><text x="5.1369%" y="527.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutexattr_init (28 samples, 0.05%)</title><rect x="4.9002%" y="517" width="0.0534%" height="15" fill="rgb(234,67,33)" fg:x="2569" fg:w="28"/><text x="5.1502%" y="527.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (19 samples, 0.04%)</title><rect x="4.9536%" y="501" width="0.0362%" height="15" fill="rgb(247,98,35)" fg:x="2597" fg:w="19"/><text x="5.2036%" y="511.50"></text></g><g><title>tailcall`_mi_malloc_generic (19 samples, 0.04%)</title><rect x="4.9536%" y="485" width="0.0362%" height="15" fill="rgb(247,138,52)" fg:x="2597" fg:w="19"/><text x="5.2036%" y="495.50"></text></g><g><title>tailcall`_mi_free_delayed_block (19 samples, 0.04%)</title><rect x="4.9536%" y="469" width="0.0362%" height="15" fill="rgb(213,79,30)" fg:x="2597" fg:w="19"/><text x="5.2036%" y="479.50"></text></g><g><title>tailcall`&lt;std::sys::sync::mutex::pthread::AllocatedMutex as std::sys_common::lazy_box::LazyInit&gt;::init (23 samples, 0.04%)</title><rect x="4.9536%" y="517" width="0.0439%" height="15" fill="rgb(246,177,23)" fg:x="2597" fg:w="23"/><text x="5.2036%" y="527.50"></text></g><g><title>tailcall`futures_channel::mpsc::Sender&lt;T&gt;::try_send (79 samples, 0.15%)</title><rect x="4.8621%" y="533" width="0.1507%" height="15" fill="rgb(230,62,27)" fg:x="2549" fg:w="79"/><text x="5.1121%" y="543.50"></text></g><g><title>tailcall`mi_malloc_aligned (6 samples, 0.01%)</title><rect x="5.0013%" y="517" width="0.0114%" height="15" fill="rgb(216,154,8)" fg:x="2622" fg:w="6"/><text x="5.2513%" y="527.50"></text></g><g><title>tailcall`_mi_free_delayed_block (42 samples, 0.08%)</title><rect x="5.0357%" y="485" width="0.0801%" height="15" fill="rgb(244,35,45)" fg:x="2640" fg:w="42"/><text x="5.2857%" y="495.50"></text></g><g><title>tailcall`_mi_malloc_generic (46 samples, 0.09%)</title><rect x="5.0319%" y="501" width="0.0877%" height="15" fill="rgb(251,115,12)" fg:x="2638" fg:w="46"/><text x="5.2819%" y="511.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (48 samples, 0.09%)</title><rect x="5.0319%" y="517" width="0.0916%" height="15" fill="rgb(240,54,50)" fg:x="2638" fg:w="48"/><text x="5.2819%" y="527.50"></text></g><g><title>tailcall`hyper::body::body::Body::new_channel (76 samples, 0.14%)</title><rect x="5.0128%" y="533" width="0.1450%" height="15" fill="rgb(233,84,52)" fg:x="2628" fg:w="76"/><text x="5.2628%" y="543.50"></text></g><g><title>tailcall`mi_malloc_aligned (18 samples, 0.03%)</title><rect x="5.1234%" y="517" width="0.0343%" height="15" fill="rgb(207,117,47)" fg:x="2686" fg:w="18"/><text x="5.3734%" y="527.50"></text></g><g><title>tailcall`hyper::body::body::Sender::poll_ready (13 samples, 0.02%)</title><rect x="5.1577%" y="533" width="0.0248%" height="15" fill="rgb(249,43,39)" fg:x="2704" fg:w="13"/><text x="5.4077%" y="543.50"></text></g><g><title>libsystem_c.dylib`gettimeofday (154 samples, 0.29%)</title><rect x="5.2188%" y="485" width="0.2937%" height="15" fill="rgb(209,38,44)" fg:x="2736" fg:w="154"/><text x="5.4688%" y="495.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (146 samples, 0.28%)</title><rect x="5.2340%" y="469" width="0.2785%" height="15" fill="rgb(236,212,23)" fg:x="2744" fg:w="146"/><text x="5.4840%" y="479.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (170 samples, 0.32%)</title><rect x="5.1940%" y="501" width="0.3243%" height="15" fill="rgb(242,79,21)" fg:x="2723" fg:w="170"/><text x="5.4440%" y="511.50"></text></g><g><title>tailcall`hyper::common::date::CachedDate::check (178 samples, 0.34%)</title><rect x="5.1825%" y="533" width="0.3395%" height="15" fill="rgb(211,96,35)" fg:x="2717" fg:w="178"/><text x="5.4325%" y="543.50"></text></g><g><title>tailcall`std::sys::pal::unix::time::Timespec::now (172 samples, 0.33%)</title><rect x="5.1940%" y="517" width="0.3281%" height="15" fill="rgb(253,215,40)" fg:x="2723" fg:w="172"/><text x="5.4440%" y="527.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (18 samples, 0.03%)</title><rect x="5.5431%" y="517" width="0.0343%" height="15" fill="rgb(211,81,21)" fg:x="2906" fg:w="18"/><text x="5.7931%" y="527.50"></text></g><g><title>tailcall`http::header::name::HeaderName::as_str (14 samples, 0.03%)</title><rect x="5.5946%" y="517" width="0.0267%" height="15" fill="rgb(208,190,38)" fg:x="2933" fg:w="14"/><text x="5.8446%" y="527.50"></text></g><g><title>tailcall`hyper::proto::h1::role::encode_headers (69 samples, 0.13%)</title><rect x="5.6213%" y="517" width="0.1316%" height="15" fill="rgb(235,213,38)" fg:x="2947" fg:w="69"/><text x="5.8713%" y="527.50"></text></g><g><title>tailcall`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::encode_head (127 samples, 0.24%)</title><rect x="5.5221%" y="533" width="0.2422%" height="15" fill="rgb(237,122,38)" fg:x="2895" fg:w="127"/><text x="5.7721%" y="543.50"></text></g><g><title>tailcall`mi_free (6 samples, 0.01%)</title><rect x="5.7529%" y="517" width="0.0114%" height="15" fill="rgb(244,218,35)" fg:x="3016" fg:w="6"/><text x="6.0029%" y="527.50"></text></g><g><title>tailcall`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::maybe_notify (6 samples, 0.01%)</title><rect x="5.7719%" y="533" width="0.0114%" height="15" fill="rgb(240,68,47)" fg:x="3026" fg:w="6"/><text x="6.0219%" y="543.50"></text></g><g><title>libsystem_kernel.dylib`writev (6,862 samples, 13.09%)</title><rect x="5.9264%" y="517" width="13.0889%" height="15" fill="rgb(210,16,53)" fg:x="3107" fg:w="6862"/><text x="6.1764%" y="527.50">libsystem_kernel.dyl..</text></g><g><title>tailcall`&lt;hyper::common::buf::BufList&lt;T&gt; as bytes::buf::buf_impl::Buf&gt;::chunks_vectored (8 samples, 0.02%)</title><rect x="19.0154%" y="517" width="0.0153%" height="15" fill="rgb(235,124,12)" fg:x="9969" fg:w="8"/><text x="19.2654%" y="527.50"></text></g><g><title>tailcall`&lt;hyper::proto::h1::encode::EncodedBuf&lt;B&gt; as bytes::buf::buf_impl::Buf&gt;::advance (6 samples, 0.01%)</title><rect x="19.0306%" y="517" width="0.0114%" height="15" fill="rgb(224,169,11)" fg:x="9977" fg:w="6"/><text x="19.2806%" y="527.50"></text></g><g><title>tailcall`&lt;hyper::proto::h1::io::WriteBuf&lt;B&gt; as bytes::buf::buf_impl::Buf&gt;::advance (13 samples, 0.02%)</title><rect x="19.0421%" y="517" width="0.0248%" height="15" fill="rgb(250,166,2)" fg:x="9983" fg:w="13"/><text x="19.2921%" y="527.50"></text></g><g><title>tailcall`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (18 samples, 0.03%)</title><rect x="19.0669%" y="517" width="0.0343%" height="15" fill="rgb(242,216,29)" fg:x="9996" fg:w="18"/><text x="19.3169%" y="527.50"></text></g><g><title>tailcall`tokio::runtime::io::registration::Registration::poll_ready (7 samples, 0.01%)</title><rect x="19.0879%" y="501" width="0.0134%" height="15" fill="rgb(230,116,27)" fg:x="10007" fg:w="7"/><text x="19.3379%" y="511.50"></text></g><g><title>tailcall`_mi_page_retire (8 samples, 0.02%)</title><rect x="19.1012%" y="517" width="0.0153%" height="15" fill="rgb(228,99,48)" fg:x="10014" fg:w="8"/><text x="19.3512%" y="527.50"></text></g><g><title>tailcall`hyper::proto::h1::conn::State::try_keep_alive (6 samples, 0.01%)</title><rect x="19.1241%" y="517" width="0.0114%" height="15" fill="rgb(253,11,6)" fg:x="10026" fg:w="6"/><text x="19.3741%" y="527.50"></text></g><g><title>tailcall`mi_free (11 samples, 0.02%)</title><rect x="19.1355%" y="517" width="0.0210%" height="15" fill="rgb(247,143,39)" fg:x="10032" fg:w="11"/><text x="19.3855%" y="527.50"></text></g><g><title>tailcall`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_flush (7,023 samples, 13.40%)</title><rect x="5.7834%" y="533" width="13.3960%" height="15" fill="rgb(236,97,10)" fg:x="3032" fg:w="7023"/><text x="6.0334%" y="543.50">tailcall`hyper::prot..</text></g><g><title>tailcall`tokio::runtime::io::registration::Registration::poll_ready (12 samples, 0.02%)</title><rect x="19.1565%" y="517" width="0.0229%" height="15" fill="rgb(233,208,19)" fg:x="10043" fg:w="12"/><text x="19.4065%" y="527.50"></text></g><g><title>tailcall`&lt;hyper::proto::h1::io::Buffered&lt;T,B&gt; as hyper::proto::h1::io::MemRead&gt;::read_mem (8 samples, 0.02%)</title><rect x="19.3110%" y="501" width="0.0153%" height="15" fill="rgb(216,164,2)" fg:x="10124" fg:w="8"/><text x="19.5610%" y="511.50"></text></g><g><title>tailcall`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (78 samples, 0.15%)</title><rect x="19.1794%" y="533" width="0.1488%" height="15" fill="rgb(220,129,5)" fg:x="10055" fg:w="78"/><text x="19.4294%" y="543.50"></text></g><g><title>tailcall`hyper::proto::h1::decode::Decoder::decode (28 samples, 0.05%)</title><rect x="19.2748%" y="517" width="0.0534%" height="15" fill="rgb(242,17,10)" fg:x="10105" fg:w="28"/><text x="19.5248%" y="527.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.01%)</title><rect x="19.4312%" y="517" width="0.0134%" height="15" fill="rgb(242,107,0)" fg:x="10187" fg:w="7"/><text x="19.6812%" y="527.50"></text></g><g><title>tailcall`http::header::map::HeaderMap&lt;T&gt;::try_append2 (10 samples, 0.02%)</title><rect x="19.4636%" y="517" width="0.0191%" height="15" fill="rgb(251,28,31)" fg:x="10204" fg:w="10"/><text x="19.7136%" y="527.50"></text></g><g><title>tailcall`http::header::name::HeaderName::from_bytes (14 samples, 0.03%)</title><rect x="19.4865%" y="517" width="0.0267%" height="15" fill="rgb(233,223,10)" fg:x="10216" fg:w="14"/><text x="19.7365%" y="527.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (2,850 samples, 5.44%)</title><rect x="19.5914%" y="501" width="5.4362%" height="15" fill="rgb(215,21,27)" fg:x="10271" fg:w="2850"/><text x="19.8414%" y="511.50">libsyst..</text></g><g><title>tailcall`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (13 samples, 0.02%)</title><rect x="25.0277%" y="501" width="0.0248%" height="15" fill="rgb(232,23,21)" fg:x="13121" fg:w="13"/><text x="25.2777%" y="511.50"></text></g><g><title>tailcall`hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (2,895 samples, 5.52%)</title><rect x="19.5342%" y="517" width="5.5221%" height="15" fill="rgb(244,5,23)" fg:x="10241" fg:w="2895"/><text x="19.7842%" y="527.50">tailcal..</text></g><g><title>tailcall`bytes::bytes::Bytes::slice (14 samples, 0.03%)</title><rect x="25.2527%" y="501" width="0.0267%" height="15" fill="rgb(226,81,46)" fg:x="13239" fg:w="14"/><text x="25.5027%" y="511.50"></text></g><g><title>tailcall`http::header::map::HeaderMap&lt;T&gt;::try_append2 (51 samples, 0.10%)</title><rect x="25.3119%" y="501" width="0.0973%" height="15" fill="rgb(247,70,30)" fg:x="13270" fg:w="51"/><text x="25.5619%" y="511.50"></text></g><g><title>tailcall`http::header::map::hash_elem_using (12 samples, 0.02%)</title><rect x="25.3863%" y="485" width="0.0229%" height="15" fill="rgb(212,68,19)" fg:x="13309" fg:w="12"/><text x="25.6363%" y="495.50"></text></g><g><title>tailcall`http::header::map::HeaderMap&lt;T&gt;::try_reserve_one (6 samples, 0.01%)</title><rect x="25.4130%" y="501" width="0.0114%" height="15" fill="rgb(240,187,13)" fg:x="13323" fg:w="6"/><text x="25.6630%" y="511.50"></text></g><g><title>tailcall`http::header::map::hash_elem_using (8 samples, 0.02%)</title><rect x="25.4244%" y="501" width="0.0153%" height="15" fill="rgb(223,113,26)" fg:x="13329" fg:w="8"/><text x="25.6744%" y="511.50"></text></g><g><title>tailcall`http::header::name::HeaderName::from_bytes (39 samples, 0.07%)</title><rect x="25.4397%" y="501" width="0.0744%" height="15" fill="rgb(206,192,2)" fg:x="13337" fg:w="39"/><text x="25.6897%" y="511.50"></text></g><g><title>tailcall`http::header::name::StandardHeader::from_bytes (46 samples, 0.09%)</title><rect x="25.5141%" y="501" width="0.0877%" height="15" fill="rgb(241,108,4)" fg:x="13376" fg:w="46"/><text x="25.7641%" y="511.50"></text></g><g><title>tailcall`http::uri::Uri::from_shared (28 samples, 0.05%)</title><rect x="25.6018%" y="501" width="0.0534%" height="15" fill="rgb(247,173,49)" fg:x="13422" fg:w="28"/><text x="25.8518%" y="511.50"></text></g><g><title>tailcall`http::uri::path::PathAndQuery::from_shared (26 samples, 0.05%)</title><rect x="25.6056%" y="485" width="0.0496%" height="15" fill="rgb(224,114,35)" fg:x="13424" fg:w="26"/><text x="25.8556%" y="495.50"></text></g><g><title>tailcall`httparse::parse_headers_iter_uninit (95 samples, 0.18%)</title><rect x="25.6628%" y="501" width="0.1812%" height="15" fill="rgb(245,159,27)" fg:x="13454" fg:w="95"/><text x="25.9128%" y="511.50"></text></g><g><title>tailcall`hyper::headers::connection_close (18 samples, 0.03%)</title><rect x="25.8479%" y="501" width="0.0343%" height="15" fill="rgb(245,172,44)" fg:x="13551" fg:w="18"/><text x="26.0979%" y="511.50"></text></g><g><title>tailcall`core::str::iter::SplitInternal&lt;P&gt;::next (18 samples, 0.03%)</title><rect x="25.8479%" y="485" width="0.0343%" height="15" fill="rgb(236,23,11)" fg:x="13551" fg:w="18"/><text x="26.0979%" y="495.50"></text></g><g><title>tailcall`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_head (3,440 samples, 6.56%)</title><rect x="19.3282%" y="533" width="6.5616%" height="15" fill="rgb(205,117,38)" fg:x="10133" fg:w="3440"/><text x="19.5782%" y="543.50">tailcall`..</text></g><g><title>tailcall`hyper::proto::h1::role::parse_headers (437 samples, 0.83%)</title><rect x="25.0563%" y="517" width="0.8336%" height="15" fill="rgb(237,72,25)" fg:x="13136" fg:w="437"/><text x="25.3063%" y="527.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (13 samples, 0.02%)</title><rect x="25.9242%" y="469" width="0.0248%" height="15" fill="rgb(244,70,9)" fg:x="13591" fg:w="13"/><text x="26.1742%" y="479.50"></text></g><g><title>tailcall`tokio::runtime::io::registration::Registration::poll_ready (25 samples, 0.05%)</title><rect x="25.9490%" y="469" width="0.0477%" height="15" fill="rgb(217,125,39)" fg:x="13604" fg:w="25"/><text x="26.1990%" y="479.50"></text></g><g><title>tailcall`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (45 samples, 0.09%)</title><rect x="25.9165%" y="485" width="0.0858%" height="15" fill="rgb(235,36,10)" fg:x="13587" fg:w="45"/><text x="26.1665%" y="495.50"></text></g><g><title>tailcall`_mi_page_free (54 samples, 0.10%)</title><rect x="26.8703%" y="421" width="0.1030%" height="15" fill="rgb(251,123,47)" fg:x="14087" fg:w="54"/><text x="27.1203%" y="431.50"></text></g><g><title>tailcall`mi_segment_page_clear (54 samples, 0.10%)</title><rect x="26.8703%" y="405" width="0.1030%" height="15" fill="rgb(221,13,13)" fg:x="14087" fg:w="54"/><text x="27.1203%" y="415.50"></text></g><g><title>tailcall`mi_segment_span_free_coalesce (52 samples, 0.10%)</title><rect x="26.8741%" y="389" width="0.0992%" height="15" fill="rgb(238,131,9)" fg:x="14089" fg:w="52"/><text x="27.1241%" y="399.50"></text></g><g><title>tailcall`mi_segment_span_free (49 samples, 0.09%)</title><rect x="26.8798%" y="373" width="0.0935%" height="15" fill="rgb(211,50,8)" fg:x="14092" fg:w="49"/><text x="27.1298%" y="383.50"></text></g><g><title>tailcall`mi_segment_try_purge (43 samples, 0.08%)</title><rect x="26.8912%" y="357" width="0.0820%" height="15" fill="rgb(245,182,24)" fg:x="14098" fg:w="43"/><text x="27.1412%" y="367.50"></text></g><g><title>tailcall`mi_segment_purge (43 samples, 0.08%)</title><rect x="26.8912%" y="341" width="0.0820%" height="15" fill="rgb(242,14,37)" fg:x="14098" fg:w="43"/><text x="27.1412%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`madvise (43 samples, 0.08%)</title><rect x="26.8912%" y="325" width="0.0820%" height="15" fill="rgb(246,228,12)" fg:x="14098" fg:w="43"/><text x="27.1412%" y="335.50"></text></g><g><title>tailcall`_mi_free_delayed_block (490 samples, 0.93%)</title><rect x="26.0539%" y="437" width="0.9347%" height="15" fill="rgb(213,55,15)" fg:x="13659" fg:w="490"/><text x="26.3039%" y="447.50"></text></g><g><title>tailcall`mi_page_fresh_alloc (9 samples, 0.02%)</title><rect x="27.0744%" y="421" width="0.0172%" height="15" fill="rgb(209,9,3)" fg:x="14194" fg:w="9"/><text x="27.3244%" y="431.50"></text></g><g><title>tailcall`mi_segments_page_alloc (9 samples, 0.02%)</title><rect x="27.0744%" y="405" width="0.0172%" height="15" fill="rgb(230,59,30)" fg:x="14194" fg:w="9"/><text x="27.3244%" y="415.50"></text></g><g><title>tailcall`mi_find_page (49 samples, 0.09%)</title><rect x="27.0019%" y="437" width="0.0935%" height="15" fill="rgb(209,121,21)" fg:x="14156" fg:w="49"/><text x="27.2519%" y="447.50"></text></g><g><title>tailcall`bytes::bytes_mut::BytesMut::reserve_inner (584 samples, 1.11%)</title><rect x="26.0043%" y="485" width="1.1140%" height="15" fill="rgb(220,109,13)" fg:x="13633" fg:w="584"/><text x="26.2543%" y="495.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (571 samples, 1.09%)</title><rect x="26.0291%" y="469" width="1.0892%" height="15" fill="rgb(232,18,1)" fg:x="13646" fg:w="571"/><text x="26.2791%" y="479.50"></text></g><g><title>tailcall`_mi_malloc_generic (568 samples, 1.08%)</title><rect x="26.0348%" y="453" width="1.0834%" height="15" fill="rgb(215,41,42)" fg:x="13649" fg:w="568"/><text x="26.2848%" y="463.50"></text></g><g><title>tailcall`mi_page_queue_enqueue_from (7 samples, 0.01%)</title><rect x="27.1049%" y="437" width="0.0134%" height="15" fill="rgb(224,123,36)" fg:x="14210" fg:w="7"/><text x="27.3549%" y="447.50"></text></g><g><title>tailcall`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::force_io_read (646 samples, 1.23%)</title><rect x="25.9051%" y="517" width="1.2322%" height="15" fill="rgb(240,125,3)" fg:x="13581" fg:w="646"/><text x="26.1551%" y="527.50"></text></g><g><title>tailcall`hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (643 samples, 1.23%)</title><rect x="25.9108%" y="501" width="1.2265%" height="15" fill="rgb(205,98,50)" fg:x="13584" fg:w="643"/><text x="26.1608%" y="511.50"></text></g><g><title>tailcall`tokio::runtime::io::registration::Registration::poll_ready (6 samples, 0.01%)</title><rect x="27.1259%" y="485" width="0.0114%" height="15" fill="rgb(205,185,37)" fg:x="14221" fg:w="6"/><text x="27.3759%" y="495.50"></text></g><g><title>tailcall`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_keep_alive (658 samples, 1.26%)</title><rect x="25.8898%" y="533" width="1.2551%" height="15" fill="rgb(238,207,15)" fg:x="13573" fg:w="658"/><text x="26.1398%" y="543.50"></text></g><g><title>tailcall`hyper::proto::h1::encode::Encoder::danger_full_buf (15 samples, 0.03%)</title><rect x="27.1526%" y="533" width="0.0286%" height="15" fill="rgb(213,199,42)" fg:x="14235" fg:w="15"/><text x="27.4026%" y="543.50"></text></g><g><title>tailcall`hyper::proto::h1::io::WriteBuf&lt;B&gt;::buffer (8 samples, 0.02%)</title><rect x="27.1659%" y="517" width="0.0153%" height="15" fill="rgb(235,201,11)" fg:x="14242" fg:w="8"/><text x="27.4159%" y="527.50"></text></g><g><title>tailcall`tailcall::core::http::request_handler::handle_request::_{{closure}} (34 samples, 0.06%)</title><rect x="27.2117%" y="533" width="0.0649%" height="15" fill="rgb(207,46,11)" fg:x="14266" fg:w="34"/><text x="27.4617%" y="543.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (8 samples, 0.02%)</title><rect x="27.2861%" y="517" width="0.0153%" height="15" fill="rgb(241,35,35)" fg:x="14305" fg:w="8"/><text x="27.5361%" y="527.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (18 samples, 0.03%)</title><rect x="27.3013%" y="517" width="0.0343%" height="15" fill="rgb(243,32,47)" fg:x="14313" fg:w="18"/><text x="27.5513%" y="527.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (45 samples, 0.09%)</title><rect x="27.3528%" y="501" width="0.0858%" height="15" fill="rgb(247,202,23)" fg:x="14340" fg:w="45"/><text x="27.6028%" y="511.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (32 samples, 0.06%)</title><rect x="27.3776%" y="485" width="0.0610%" height="15" fill="rgb(219,102,11)" fg:x="14353" fg:w="32"/><text x="27.6276%" y="495.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::enter (14 samples, 0.03%)</title><rect x="27.4387%" y="501" width="0.0267%" height="15" fill="rgb(243,110,44)" fg:x="14385" fg:w="14"/><text x="27.6887%" y="511.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::span (138 samples, 0.26%)</title><rect x="27.5340%" y="485" width="0.2632%" height="15" fill="rgb(222,74,54)" fg:x="14435" fg:w="138"/><text x="27.7840%" y="495.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (95 samples, 0.18%)</title><rect x="27.6161%" y="469" width="0.1812%" height="15" fill="rgb(216,99,12)" fg:x="14478" fg:w="95"/><text x="27.8661%" y="479.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::is_enabled_inner (178 samples, 0.34%)</title><rect x="27.4654%" y="501" width="0.3395%" height="15" fill="rgb(226,22,26)" fg:x="14399" fg:w="178"/><text x="27.7154%" y="511.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::span (11 samples, 0.02%)</title><rect x="27.8049%" y="501" width="0.0210%" height="15" fill="rgb(217,163,10)" fg:x="14577" fg:w="11"/><text x="28.0549%" y="511.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::enter (257 samples, 0.49%)</title><rect x="27.3395%" y="517" width="0.4902%" height="15" fill="rgb(213,25,53)" fg:x="14333" fg:w="257"/><text x="27.5895%" y="527.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (9 samples, 0.02%)</title><rect x="27.8373%" y="501" width="0.0172%" height="15" fill="rgb(252,105,26)" fg:x="14594" fg:w="9"/><text x="28.0873%" y="511.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (9 samples, 0.02%)</title><rect x="27.8545%" y="501" width="0.0172%" height="15" fill="rgb(220,39,43)" fg:x="14603" fg:w="9"/><text x="28.1045%" y="511.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (20 samples, 0.04%)</title><rect x="27.9346%" y="469" width="0.0381%" height="15" fill="rgb(229,68,48)" fg:x="14645" fg:w="20"/><text x="28.1846%" y="479.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (8 samples, 0.02%)</title><rect x="27.9575%" y="453" width="0.0153%" height="15" fill="rgb(252,8,32)" fg:x="14657" fg:w="8"/><text x="28.2075%" y="463.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (38 samples, 0.07%)</title><rect x="27.9060%" y="485" width="0.0725%" height="15" fill="rgb(223,20,43)" fg:x="14630" fg:w="38"/><text x="28.1560%" y="495.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (58 samples, 0.11%)</title><rect x="27.8736%" y="501" width="0.1106%" height="15" fill="rgb(229,81,49)" fg:x="14613" fg:w="58"/><text x="28.1236%" y="511.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::span (46 samples, 0.09%)</title><rect x="28.0090%" y="485" width="0.0877%" height="15" fill="rgb(236,28,36)" fg:x="14684" fg:w="46"/><text x="28.2590%" y="495.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (39 samples, 0.07%)</title><rect x="28.0224%" y="469" width="0.0744%" height="15" fill="rgb(249,185,26)" fg:x="14691" fg:w="39"/><text x="28.2724%" y="479.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::is_enabled_inner (62 samples, 0.12%)</title><rect x="27.9880%" y="501" width="0.1183%" height="15" fill="rgb(249,174,33)" fg:x="14673" fg:w="62"/><text x="28.2380%" y="511.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::exit (155 samples, 0.30%)</title><rect x="27.8297%" y="517" width="0.2957%" height="15" fill="rgb(233,201,37)" fg:x="14590" fg:w="155"/><text x="28.0797%" y="527.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::span (10 samples, 0.02%)</title><rect x="28.1063%" y="501" width="0.0191%" height="15" fill="rgb(221,78,26)" fg:x="14735" fg:w="10"/><text x="28.3563%" y="511.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::CloseGuard as core::ops::drop::Drop&gt;::drop (21 samples, 0.04%)</title><rect x="28.1406%" y="501" width="0.0401%" height="15" fill="rgb(250,127,30)" fg:x="14753" fg:w="21"/><text x="28.3906%" y="511.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::span (6 samples, 0.01%)</title><rect x="28.2055%" y="485" width="0.0114%" height="15" fill="rgb(230,49,44)" fg:x="14787" fg:w="6"/><text x="28.4555%" y="495.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::is_enabled_inner (13 samples, 0.02%)</title><rect x="28.1959%" y="501" width="0.0248%" height="15" fill="rgb(229,67,23)" fg:x="14782" fg:w="13"/><text x="28.4459%" y="511.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::span (7 samples, 0.01%)</title><rect x="28.2207%" y="501" width="0.0134%" height="15" fill="rgb(249,83,47)" fg:x="14795" fg:w="7"/><text x="28.4707%" y="511.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (57 samples, 0.11%)</title><rect x="28.1273%" y="517" width="0.1087%" height="15" fill="rgb(215,43,3)" fg:x="14746" fg:w="57"/><text x="28.3773%" y="527.50"></text></g><g><title>tailcall`DYLD-STUB$$memcpy (6 samples, 0.01%)</title><rect x="28.2532%" y="517" width="0.0114%" height="15" fill="rgb(238,154,13)" fg:x="14812" fg:w="6"/><text x="28.5032%" y="527.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (11 samples, 0.02%)</title><rect x="28.2856%" y="485" width="0.0210%" height="15" fill="rgb(219,56,2)" fg:x="14829" fg:w="11"/><text x="28.5356%" y="495.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (7 samples, 0.01%)</title><rect x="28.2932%" y="469" width="0.0134%" height="15" fill="rgb(233,0,4)" fg:x="14833" fg:w="7"/><text x="28.5432%" y="479.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::span (14 samples, 0.03%)</title><rect x="28.3142%" y="469" width="0.0267%" height="15" fill="rgb(235,30,7)" fg:x="14844" fg:w="14"/><text x="28.5642%" y="479.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (13 samples, 0.02%)</title><rect x="28.3161%" y="453" width="0.0248%" height="15" fill="rgb(250,79,13)" fg:x="14845" fg:w="13"/><text x="28.5661%" y="463.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::is_enabled_inner (19 samples, 0.04%)</title><rect x="28.3085%" y="485" width="0.0362%" height="15" fill="rgb(211,146,34)" fg:x="14841" fg:w="19"/><text x="28.5585%" y="495.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::enter (36 samples, 0.07%)</title><rect x="28.2818%" y="501" width="0.0687%" height="15" fill="rgb(228,22,38)" fg:x="14827" fg:w="36"/><text x="28.5318%" y="511.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (11 samples, 0.02%)</title><rect x="28.3924%" y="469" width="0.0210%" height="15" fill="rgb(235,168,5)" fg:x="14885" fg:w="11"/><text x="28.6424%" y="479.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (6 samples, 0.01%)</title><rect x="28.4019%" y="453" width="0.0114%" height="15" fill="rgb(221,155,16)" fg:x="14890" fg:w="6"/><text x="28.6519%" y="463.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (24 samples, 0.05%)</title><rect x="28.3695%" y="485" width="0.0458%" height="15" fill="rgb(215,215,53)" fg:x="14873" fg:w="24"/><text x="28.6195%" y="495.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::span (12 samples, 0.02%)</title><rect x="28.4305%" y="469" width="0.0229%" height="15" fill="rgb(223,4,10)" fg:x="14905" fg:w="12"/><text x="28.6805%" y="479.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (10 samples, 0.02%)</title><rect x="28.4344%" y="453" width="0.0191%" height="15" fill="rgb(234,103,6)" fg:x="14907" fg:w="10"/><text x="28.6844%" y="463.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::is_enabled_inner (21 samples, 0.04%)</title><rect x="28.4172%" y="485" width="0.0401%" height="15" fill="rgb(227,97,0)" fg:x="14898" fg:w="21"/><text x="28.6672%" y="495.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::exit (63 samples, 0.12%)</title><rect x="28.3504%" y="501" width="0.1202%" height="15" fill="rgb(234,150,53)" fg:x="14863" fg:w="63"/><text x="28.6004%" y="511.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::span (7 samples, 0.01%)</title><rect x="28.4573%" y="485" width="0.0134%" height="15" fill="rgb(228,201,54)" fg:x="14919" fg:w="7"/><text x="28.7073%" y="495.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;tracing::instrument::Instrumented&lt;tailcall::core::http::request_handler::handle_request&lt;tailcall::core::async_graphql_hyper::GraphQLRequest&gt;::{{closure}}::{{closure}}&gt;&gt; (111 samples, 0.21%)</title><rect x="28.2703%" y="517" width="0.2117%" height="15" fill="rgb(222,22,37)" fg:x="14821" fg:w="111"/><text x="28.5203%" y="527.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (6 samples, 0.01%)</title><rect x="28.5793%" y="501" width="0.0114%" height="15" fill="rgb(237,53,32)" fg:x="14983" fg:w="6"/><text x="28.8293%" y="511.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (9 samples, 0.02%)</title><rect x="28.5946%" y="501" width="0.0172%" height="15" fill="rgb(233,25,53)" fg:x="14991" fg:w="9"/><text x="28.8446%" y="511.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::downcast_raw (9 samples, 0.02%)</title><rect x="28.6213%" y="501" width="0.0172%" height="15" fill="rgb(210,40,34)" fg:x="15005" fg:w="9"/><text x="28.8713%" y="511.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (14 samples, 0.03%)</title><rect x="28.6385%" y="501" width="0.0267%" height="15" fill="rgb(241,220,44)" fg:x="15014" fg:w="14"/><text x="28.8885%" y="511.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (74 samples, 0.14%)</title><rect x="28.7663%" y="485" width="0.1412%" height="15" fill="rgb(235,28,35)" fg:x="15081" fg:w="74"/><text x="29.0163%" y="495.50"></text></g><g><title>tailcall`tailcall::core::http::request_handler::graphql_request::_{{closure}} (91 samples, 0.17%)</title><rect x="28.9398%" y="485" width="0.1736%" height="15" fill="rgb(210,56,17)" fg:x="15172" fg:w="91"/><text x="29.1898%" y="495.50"></text></g><g><title>tailcall`tailcall::core::http::request_handler::graphql_request::_{{closure}}::_{{closure}} (8 samples, 0.02%)</title><rect x="29.1134%" y="485" width="0.0153%" height="15" fill="rgb(224,130,29)" fg:x="15263" fg:w="8"/><text x="29.3634%" y="495.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (12 samples, 0.02%)</title><rect x="29.1287%" y="469" width="0.0229%" height="15" fill="rgb(235,212,8)" fg:x="15271" fg:w="12"/><text x="29.3787%" y="479.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (218 samples, 0.42%)</title><rect x="29.1516%" y="469" width="0.4158%" height="15" fill="rgb(223,33,50)" fg:x="15283" fg:w="218"/><text x="29.4016%" y="479.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as core::fmt::Display&gt;::fmt (21 samples, 0.04%)</title><rect x="29.5674%" y="469" width="0.0401%" height="15" fill="rgb(219,149,13)" fg:x="15501" fg:w="21"/><text x="29.8174%" y="479.50"></text></g><g><title>tailcall`&lt;tailcall::core::async_graphql_hyper::GraphQLRequest as tailcall::core::async_graphql_hyper::GraphQLRequestLike&gt;::execute_with_jit::_{{closure}} (10 samples, 0.02%)</title><rect x="29.6265%" y="469" width="0.0191%" height="15" fill="rgb(250,156,29)" fg:x="15532" fg:w="10"/><text x="29.8765%" y="479.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (7 samples, 0.01%)</title><rect x="29.6570%" y="453" width="0.0134%" height="15" fill="rgb(216,193,19)" fg:x="15548" fg:w="7"/><text x="29.9070%" y="463.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (64 samples, 0.12%)</title><rect x="29.6704%" y="453" width="0.1221%" height="15" fill="rgb(216,135,14)" fg:x="15555" fg:w="64"/><text x="29.9204%" y="463.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (28 samples, 0.05%)</title><rect x="29.7391%" y="437" width="0.0534%" height="15" fill="rgb(241,47,5)" fg:x="15591" fg:w="28"/><text x="29.9891%" y="447.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::enter (23 samples, 0.04%)</title><rect x="29.7925%" y="453" width="0.0439%" height="15" fill="rgb(233,42,35)" fg:x="15619" fg:w="23"/><text x="30.0425%" y="463.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::span (73 samples, 0.14%)</title><rect x="29.8878%" y="437" width="0.1392%" height="15" fill="rgb(231,13,6)" fg:x="15669" fg:w="73"/><text x="30.1378%" y="447.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (67 samples, 0.13%)</title><rect x="29.8993%" y="421" width="0.1278%" height="15" fill="rgb(207,181,40)" fg:x="15675" fg:w="67"/><text x="30.1493%" y="431.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::is_enabled_inner (106 samples, 0.20%)</title><rect x="29.8363%" y="453" width="0.2022%" height="15" fill="rgb(254,173,49)" fg:x="15642" fg:w="106"/><text x="30.0863%" y="463.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (6 samples, 0.01%)</title><rect x="30.0271%" y="437" width="0.0114%" height="15" fill="rgb(221,1,38)" fg:x="15742" fg:w="6"/><text x="30.2771%" y="447.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::span (13 samples, 0.02%)</title><rect x="30.0385%" y="453" width="0.0248%" height="15" fill="rgb(206,124,46)" fg:x="15748" fg:w="13"/><text x="30.2885%" y="463.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::enter (221 samples, 0.42%)</title><rect x="29.6494%" y="469" width="0.4215%" height="15" fill="rgb(249,21,11)" fg:x="15544" fg:w="221"/><text x="29.8994%" y="479.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (38 samples, 0.07%)</title><rect x="30.0958%" y="453" width="0.0725%" height="15" fill="rgb(222,201,40)" fg:x="15778" fg:w="38"/><text x="30.3458%" y="463.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (15 samples, 0.03%)</title><rect x="30.1682%" y="453" width="0.0286%" height="15" fill="rgb(235,61,29)" fg:x="15816" fg:w="15"/><text x="30.4182%" y="463.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (11 samples, 0.02%)</title><rect x="30.1968%" y="453" width="0.0210%" height="15" fill="rgb(219,207,3)" fg:x="15831" fg:w="11"/><text x="30.4468%" y="463.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (23 samples, 0.04%)</title><rect x="30.3475%" y="437" width="0.0439%" height="15" fill="rgb(222,56,46)" fg:x="15910" fg:w="23"/><text x="30.5975%" y="447.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (8 samples, 0.02%)</title><rect x="30.4544%" y="421" width="0.0153%" height="15" fill="rgb(239,76,54)" fg:x="15966" fg:w="8"/><text x="30.7044%" y="431.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::CloseGuard as core::ops::drop::Drop&gt;::drop (16 samples, 0.03%)</title><rect x="30.4696%" y="421" width="0.0305%" height="15" fill="rgb(231,124,27)" fg:x="15974" fg:w="16"/><text x="30.7196%" y="431.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (75 samples, 0.14%)</title><rect x="30.5001%" y="421" width="0.1431%" height="15" fill="rgb(249,195,6)" fg:x="15990" fg:w="75"/><text x="30.7501%" y="431.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (31 samples, 0.06%)</title><rect x="30.5841%" y="405" width="0.0591%" height="15" fill="rgb(237,174,47)" fg:x="16034" fg:w="31"/><text x="30.8341%" y="415.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (139 samples, 0.27%)</title><rect x="30.3914%" y="437" width="0.2651%" height="15" fill="rgb(206,201,31)" fg:x="15933" fg:w="139"/><text x="30.6414%" y="447.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (7 samples, 0.01%)</title><rect x="30.6432%" y="421" width="0.0134%" height="15" fill="rgb(231,57,52)" fg:x="16065" fg:w="7"/><text x="30.8932%" y="431.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::CloseGuard as core::ops::drop::Drop&gt;::drop (13 samples, 0.02%)</title><rect x="30.6565%" y="437" width="0.0248%" height="15" fill="rgb(248,177,22)" fg:x="16072" fg:w="13"/><text x="30.9065%" y="447.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (262 samples, 0.50%)</title><rect x="30.2178%" y="453" width="0.4998%" height="15" fill="rgb(215,211,37)" fg:x="15842" fg:w="262"/><text x="30.4678%" y="463.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (19 samples, 0.04%)</title><rect x="30.6813%" y="437" width="0.0362%" height="15" fill="rgb(241,128,51)" fg:x="16085" fg:w="19"/><text x="30.9313%" y="447.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::span (82 samples, 0.16%)</title><rect x="30.7710%" y="437" width="0.1564%" height="15" fill="rgb(227,165,31)" fg:x="16132" fg:w="82"/><text x="31.0210%" y="447.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (72 samples, 0.14%)</title><rect x="30.7901%" y="421" width="0.1373%" height="15" fill="rgb(228,167,24)" fg:x="16142" fg:w="72"/><text x="31.0401%" y="431.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::is_enabled_inner (115 samples, 0.22%)</title><rect x="30.7252%" y="453" width="0.2194%" height="15" fill="rgb(228,143,12)" fg:x="16108" fg:w="115"/><text x="30.9752%" y="463.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (9 samples, 0.02%)</title><rect x="30.9274%" y="437" width="0.0172%" height="15" fill="rgb(249,149,8)" fg:x="16214" fg:w="9"/><text x="31.1774%" y="447.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::exit (476 samples, 0.91%)</title><rect x="30.0710%" y="469" width="0.9079%" height="15" fill="rgb(243,35,44)" fg:x="15765" fg:w="476"/><text x="30.3210%" y="479.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::span (18 samples, 0.03%)</title><rect x="30.9446%" y="453" width="0.0343%" height="15" fill="rgb(246,89,9)" fg:x="16223" fg:w="18"/><text x="31.1946%" y="463.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (6 samples, 0.01%)</title><rect x="31.0781%" y="405" width="0.0114%" height="15" fill="rgb(233,213,13)" fg:x="16293" fg:w="6"/><text x="31.3281%" y="415.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (16 samples, 0.03%)</title><rect x="31.0609%" y="421" width="0.0305%" height="15" fill="rgb(233,141,41)" fg:x="16284" fg:w="16"/><text x="31.3109%" y="431.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::CloseGuard as core::ops::drop::Drop&gt;::drop (58 samples, 0.11%)</title><rect x="30.9942%" y="453" width="0.1106%" height="15" fill="rgb(239,167,4)" fg:x="16249" fg:w="58"/><text x="31.2442%" y="463.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::DataInner as sharded_slab::clear::Clear&gt;::clear (31 samples, 0.06%)</title><rect x="31.0457%" y="437" width="0.0591%" height="15" fill="rgb(209,217,16)" fg:x="16276" fg:w="31"/><text x="31.2957%" y="447.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (8 samples, 0.02%)</title><rect x="31.1048%" y="453" width="0.0153%" height="15" fill="rgb(219,88,35)" fg:x="16307" fg:w="8"/><text x="31.3548%" y="463.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::span (12 samples, 0.02%)</title><rect x="31.1277%" y="437" width="0.0229%" height="15" fill="rgb(220,193,23)" fg:x="16319" fg:w="12"/><text x="31.3777%" y="447.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (11 samples, 0.02%)</title><rect x="31.1296%" y="421" width="0.0210%" height="15" fill="rgb(230,90,52)" fg:x="16320" fg:w="11"/><text x="31.3796%" y="431.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::is_enabled_inner (19 samples, 0.04%)</title><rect x="31.1201%" y="453" width="0.0362%" height="15" fill="rgb(252,106,19)" fg:x="16315" fg:w="19"/><text x="31.3701%" y="463.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (97 samples, 0.19%)</title><rect x="30.9808%" y="469" width="0.1850%" height="15" fill="rgb(206,74,20)" fg:x="16242" fg:w="97"/><text x="31.2308%" y="479.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (9 samples, 0.02%)</title><rect x="31.1773%" y="469" width="0.0172%" height="15" fill="rgb(230,138,44)" fg:x="16345" fg:w="9"/><text x="31.4273%" y="479.50"></text></g><g><title>tailcall`DYLD-STUB$$memcpy (12 samples, 0.02%)</title><rect x="31.1944%" y="469" width="0.0229%" height="15" fill="rgb(235,182,43)" fg:x="16354" fg:w="12"/><text x="31.4444%" y="479.50"></text></g><g><title>tailcall`mi_free (29 samples, 0.06%)</title><rect x="31.2288%" y="469" width="0.0553%" height="15" fill="rgb(242,16,51)" fg:x="16372" fg:w="29"/><text x="31.4788%" y="479.50"></text></g><g><title>tailcall`mi_free_block_delayed_mt (34 samples, 0.06%)</title><rect x="31.2841%" y="469" width="0.0649%" height="15" fill="rgb(248,9,4)" fg:x="16401" fg:w="34"/><text x="31.5341%" y="479.50"></text></g><g><title>tailcall`mi_free_block_mt (7 samples, 0.01%)</title><rect x="31.3489%" y="469" width="0.0134%" height="15" fill="rgb(210,31,22)" fg:x="16435" fg:w="7"/><text x="31.5989%" y="479.50"></text></g><g><title>tailcall`mi_free_generic_mt (6 samples, 0.01%)</title><rect x="31.3642%" y="469" width="0.0114%" height="15" fill="rgb(239,54,39)" fg:x="16443" fg:w="6"/><text x="31.6142%" y="479.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (6 samples, 0.01%)</title><rect x="32.6021%" y="453" width="0.0114%" height="15" fill="rgb(230,99,41)" fg:x="17092" fg:w="6"/><text x="32.8521%" y="463.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2,031 samples, 3.87%)</title><rect x="32.6136%" y="453" width="3.8740%" height="15" fill="rgb(253,106,12)" fg:x="17098" fg:w="2031"/><text x="32.8636%" y="463.50">libs..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (8 samples, 0.02%)</title><rect x="36.6726%" y="405" width="0.0153%" height="15" fill="rgb(213,46,41)" fg:x="19226" fg:w="8"/><text x="36.9226%" y="415.50"></text></g><g><title>tailcall`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (48 samples, 0.09%)</title><rect x="36.7051%" y="389" width="0.0916%" height="15" fill="rgb(215,133,35)" fg:x="19243" fg:w="48"/><text x="36.9551%" y="399.50"></text></g><g><title>tailcall`alloc::raw_vec::finish_grow (37 samples, 0.07%)</title><rect x="36.7261%" y="373" width="0.0706%" height="15" fill="rgb(213,28,5)" fg:x="19254" fg:w="37"/><text x="36.9761%" y="383.50"></text></g><g><title>tailcall`mi_malloc_aligned (14 samples, 0.03%)</title><rect x="36.7699%" y="357" width="0.0267%" height="15" fill="rgb(215,77,49)" fg:x="19277" fg:w="14"/><text x="37.0199%" y="367.50"></text></g><g><title>tailcall`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (64 samples, 0.12%)</title><rect x="36.6879%" y="405" width="0.1221%" height="15" fill="rgb(248,100,22)" fg:x="19234" fg:w="64"/><text x="36.9379%" y="415.50"></text></g><g><title>tailcall`alloc::raw_vec::finish_grow (7 samples, 0.01%)</title><rect x="36.7966%" y="389" width="0.0134%" height="15" fill="rgb(208,67,9)" fg:x="19291" fg:w="7"/><text x="37.0466%" y="399.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as core::fmt::Display&gt;::fmt (181 samples, 0.35%)</title><rect x="36.4876%" y="453" width="0.3452%" height="15" fill="rgb(219,133,21)" fg:x="19129" fg:w="181"/><text x="36.7376%" y="463.50"></text></g><g><title>tailcall`core::fmt::write (166 samples, 0.32%)</title><rect x="36.5162%" y="437" width="0.3166%" height="15" fill="rgb(246,46,29)" fg:x="19144" fg:w="166"/><text x="36.7662%" y="447.50"></text></g><g><title>tailcall`&lt;serde_json::number::Number as core::fmt::Display&gt;::fmt (131 samples, 0.25%)</title><rect x="36.5830%" y="421" width="0.2499%" height="15" fill="rgb(246,185,52)" fg:x="19179" fg:w="131"/><text x="36.8330%" y="431.50"></text></g><g><title>tailcall`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (9 samples, 0.02%)</title><rect x="36.8157%" y="405" width="0.0172%" height="15" fill="rgb(252,136,11)" fg:x="19301" fg:w="9"/><text x="37.0657%" y="415.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (11 samples, 0.02%)</title><rect x="36.9149%" y="437" width="0.0210%" height="15" fill="rgb(219,138,53)" fg:x="19353" fg:w="11"/><text x="37.1649%" y="447.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (39 samples, 0.07%)</title><rect x="36.9359%" y="437" width="0.0744%" height="15" fill="rgb(211,51,23)" fg:x="19364" fg:w="39"/><text x="37.1859%" y="447.50"></text></g><g><title>tailcall`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (11 samples, 0.02%)</title><rect x="37.0103%" y="437" width="0.0210%" height="15" fill="rgb(247,221,28)" fg:x="19403" fg:w="11"/><text x="37.2603%" y="447.50"></text></g><g><title>tailcall`&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (7 samples, 0.01%)</title><rect x="37.0389%" y="437" width="0.0134%" height="15" fill="rgb(251,222,45)" fg:x="19418" fg:w="7"/><text x="37.2889%" y="447.50"></text></g><g><title>tailcall`DYLD-STUB$$memcpy (7 samples, 0.01%)</title><rect x="37.0560%" y="437" width="0.0134%" height="15" fill="rgb(217,162,53)" fg:x="19427" fg:w="7"/><text x="37.3060%" y="447.50"></text></g><g><title>tailcall`_mi_malloc_generic (7 samples, 0.01%)</title><rect x="37.1152%" y="405" width="0.0134%" height="15" fill="rgb(229,93,14)" fg:x="19458" fg:w="7"/><text x="37.3652%" y="415.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (8 samples, 0.02%)</title><rect x="37.1152%" y="421" width="0.0153%" height="15" fill="rgb(209,67,49)" fg:x="19458" fg:w="8"/><text x="37.3652%" y="431.50"></text></g><g><title>tailcall`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (39 samples, 0.07%)</title><rect x="37.0694%" y="437" width="0.0744%" height="15" fill="rgb(213,87,29)" fg:x="19434" fg:w="39"/><text x="37.3194%" y="447.50"></text></g><g><title>tailcall`mi_malloc_aligned (7 samples, 0.01%)</title><rect x="37.1304%" y="421" width="0.0134%" height="15" fill="rgb(205,151,52)" fg:x="19466" fg:w="7"/><text x="37.3804%" y="431.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (8 samples, 0.02%)</title><rect x="37.2430%" y="421" width="0.0153%" height="15" fill="rgb(253,215,39)" fg:x="19525" fg:w="8"/><text x="37.4930%" y="431.50"></text></g><g><title>tailcall`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (38 samples, 0.07%)</title><rect x="37.2582%" y="421" width="0.0725%" height="15" fill="rgb(221,220,41)" fg:x="19533" fg:w="38"/><text x="37.5082%" y="431.50"></text></g><g><title>tailcall`serde_json::de::Deserializer&lt;R&gt;::parse_integer (14 samples, 0.03%)</title><rect x="37.3040%" y="405" width="0.0267%" height="15" fill="rgb(218,133,21)" fg:x="19557" fg:w="14"/><text x="37.5540%" y="415.50"></text></g><g><title>tailcall`&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed::has_next_key (23 samples, 0.04%)</title><rect x="37.3307%" y="421" width="0.0439%" height="15" fill="rgb(221,193,43)" fg:x="19571" fg:w="23"/><text x="37.5807%" y="431.50"></text></g><g><title>tailcall`&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (77 samples, 0.15%)</title><rect x="37.3822%" y="421" width="0.1469%" height="15" fill="rgb(240,128,52)" fg:x="19598" fg:w="77"/><text x="37.6322%" y="431.50"></text></g><g><title>tailcall`core::str::converts::from_utf8 (46 samples, 0.09%)</title><rect x="37.4413%" y="405" width="0.0877%" height="15" fill="rgb(253,114,12)" fg:x="19629" fg:w="46"/><text x="37.6913%" y="415.50"></text></g><g><title>tailcall`serde::de::MapAccess::next_entry (213 samples, 0.41%)</title><rect x="37.1590%" y="437" width="0.4063%" height="15" fill="rgb(215,223,47)" fg:x="19481" fg:w="213"/><text x="37.4090%" y="447.50"></text></g><g><title>tailcall`mi_malloc_aligned (15 samples, 0.03%)</title><rect x="37.5367%" y="421" width="0.0286%" height="15" fill="rgb(248,225,23)" fg:x="19679" fg:w="15"/><text x="37.7867%" y="431.50"></text></g><g><title>tailcall`&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (13 samples, 0.02%)</title><rect x="37.5844%" y="421" width="0.0248%" height="15" fill="rgb(250,108,0)" fg:x="19704" fg:w="13"/><text x="37.8344%" y="431.50"></text></g><g><title>tailcall`core::str::converts::from_utf8 (8 samples, 0.02%)</title><rect x="37.5939%" y="405" width="0.0153%" height="15" fill="rgb(228,208,7)" fg:x="19709" fg:w="8"/><text x="37.8439%" y="415.50"></text></g><g><title>tailcall`serde::de::impls::_&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (26 samples, 0.05%)</title><rect x="37.5653%" y="437" width="0.0496%" height="15" fill="rgb(244,45,10)" fg:x="19694" fg:w="26"/><text x="37.8153%" y="447.50"></text></g><g><title>tailcall`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (415 samples, 0.79%)</title><rect x="36.8329%" y="453" width="0.7916%" height="15" fill="rgb(207,125,25)" fg:x="19310" fg:w="415"/><text x="37.0829%" y="463.50"></text></g><g><title>tailcall`&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed::has_next_key (8 samples, 0.02%)</title><rect x="37.6245%" y="453" width="0.0153%" height="15" fill="rgb(210,195,18)" fg:x="19725" fg:w="8"/><text x="37.8745%" y="463.50"></text></g><g><title>tailcall`&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (60 samples, 0.11%)</title><rect x="37.6397%" y="453" width="0.1144%" height="15" fill="rgb(249,80,12)" fg:x="19733" fg:w="60"/><text x="37.8897%" y="463.50"></text></g><g><title>tailcall`core::str::converts::from_utf8 (34 samples, 0.06%)</title><rect x="37.6893%" y="437" width="0.0649%" height="15" fill="rgb(221,65,9)" fg:x="19759" fg:w="34"/><text x="37.9393%" y="447.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (101 samples, 0.19%)</title><rect x="38.2062%" y="437" width="0.1927%" height="15" fill="rgb(235,49,36)" fg:x="20030" fg:w="101"/><text x="38.4562%" y="447.50"></text></g><g><title>tailcall`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (6 samples, 0.01%)</title><rect x="38.4046%" y="437" width="0.0114%" height="15" fill="rgb(225,32,20)" fg:x="20134" fg:w="6"/><text x="38.6546%" y="447.50"></text></g><g><title>tailcall`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (13 samples, 0.02%)</title><rect x="38.4161%" y="437" width="0.0248%" height="15" fill="rgb(215,141,46)" fg:x="20140" fg:w="13"/><text x="38.6661%" y="447.50"></text></g><g><title>tailcall`DYLD-STUB$$memcpy (6 samples, 0.01%)</title><rect x="38.4408%" y="437" width="0.0114%" height="15" fill="rgb(250,160,47)" fg:x="20153" fg:w="6"/><text x="38.6908%" y="447.50"></text></g><g><title>tailcall`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (13 samples, 0.02%)</title><rect x="38.4580%" y="437" width="0.0248%" height="15" fill="rgb(216,222,40)" fg:x="20162" fg:w="13"/><text x="38.7080%" y="447.50"></text></g><g><title>tailcall`alloc::sync::Arc&lt;T,A&gt;::drop_slow (7 samples, 0.01%)</title><rect x="38.4828%" y="437" width="0.0134%" height="15" fill="rgb(234,217,39)" fg:x="20175" fg:w="7"/><text x="38.7328%" y="447.50"></text></g><g><title>tailcall`mi_free (16 samples, 0.03%)</title><rect x="38.5381%" y="437" width="0.0305%" height="15" fill="rgb(207,178,40)" fg:x="20204" fg:w="16"/><text x="38.7881%" y="447.50"></text></g><g><title>tailcall`mi_free_block_delayed_mt (26 samples, 0.05%)</title><rect x="38.5686%" y="437" width="0.0496%" height="15" fill="rgb(221,136,13)" fg:x="20220" fg:w="26"/><text x="38.8186%" y="447.50"></text></g><g><title>tailcall`mi_free_block_mt (8 samples, 0.02%)</title><rect x="38.6182%" y="437" width="0.0153%" height="15" fill="rgb(249,199,10)" fg:x="20246" fg:w="8"/><text x="38.8682%" y="447.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (194 samples, 0.37%)</title><rect x="39.3393%" y="421" width="0.3700%" height="15" fill="rgb(249,222,13)" fg:x="20624" fg:w="194"/><text x="39.5893%" y="431.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (7 samples, 0.01%)</title><rect x="39.7093%" y="421" width="0.0134%" height="15" fill="rgb(244,185,38)" fg:x="20818" fg:w="7"/><text x="39.9593%" y="431.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (33 samples, 0.06%)</title><rect x="39.7227%" y="421" width="0.0629%" height="15" fill="rgb(236,202,9)" fg:x="20825" fg:w="33"/><text x="39.9727%" y="431.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (33 samples, 0.06%)</title><rect x="39.7227%" y="405" width="0.0629%" height="15" fill="rgb(250,229,37)" fg:x="20825" fg:w="33"/><text x="39.9727%" y="415.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (24 samples, 0.05%)</title><rect x="39.7875%" y="421" width="0.0458%" height="15" fill="rgb(206,174,23)" fg:x="20859" fg:w="24"/><text x="40.0375%" y="431.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (24 samples, 0.05%)</title><rect x="39.7875%" y="405" width="0.0458%" height="15" fill="rgb(211,33,43)" fg:x="20859" fg:w="24"/><text x="40.0375%" y="415.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (7 samples, 0.01%)</title><rect x="39.8390%" y="421" width="0.0134%" height="15" fill="rgb(245,58,50)" fg:x="20886" fg:w="7"/><text x="40.0890%" y="431.50"></text></g><g><title>tailcall`alloc::raw_vec::finish_grow (34 samples, 0.06%)</title><rect x="39.8810%" y="389" width="0.0649%" height="15" fill="rgb(244,68,36)" fg:x="20908" fg:w="34"/><text x="40.1310%" y="399.50"></text></g><g><title>tailcall`mi_malloc_aligned (12 samples, 0.02%)</title><rect x="39.9229%" y="373" width="0.0229%" height="15" fill="rgb(232,229,15)" fg:x="20930" fg:w="12"/><text x="40.1729%" y="383.50"></text></g><g><title>tailcall`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (41 samples, 0.08%)</title><rect x="39.8695%" y="405" width="0.0782%" height="15" fill="rgb(254,30,23)" fg:x="20902" fg:w="41"/><text x="40.1195%" y="415.50"></text></g><g><title>tailcall`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (49 samples, 0.09%)</title><rect x="39.8581%" y="421" width="0.0935%" height="15" fill="rgb(235,160,14)" fg:x="20896" fg:w="49"/><text x="40.1081%" y="431.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (12 samples, 0.02%)</title><rect x="40.3540%" y="405" width="0.0229%" height="15" fill="rgb(212,155,44)" fg:x="21156" fg:w="12"/><text x="40.6040%" y="415.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (121 samples, 0.23%)</title><rect x="40.3769%" y="405" width="0.2308%" height="15" fill="rgb(226,2,50)" fg:x="21168" fg:w="121"/><text x="40.6269%" y="415.50"></text></g><g><title>tailcall`&lt;T as alloc::alloc::WriteCloneIntoRaw&gt;::write_clone_into_raw (8 samples, 0.02%)</title><rect x="40.6077%" y="405" width="0.0153%" height="15" fill="rgb(234,177,6)" fg:x="21289" fg:w="8"/><text x="40.8577%" y="415.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (10 samples, 0.02%)</title><rect x="40.7107%" y="389" width="0.0191%" height="15" fill="rgb(217,24,9)" fg:x="21343" fg:w="10"/><text x="40.9607%" y="399.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (47 samples, 0.09%)</title><rect x="40.7298%" y="389" width="0.0897%" height="15" fill="rgb(220,13,46)" fg:x="21353" fg:w="47"/><text x="40.9798%" y="399.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1,125 samples, 2.15%)</title><rect x="40.8900%" y="373" width="2.1459%" height="15" fill="rgb(239,221,27)" fg:x="21437" fg:w="1125"/><text x="41.1400%" y="383.50">l..</text></g><g><title>tailcall`&lt;T as alloc::alloc::WriteCloneIntoRaw&gt;::write_clone_into_raw (8 samples, 0.02%)</title><rect x="43.0359%" y="373" width="0.0153%" height="15" fill="rgb(222,198,25)" fg:x="22562" fg:w="8"/><text x="43.2859%" y="383.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (62 samples, 0.12%)</title><rect x="44.2223%" y="357" width="0.1183%" height="15" fill="rgb(211,99,13)" fg:x="23184" fg:w="62"/><text x="44.4723%" y="367.50"></text></g><g><title>tailcall`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (29 samples, 0.06%)</title><rect x="44.3406%" y="357" width="0.0553%" height="15" fill="rgb(232,111,31)" fg:x="23246" fg:w="29"/><text x="44.5906%" y="367.50"></text></g><g><title>tailcall`_mi_free_delayed_block (16 samples, 0.03%)</title><rect x="44.4360%" y="325" width="0.0305%" height="15" fill="rgb(245,82,37)" fg:x="23296" fg:w="16"/><text x="44.6860%" y="335.50"></text></g><g><title>tailcall`_mi_page_try_use_delayed_free (6 samples, 0.01%)</title><rect x="44.4665%" y="325" width="0.0114%" height="15" fill="rgb(227,149,46)" fg:x="23312" fg:w="6"/><text x="44.7165%" y="335.50"></text></g><g><title>tailcall`mi_find_page (48 samples, 0.09%)</title><rect x="44.4779%" y="325" width="0.0916%" height="15" fill="rgb(218,36,50)" fg:x="23318" fg:w="48"/><text x="44.7279%" y="335.50"></text></g><g><title>tailcall`mi_page_free_list_extend (31 samples, 0.06%)</title><rect x="44.5695%" y="325" width="0.0591%" height="15" fill="rgb(226,80,48)" fg:x="23366" fg:w="31"/><text x="44.8195%" y="335.50"></text></g><g><title>tailcall`_mi_malloc_generic (124 samples, 0.24%)</title><rect x="44.3978%" y="341" width="0.2365%" height="15" fill="rgb(238,224,15)" fg:x="23276" fg:w="124"/><text x="44.6478%" y="351.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (130 samples, 0.25%)</title><rect x="44.3959%" y="357" width="0.2480%" height="15" fill="rgb(241,136,10)" fg:x="23275" fg:w="130"/><text x="44.6459%" y="367.50"></text></g><g><title>tailcall`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,167 samples, 2.23%)</title><rect x="43.0512%" y="373" width="2.2260%" height="15" fill="rgb(208,32,45)" fg:x="22570" fg:w="1167"/><text x="43.3012%" y="383.50">t..</text></g><g><title>tailcall`mi_malloc_aligned (332 samples, 0.63%)</title><rect x="44.6439%" y="357" width="0.6333%" height="15" fill="rgb(207,135,9)" fg:x="23405" fg:w="332"/><text x="44.8939%" y="367.50"></text></g><g><title>tailcall`DYLD-STUB$$memcpy (103 samples, 0.20%)</title><rect x="45.2772%" y="373" width="0.1965%" height="15" fill="rgb(206,86,44)" fg:x="23737" fg:w="103"/><text x="45.5272%" y="383.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (13 samples, 0.02%)</title><rect x="45.4736%" y="373" width="0.0248%" height="15" fill="rgb(245,177,15)" fg:x="23840" fg:w="13"/><text x="45.7236%" y="383.50"></text></g><g><title>tailcall`_mi_malloc_generic (8 samples, 0.02%)</title><rect x="45.4832%" y="357" width="0.0153%" height="15" fill="rgb(206,64,50)" fg:x="23845" fg:w="8"/><text x="45.7332%" y="367.50"></text></g><g><title>tailcall`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2,489 samples, 4.75%)</title><rect x="40.8290%" y="389" width="4.7476%" height="15" fill="rgb(234,36,40)" fg:x="21405" fg:w="2489"/><text x="41.0790%" y="399.50">tailca..</text></g><g><title>tailcall`mi_malloc_aligned (41 samples, 0.08%)</title><rect x="45.4984%" y="373" width="0.0782%" height="15" fill="rgb(213,64,8)" fg:x="23853" fg:w="41"/><text x="45.7484%" y="383.50"></text></g><g><title>tailcall`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2,640 samples, 5.04%)</title><rect x="40.6230%" y="405" width="5.0357%" height="15" fill="rgb(210,75,36)" fg:x="21297" fg:w="2640"/><text x="40.8730%" y="415.50">tailca..</text></g><g><title>tailcall`mi_malloc_aligned (38 samples, 0.07%)</title><rect x="45.5862%" y="389" width="0.0725%" height="15" fill="rgb(229,88,21)" fg:x="23899" fg:w="38"/><text x="45.8362%" y="399.50"></text></g><g><title>tailcall`&lt;async_graphql_value::Value as core::clone::Clone&gt;::clone (28 samples, 0.05%)</title><rect x="45.6586%" y="405" width="0.0534%" height="15" fill="rgb(252,204,47)" fg:x="23937" fg:w="28"/><text x="45.9086%" y="415.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (108 samples, 0.21%)</title><rect x="45.7235%" y="389" width="0.2060%" height="15" fill="rgb(208,77,27)" fg:x="23971" fg:w="108"/><text x="45.9735%" y="399.50"></text></g><g><title>tailcall`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (23 samples, 0.04%)</title><rect x="45.9295%" y="389" width="0.0439%" height="15" fill="rgb(221,76,26)" fg:x="24079" fg:w="23"/><text x="46.1795%" y="399.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (14 samples, 0.03%)</title><rect x="46.0592%" y="373" width="0.0267%" height="15" fill="rgb(225,139,18)" fg:x="24147" fg:w="14"/><text x="46.3092%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (40 samples, 0.08%)</title><rect x="46.0859%" y="373" width="0.0763%" height="15" fill="rgb(230,137,11)" fg:x="24161" fg:w="40"/><text x="46.3359%" y="383.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (25 samples, 0.05%)</title><rect x="46.2728%" y="357" width="0.0477%" height="15" fill="rgb(212,28,1)" fg:x="24259" fg:w="25"/><text x="46.5228%" y="367.50"></text></g><g><title>tailcall`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (160 samples, 0.31%)</title><rect x="46.1622%" y="373" width="0.3052%" height="15" fill="rgb(248,164,17)" fg:x="24201" fg:w="160"/><text x="46.4122%" y="383.50"></text></g><g><title>tailcall`mi_malloc_aligned (72 samples, 0.14%)</title><rect x="46.3301%" y="357" width="0.1373%" height="15" fill="rgb(222,171,42)" fg:x="24289" fg:w="72"/><text x="46.5801%" y="367.50"></text></g><g><title>tailcall`&lt;http::header::map::HeaderMap&lt;T&gt; as core::clone::Clone&gt;::clone (7 samples, 0.01%)</title><rect x="46.4674%" y="373" width="0.0134%" height="15" fill="rgb(243,84,45)" fg:x="24361" fg:w="7"/><text x="46.7174%" y="383.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (8 samples, 0.02%)</title><rect x="46.4960%" y="373" width="0.0153%" height="15" fill="rgb(252,49,23)" fg:x="24376" fg:w="8"/><text x="46.7460%" y="383.50"></text></g><g><title>tailcall`_mi_malloc_generic (7 samples, 0.01%)</title><rect x="46.4979%" y="357" width="0.0134%" height="15" fill="rgb(215,19,7)" fg:x="24377" fg:w="7"/><text x="46.7479%" y="367.50"></text></g><g><title>tailcall`&lt;tailcall::core::http::request_template::RequestTemplate as core::clone::Clone&gt;::clone (360 samples, 0.69%)</title><rect x="45.9734%" y="389" width="0.6867%" height="15" fill="rgb(238,81,41)" fg:x="24102" fg:w="360"/><text x="46.2234%" y="399.50"></text></g><g><title>tailcall`mi_malloc_aligned (78 samples, 0.15%)</title><rect x="46.5113%" y="373" width="0.1488%" height="15" fill="rgb(210,199,37)" fg:x="24384" fg:w="78"/><text x="46.7613%" y="383.50"></text></g><g><title>tailcall`DYLD-STUB$$memcpy (8 samples, 0.02%)</title><rect x="46.6658%" y="389" width="0.0153%" height="15" fill="rgb(244,192,49)" fg:x="24465" fg:w="8"/><text x="46.9158%" y="399.50"></text></g><g><title>tailcall`&lt;tailcall::core::ir::model::IO as core::clone::Clone&gt;::clone (507 samples, 0.97%)</title><rect x="45.7159%" y="405" width="0.9671%" height="15" fill="rgb(226,211,11)" fg:x="23967" fg:w="507"/><text x="45.9659%" y="415.50"></text></g><g><title>tailcall`DYLD-STUB$$memcpy (6 samples, 0.01%)</title><rect x="46.6868%" y="405" width="0.0114%" height="15" fill="rgb(236,162,54)" fg:x="24476" fg:w="6"/><text x="46.9368%" y="415.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (10 samples, 0.02%)</title><rect x="46.6982%" y="405" width="0.0191%" height="15" fill="rgb(220,229,9)" fg:x="24482" fg:w="10"/><text x="46.9482%" y="415.50"></text></g><g><title>tailcall`_mi_malloc_generic (9 samples, 0.02%)</title><rect x="46.7001%" y="389" width="0.0172%" height="15" fill="rgb(250,87,22)" fg:x="24483" fg:w="9"/><text x="46.9501%" y="399.50"></text></g><g><title>tailcall`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3,634 samples, 6.93%)</title><rect x="39.9516%" y="421" width="6.9317%" height="15" fill="rgb(239,43,17)" fg:x="20945" fg:w="3634"/><text x="40.2016%" y="431.50">tailcall`..</text></g><g><title>tailcall`mi_malloc_aligned (87 samples, 0.17%)</title><rect x="46.7173%" y="405" width="0.1659%" height="15" fill="rgb(231,177,25)" fg:x="24492" fg:w="87"/><text x="46.9673%" y="415.50"></text></g><g><title>tailcall`&lt;async_graphql_value::Value as core::clone::Clone&gt;::clone (26 samples, 0.05%)</title><rect x="46.8832%" y="421" width="0.0496%" height="15" fill="rgb(219,179,1)" fg:x="24579" fg:w="26"/><text x="47.1332%" y="431.50"></text></g><g><title>tailcall`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (168 samples, 0.32%)</title><rect x="46.9328%" y="421" width="0.3205%" height="15" fill="rgb(238,219,53)" fg:x="24605" fg:w="168"/><text x="47.1828%" y="431.50"></text></g><g><title>tailcall`DYLD-STUB$$memcpy (11 samples, 0.02%)</title><rect x="47.2609%" y="421" width="0.0210%" height="15" fill="rgb(232,167,36)" fg:x="24777" fg:w="11"/><text x="47.5109%" y="431.50"></text></g><g><title>tailcall`_mi_page_retire (11 samples, 0.02%)</title><rect x="47.2895%" y="421" width="0.0210%" height="15" fill="rgb(244,19,51)" fg:x="24792" fg:w="11"/><text x="47.5395%" y="431.50"></text></g><g><title>tailcall`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (82 samples, 0.16%)</title><rect x="47.3105%" y="421" width="0.1564%" height="15" fill="rgb(224,6,22)" fg:x="24803" fg:w="82"/><text x="47.5605%" y="431.50"></text></g><g><title>tailcall`core::fmt::Formatter::pad (17 samples, 0.03%)</title><rect x="47.4764%" y="421" width="0.0324%" height="15" fill="rgb(224,145,5)" fg:x="24890" fg:w="17"/><text x="47.7264%" y="431.50"></text></g><g><title>tailcall`core::hash::BuildHasher::hash_one (36 samples, 0.07%)</title><rect x="47.5089%" y="421" width="0.0687%" height="15" fill="rgb(234,130,49)" fg:x="24907" fg:w="36"/><text x="47.7589%" y="431.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (6 samples, 0.01%)</title><rect x="47.5852%" y="421" width="0.0114%" height="15" fill="rgb(254,6,2)" fg:x="24947" fg:w="6"/><text x="47.8352%" y="431.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,async_graphql_value::ConstValue&gt;&gt; (37 samples, 0.07%)</title><rect x="47.5966%" y="421" width="0.0706%" height="15" fill="rgb(208,96,46)" fg:x="24953" fg:w="37"/><text x="47.8466%" y="431.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;tailcall::core::jit::model::Directive&lt;async_graphql_value::Value&gt;&gt;&gt; (42 samples, 0.08%)</title><rect x="48.1345%" y="341" width="0.0801%" height="15" fill="rgb(239,3,39)" fg:x="25235" fg:w="42"/><text x="48.3845%" y="351.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;tailcall::core::wrapping_type::Type&gt; (15 samples, 0.03%)</title><rect x="48.2146%" y="341" width="0.0286%" height="15" fill="rgb(233,210,1)" fg:x="25277" fg:w="15"/><text x="48.4646%" y="351.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;[tailcall::core::jit::model::Field&lt;async_graphql_value::Value&gt;]&gt; (387 samples, 0.74%)</title><rect x="47.7511%" y="357" width="0.7382%" height="15" fill="rgb(244,137,37)" fg:x="25034" fg:w="387"/><text x="48.0011%" y="367.50"></text></g><g><title>tailcall`mi_free_block_mt (129 samples, 0.25%)</title><rect x="48.2432%" y="341" width="0.2461%" height="15" fill="rgb(240,136,2)" fg:x="25292" fg:w="129"/><text x="48.4932%" y="351.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;tailcall::core::jit::model::Directive&lt;async_graphql_value::Value&gt;&gt;&gt; (57 samples, 0.11%)</title><rect x="48.4893%" y="357" width="0.1087%" height="15" fill="rgb(239,18,37)" fg:x="25421" fg:w="57"/><text x="48.7393%" y="367.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;tailcall::core::wrapping_type::Type&gt; (12 samples, 0.02%)</title><rect x="48.5980%" y="357" width="0.0229%" height="15" fill="rgb(218,185,22)" fg:x="25478" fg:w="12"/><text x="48.8480%" y="367.50"></text></g><g><title>tailcall`mi_free (310 samples, 0.59%)</title><rect x="48.6209%" y="357" width="0.5913%" height="15" fill="rgb(225,218,4)" fg:x="25490" fg:w="310"/><text x="48.8709%" y="367.50"></text></g><g><title>tailcall`mi_free_block_delayed_mt (773 samples, 1.47%)</title><rect x="49.2122%" y="357" width="1.4745%" height="15" fill="rgb(230,182,32)" fg:x="25800" fg:w="773"/><text x="49.4622%" y="367.50"></text></g><g><title>tailcall`mi_free_block_mt (181 samples, 0.35%)</title><rect x="50.6867%" y="357" width="0.3452%" height="15" fill="rgb(242,56,43)" fg:x="26573" fg:w="181"/><text x="50.9367%" y="367.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;[tailcall::core::jit::model::Field&lt;async_graphql_value::Value&gt;]&gt; (1,813 samples, 3.46%)</title><rect x="47.7378%" y="373" width="3.4582%" height="15" fill="rgb(233,99,24)" fg:x="25027" fg:w="1813"/><text x="47.9878%" y="383.50">tai..</text></g><g><title>tailcall`mi_free_generic_mt (86 samples, 0.16%)</title><rect x="51.0319%" y="357" width="0.1640%" height="15" fill="rgb(234,209,42)" fg:x="26754" fg:w="86"/><text x="51.2819%" y="367.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;tailcall::core::wrapping_type::Type&gt; (6 samples, 0.01%)</title><rect x="51.2017%" y="373" width="0.0114%" height="15" fill="rgb(227,7,12)" fg:x="26843" fg:w="6"/><text x="51.4517%" y="383.50"></text></g><g><title>tailcall`mi_free (38 samples, 0.07%)</title><rect x="51.2131%" y="373" width="0.0725%" height="15" fill="rgb(245,203,43)" fg:x="26849" fg:w="38"/><text x="51.4631%" y="383.50"></text></g><g><title>tailcall`mi_free_block_delayed_mt (50 samples, 0.10%)</title><rect x="51.2856%" y="373" width="0.0954%" height="15" fill="rgb(238,205,33)" fg:x="26887" fg:w="50"/><text x="51.5356%" y="383.50"></text></g><g><title>tailcall`mi_free_block_mt (20 samples, 0.04%)</title><rect x="51.3810%" y="373" width="0.0381%" height="15" fill="rgb(231,56,7)" fg:x="26937" fg:w="20"/><text x="51.6310%" y="383.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;[tailcall::core::jit::model::Field&lt;async_graphql_value::Value&gt;]&gt; (1,954 samples, 3.73%)</title><rect x="47.7149%" y="389" width="3.7272%" height="15" fill="rgb(244,186,29)" fg:x="25015" fg:w="1954"/><text x="47.9649%" y="399.50">tail..</text></g><g><title>tailcall`mi_free_generic_mt (12 samples, 0.02%)</title><rect x="51.4191%" y="373" width="0.0229%" height="15" fill="rgb(234,111,31)" fg:x="26957" fg:w="12"/><text x="51.6691%" y="383.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::Value&gt; (9 samples, 0.02%)</title><rect x="51.4497%" y="389" width="0.0172%" height="15" fill="rgb(241,149,10)" fg:x="26973" fg:w="9"/><text x="51.6997%" y="399.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;tailcall::core::json::json_schema::JsonSchema&gt; (10 samples, 0.02%)</title><rect x="51.5488%" y="357" width="0.0191%" height="15" fill="rgb(249,206,44)" fg:x="27025" fg:w="10"/><text x="51.7988%" y="367.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;tailcall::core::endpoint::Endpoint&gt; (34 samples, 0.06%)</title><rect x="51.5164%" y="373" width="0.0649%" height="15" fill="rgb(251,153,30)" fg:x="27008" fg:w="34"/><text x="51.7664%" y="383.50"></text></g><g><title>tailcall`mi_free_block_mt (7 samples, 0.01%)</title><rect x="51.5679%" y="357" width="0.0134%" height="15" fill="rgb(239,152,38)" fg:x="27035" fg:w="7"/><text x="51.8179%" y="367.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;tailcall::core::http::request_template::Query&gt; (66 samples, 0.13%)</title><rect x="51.5813%" y="373" width="0.1259%" height="15" fill="rgb(249,139,47)" fg:x="27042" fg:w="66"/><text x="51.8313%" y="383.50"></text></g><g><title>tailcall`mi_free_block_mt (31 samples, 0.06%)</title><rect x="51.6480%" y="357" width="0.0591%" height="15" fill="rgb(244,64,35)" fg:x="27077" fg:w="31"/><text x="51.8980%" y="367.50"></text></g><g><title>tailcall`mi_free (87 samples, 0.17%)</title><rect x="51.7110%" y="373" width="0.1659%" height="15" fill="rgb(216,46,15)" fg:x="27110" fg:w="87"/><text x="51.9610%" y="383.50"></text></g><g><title>tailcall`mi_free_block_delayed_mt (134 samples, 0.26%)</title><rect x="51.8769%" y="373" width="0.2556%" height="15" fill="rgb(250,74,19)" fg:x="27197" fg:w="134"/><text x="52.1269%" y="383.50"></text></g><g><title>tailcall`mi_free_block_mt (44 samples, 0.08%)</title><rect x="52.1325%" y="373" width="0.0839%" height="15" fill="rgb(249,42,33)" fg:x="27331" fg:w="44"/><text x="52.3825%" y="383.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;tailcall::core::ir::model::IO&gt; (425 samples, 0.81%)</title><rect x="51.4745%" y="389" width="0.8107%" height="15" fill="rgb(242,149,17)" fg:x="26986" fg:w="425"/><text x="51.7245%" y="399.50"></text></g><g><title>tailcall`mi_free_generic_mt (36 samples, 0.07%)</title><rect x="52.2165%" y="373" width="0.0687%" height="15" fill="rgb(244,29,21)" fg:x="27375" fg:w="36"/><text x="52.4665%" y="383.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;tailcall::core::wrapping_type::Type&gt; (6 samples, 0.01%)</title><rect x="52.2908%" y="389" width="0.0114%" height="15" fill="rgb(220,130,37)" fg:x="27414" fg:w="6"/><text x="52.5408%" y="399.50"></text></g><g><title>tailcall`mi_free (61 samples, 0.12%)</title><rect x="52.3023%" y="389" width="0.1164%" height="15" fill="rgb(211,67,2)" fg:x="27420" fg:w="61"/><text x="52.5523%" y="399.50"></text></g><g><title>tailcall`mi_free_block_delayed_mt (107 samples, 0.20%)</title><rect x="52.4186%" y="389" width="0.2041%" height="15" fill="rgb(235,68,52)" fg:x="27481" fg:w="107"/><text x="52.6686%" y="399.50"></text></g><g><title>tailcall`mi_free_block_mt (47 samples, 0.09%)</title><rect x="52.6227%" y="389" width="0.0897%" height="15" fill="rgb(246,142,3)" fg:x="27588" fg:w="47"/><text x="52.8727%" y="399.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;[tailcall::core::jit::model::Field&lt;async_graphql_value::Value&gt;]&gt; (2,664 samples, 5.08%)</title><rect x="47.6844%" y="405" width="5.0814%" height="15" fill="rgb(241,25,7)" fg:x="24999" fg:w="2664"/><text x="47.9344%" y="415.50">tailca..</text></g><g><title>tailcall`mi_free_generic_mt (28 samples, 0.05%)</title><rect x="52.7124%" y="389" width="0.0534%" height="15" fill="rgb(242,119,39)" fg:x="27635" fg:w="28"/><text x="52.9624%" y="399.50"></text></g><g><title>tailcall`mi_free (47 samples, 0.09%)</title><rect x="52.7944%" y="405" width="0.0897%" height="15" fill="rgb(241,98,45)" fg:x="27678" fg:w="47"/><text x="53.0444%" y="415.50"></text></g><g><title>tailcall`mi_free_block_delayed_mt (111 samples, 0.21%)</title><rect x="52.8841%" y="405" width="0.2117%" height="15" fill="rgb(254,28,30)" fg:x="27725" fg:w="111"/><text x="53.1341%" y="415.50"></text></g><g><title>tailcall`mi_free_block_mt (29 samples, 0.06%)</title><rect x="53.0958%" y="405" width="0.0553%" height="15" fill="rgb(241,142,54)" fg:x="27836" fg:w="29"/><text x="53.3458%" y="415.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;tailcall::core::jit::exec_const::ConstValueExecutor&gt; (2,890 samples, 5.51%)</title><rect x="47.6691%" y="421" width="5.5125%" height="15" fill="rgb(222,85,15)" fg:x="24991" fg:w="2890"/><text x="47.9191%" y="431.50">tailcal..</text></g><g><title>tailcall`mi_free_generic_mt (16 samples, 0.03%)</title><rect x="53.1511%" y="405" width="0.0305%" height="15" fill="rgb(210,85,47)" fg:x="27865" fg:w="16"/><text x="53.4011%" y="415.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;tokio::sync::broadcast::Receiver&lt;core::result::Result&lt;tailcall::core::jit::response::AnyResponse&lt;alloc::vec::Vec&lt;u8&gt;&gt;,tailcall::core::ir::error::Error&gt;&gt;&gt; (12 samples, 0.02%)</title><rect x="53.1816%" y="421" width="0.0229%" height="15" fill="rgb(224,206,25)" fg:x="27881" fg:w="12"/><text x="53.4316%" y="431.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (8 samples, 0.02%)</title><rect x="53.2312%" y="405" width="0.0153%" height="15" fill="rgb(243,201,19)" fg:x="27907" fg:w="8"/><text x="53.4812%" y="415.50"></text></g><g><title>tailcall`_mi_malloc_generic (8 samples, 0.02%)</title><rect x="53.2312%" y="389" width="0.0153%" height="15" fill="rgb(236,59,4)" fg:x="27907" fg:w="8"/><text x="53.4812%" y="399.50"></text></g><g><title>tailcall`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (22 samples, 0.04%)</title><rect x="53.2102%" y="421" width="0.0420%" height="15" fill="rgb(254,179,45)" fg:x="27896" fg:w="22"/><text x="53.4602%" y="431.50"></text></g><g><title>tailcall`mi_free (43 samples, 0.08%)</title><rect x="53.2522%" y="421" width="0.0820%" height="15" fill="rgb(226,14,10)" fg:x="27918" fg:w="43"/><text x="53.5022%" y="431.50"></text></g><g><title>tailcall`mi_free_block_delayed_mt (77 samples, 0.15%)</title><rect x="53.3342%" y="421" width="0.1469%" height="15" fill="rgb(244,27,41)" fg:x="27961" fg:w="77"/><text x="53.5842%" y="431.50"></text></g><g><title>tailcall`mi_free_block_mt (25 samples, 0.05%)</title><rect x="53.4811%" y="421" width="0.0477%" height="15" fill="rgb(235,35,32)" fg:x="28038" fg:w="25"/><text x="53.7311%" y="431.50"></text></g><g><title>tailcall`mi_free_generic_mt (11 samples, 0.02%)</title><rect x="53.5288%" y="421" width="0.0210%" height="15" fill="rgb(218,68,31)" fg:x="28063" fg:w="11"/><text x="53.7788%" y="431.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (12 samples, 0.02%)</title><rect x="53.5498%" y="421" width="0.0229%" height="15" fill="rgb(207,120,37)" fg:x="28074" fg:w="12"/><text x="53.7998%" y="431.50"></text></g><g><title>tailcall`_mi_malloc_generic (12 samples, 0.02%)</title><rect x="53.5498%" y="405" width="0.0229%" height="15" fill="rgb(227,98,0)" fg:x="28074" fg:w="12"/><text x="53.7998%" y="415.50"></text></g><g><title>tailcall`mi_find_page (9 samples, 0.02%)</title><rect x="53.5555%" y="389" width="0.0172%" height="15" fill="rgb(207,7,3)" fg:x="28077" fg:w="9"/><text x="53.8055%" y="399.50"></text></g><g><title>tailcall`mi_malloc_aligned (7 samples, 0.01%)</title><rect x="53.5727%" y="421" width="0.0134%" height="15" fill="rgb(206,98,19)" fg:x="28086" fg:w="7"/><text x="53.8227%" y="431.50"></text></g><g><title>tailcall`&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (10 samples, 0.02%)</title><rect x="53.6776%" y="293" width="0.0191%" height="15" fill="rgb(217,5,26)" fg:x="28141" fg:w="10"/><text x="53.9276%" y="303.50"></text></g><g><title>tailcall`&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (55 samples, 0.10%)</title><rect x="53.7214%" y="277" width="0.1049%" height="15" fill="rgb(235,190,38)" fg:x="28164" fg:w="55"/><text x="53.9714%" y="287.50"></text></g><g><title>tailcall`&lt;serde_json::number::Number as serde::ser::Serialize&gt;::serialize (27 samples, 0.05%)</title><rect x="53.8263%" y="277" width="0.0515%" height="15" fill="rgb(247,86,24)" fg:x="28219" fg:w="27"/><text x="54.0763%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (223 samples, 0.43%)</title><rect x="54.0209%" y="261" width="0.4254%" height="15" fill="rgb(205,101,16)" fg:x="28321" fg:w="223"/><text x="54.2709%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (94 samples, 0.18%)</title><rect x="56.7676%" y="213" width="0.1793%" height="15" fill="rgb(246,168,33)" fg:x="29761" fg:w="94"/><text x="57.0176%" y="223.50"></text></g><g><title>tailcall`_mi_free_delayed_block (41 samples, 0.08%)</title><rect x="56.9679%" y="181" width="0.0782%" height="15" fill="rgb(231,114,1)" fg:x="29866" fg:w="41"/><text x="57.2179%" y="191.50"></text></g><g><title>tailcall`mi_page_free_list_extend (7 samples, 0.01%)</title><rect x="57.1091%" y="165" width="0.0134%" height="15" fill="rgb(207,184,53)" fg:x="29940" fg:w="7"/><text x="57.3591%" y="175.50"></text></g><g><title>tailcall`mi_segment_span_allocate (9 samples, 0.02%)</title><rect x="57.1339%" y="133" width="0.0172%" height="15" fill="rgb(224,95,51)" fg:x="29953" fg:w="9"/><text x="57.3839%" y="143.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (6 samples, 0.01%)</title><rect x="57.1396%" y="117" width="0.0114%" height="15" fill="rgb(212,188,45)" fg:x="29956" fg:w="6"/><text x="57.3896%" y="127.50"></text></g><g><title>libsystem_c.dylib`gettimeofday (8 samples, 0.02%)</title><rect x="57.1529%" y="85" width="0.0153%" height="15" fill="rgb(223,154,38)" fg:x="29963" fg:w="8"/><text x="57.4029%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (6 samples, 0.01%)</title><rect x="57.1568%" y="69" width="0.0114%" height="15" fill="rgb(251,22,52)" fg:x="29965" fg:w="6"/><text x="57.4068%" y="79.50"></text></g><g><title>tailcall`mi_page_fresh_alloc (25 samples, 0.05%)</title><rect x="57.1224%" y="165" width="0.0477%" height="15" fill="rgb(229,209,22)" fg:x="29947" fg:w="25"/><text x="57.3724%" y="175.50"></text></g><g><title>tailcall`mi_segments_page_alloc (25 samples, 0.05%)</title><rect x="57.1224%" y="149" width="0.0477%" height="15" fill="rgb(234,138,34)" fg:x="29947" fg:w="25"/><text x="57.3724%" y="159.50"></text></g><g><title>tailcall`mi_segment_try_purge (10 samples, 0.02%)</title><rect x="57.1510%" y="133" width="0.0191%" height="15" fill="rgb(212,95,11)" fg:x="29962" fg:w="10"/><text x="57.4010%" y="143.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (10 samples, 0.02%)</title><rect x="57.1510%" y="117" width="0.0191%" height="15" fill="rgb(240,179,47)" fg:x="29962" fg:w="10"/><text x="57.4010%" y="127.50"></text></g><g><title>libsystem_c.dylib`_mach_boottime_usec (10 samples, 0.02%)</title><rect x="57.1510%" y="101" width="0.0191%" height="15" fill="rgb(240,163,11)" fg:x="29962" fg:w="10"/><text x="57.4010%" y="111.50"></text></g><g><title>tailcall`mi_find_page (67 samples, 0.13%)</title><rect x="57.0480%" y="181" width="0.1278%" height="15" fill="rgb(236,37,12)" fg:x="29908" fg:w="67"/><text x="57.2980%" y="191.50"></text></g><g><title>tailcall`_mi_malloc_generic (112 samples, 0.21%)</title><rect x="56.9641%" y="197" width="0.2136%" height="15" fill="rgb(232,164,16)" fg:x="29864" fg:w="112"/><text x="57.2141%" y="207.50"></text></g><g><title>tailcall`_mi_heap_realloc_zero (122 samples, 0.23%)</title><rect x="56.9469%" y="213" width="0.2327%" height="15" fill="rgb(244,205,15)" fg:x="29855" fg:w="122"/><text x="57.1969%" y="223.50"></text></g><g><title>tailcall`&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (1,436 samples, 2.74%)</title><rect x="54.4463%" y="261" width="2.7391%" height="15" fill="rgb(223,117,47)" fg:x="28544" fg:w="1436"/><text x="54.6963%" y="271.50">ta..</text></g><g><title>tailcall`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (232 samples, 0.44%)</title><rect x="56.7428%" y="245" width="0.4425%" height="15" fill="rgb(244,107,35)" fg:x="29748" fg:w="232"/><text x="56.9928%" y="255.50"></text></g><g><title>tailcall`alloc::raw_vec::finish_grow (220 samples, 0.42%)</title><rect x="56.7657%" y="229" width="0.4196%" height="15" fill="rgb(205,140,8)" fg:x="29760" fg:w="220"/><text x="57.0157%" y="239.50"></text></g><g><title>tailcall`ryu::pretty::format64 (365 samples, 0.70%)</title><rect x="57.3151%" y="245" width="0.6962%" height="15" fill="rgb(228,84,46)" fg:x="30048" fg:w="365"/><text x="57.5651%" y="255.50"></text></g><g><title>tailcall`&lt;serde_json::number::Number as serde::ser::Serialize&gt;::serialize (447 samples, 0.85%)</title><rect x="57.1854%" y="261" width="0.8526%" height="15" fill="rgb(254,188,9)" fg:x="29980" fg:w="447"/><text x="57.4354%" y="271.50"></text></g><g><title>tailcall`ryu::pretty::mantissa::write_mantissa_long (14 samples, 0.03%)</title><rect x="58.0113%" y="245" width="0.0267%" height="15" fill="rgb(206,112,54)" fg:x="30413" fg:w="14"/><text x="58.2613%" y="255.50"></text></g><g><title>tailcall`DYLD-STUB$$memcpy (30 samples, 0.06%)</title><rect x="58.0380%" y="261" width="0.0572%" height="15" fill="rgb(216,84,49)" fg:x="30427" fg:w="30"/><text x="58.2880%" y="271.50"></text></g><g><title>tailcall`async_graphql_value::value_serde::_&lt;impl serde::ser::Serialize for async_graphql_value::ConstValue&gt;::serialize (79 samples, 0.15%)</title><rect x="58.0971%" y="261" width="0.1507%" height="15" fill="rgb(214,194,35)" fg:x="30458" fg:w="79"/><text x="58.3471%" y="271.50"></text></g><g><title>tailcall`async_graphql::response::_::_&lt;impl serde::ser::Serialize for async_graphql::response::Response&gt;::serialize (2,414 samples, 4.60%)</title><rect x="53.6509%" y="389" width="4.6046%" height="15" fill="rgb(249,28,3)" fg:x="28127" fg:w="2414"/><text x="53.9009%" y="399.50">tailc..</text></g><g><title>tailcall`async_graphql_value::value_serde::_&lt;impl serde::ser::Serialize for async_graphql_value::ConstValue&gt;::serialize (2,413 samples, 4.60%)</title><rect x="53.6528%" y="373" width="4.6027%" height="15" fill="rgb(222,56,52)" fg:x="28128" fg:w="2413"/><text x="53.9028%" y="383.50">tailc..</text></g><g><title>tailcall`async_graphql_value::value_serde::_&lt;impl serde::ser::Serialize for async_graphql_value::ConstValue&gt;::serialize (2,411 samples, 4.60%)</title><rect x="53.6566%" y="357" width="4.5989%" height="15" fill="rgb(245,217,50)" fg:x="28130" fg:w="2411"/><text x="53.9066%" y="367.50">tailc..</text></g><g><title>tailcall`async_graphql_value::value_serde::_&lt;impl serde::ser::Serialize for async_graphql_value::ConstValue&gt;::serialize (2,409 samples, 4.60%)</title><rect x="53.6604%" y="341" width="4.5950%" height="15" fill="rgb(213,201,24)" fg:x="28132" fg:w="2409"/><text x="53.9104%" y="351.50">tailc..</text></g><g><title>tailcall`async_graphql_value::value_serde::_&lt;impl serde::ser::Serialize for async_graphql_value::ConstValue&gt;::serialize (2,406 samples, 4.59%)</title><rect x="53.6661%" y="325" width="4.5893%" height="15" fill="rgb(248,116,28)" fg:x="28135" fg:w="2406"/><text x="53.9161%" y="335.50">tailc..</text></g><g><title>tailcall`async_graphql_value::value_serde::_&lt;impl serde::ser::Serialize for async_graphql_value::ConstValue&gt;::serialize (2,402 samples, 4.58%)</title><rect x="53.6737%" y="309" width="4.5817%" height="15" fill="rgb(219,72,43)" fg:x="28139" fg:w="2402"/><text x="53.9237%" y="319.50">tailc..</text></g><g><title>tailcall`async_graphql_value::value_serde::_&lt;impl serde::ser::Serialize for async_graphql_value::ConstValue&gt;::serialize (2,390 samples, 4.56%)</title><rect x="53.6966%" y="293" width="4.5588%" height="15" fill="rgb(209,138,14)" fg:x="28151" fg:w="2390"/><text x="53.9466%" y="303.50">tailc..</text></g><g><title>tailcall`async_graphql_value::value_serde::_&lt;impl serde::ser::Serialize for async_graphql_value::ConstValue&gt;::serialize (2,295 samples, 4.38%)</title><rect x="53.8778%" y="277" width="4.3776%" height="15" fill="rgb(222,18,33)" fg:x="28246" fg:w="2295"/><text x="54.1278%" y="287.50">tailc..</text></g><g><title>tailcall`alloc::sync::Arc&lt;T,A&gt;::drop_slow (47 samples, 0.09%)</title><rect x="58.2822%" y="277" width="0.0897%" height="15" fill="rgb(213,199,7)" fg:x="30555" fg:w="47"/><text x="58.5322%" y="287.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (45 samples, 0.09%)</title><rect x="58.5091%" y="261" width="0.0858%" height="15" fill="rgb(250,110,10)" fg:x="30674" fg:w="45"/><text x="58.7591%" y="271.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (120 samples, 0.23%)</title><rect x="58.3718%" y="277" width="0.2289%" height="15" fill="rgb(248,123,6)" fg:x="30602" fg:w="120"/><text x="58.6218%" y="287.50"></text></g><g><title>tailcall`mi_free (110 samples, 0.21%)</title><rect x="58.6007%" y="277" width="0.2098%" height="15" fill="rgb(206,91,31)" fg:x="30722" fg:w="110"/><text x="58.8507%" y="287.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (290 samples, 0.55%)</title><rect x="58.2612%" y="293" width="0.5532%" height="15" fill="rgb(211,154,13)" fg:x="30544" fg:w="290"/><text x="58.5112%" y="303.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (292 samples, 0.56%)</title><rect x="58.2612%" y="309" width="0.5570%" height="15" fill="rgb(225,148,7)" fg:x="30544" fg:w="292"/><text x="58.5112%" y="319.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (299 samples, 0.57%)</title><rect x="58.2574%" y="325" width="0.5703%" height="15" fill="rgb(220,160,43)" fg:x="30542" fg:w="299"/><text x="58.5074%" y="335.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (302 samples, 0.58%)</title><rect x="58.2554%" y="357" width="0.5761%" height="15" fill="rgb(213,52,39)" fg:x="30541" fg:w="302"/><text x="58.5054%" y="367.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (301 samples, 0.57%)</title><rect x="58.2574%" y="341" width="0.5741%" height="15" fill="rgb(243,137,7)" fg:x="30542" fg:w="301"/><text x="58.5074%" y="351.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (303 samples, 0.58%)</title><rect x="58.2554%" y="373" width="0.5780%" height="15" fill="rgb(230,79,13)" fg:x="30541" fg:w="303"/><text x="58.5054%" y="383.50"></text></g><g><title>tailcall`&lt;tailcall::core::jit::response::AnyResponse&lt;alloc::vec::Vec&lt;u8&gt;&gt; as core::convert::From&lt;async_graphql::response::Response&gt;&gt;::from (2,718 samples, 5.18%)</title><rect x="53.6509%" y="405" width="5.1845%" height="15" fill="rgb(247,105,23)" fg:x="28127" fg:w="2718"/><text x="53.9009%" y="415.50">tailca..</text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql::response::Response&gt; (304 samples, 0.58%)</title><rect x="58.2554%" y="389" width="0.5799%" height="15" fill="rgb(223,179,41)" fg:x="30541" fg:w="304"/><text x="58.5054%" y="399.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;[tailcall::core::jit::model::Field&lt;async_graphql_value::ConstValue&gt;]&gt; (11 samples, 0.02%)</title><rect x="58.8487%" y="357" width="0.0210%" height="15" fill="rgb(218,9,34)" fg:x="30852" fg:w="11"/><text x="59.0987%" y="367.50"></text></g><g><title>tailcall`mi_free (7 samples, 0.01%)</title><rect x="58.8735%" y="357" width="0.0134%" height="15" fill="rgb(222,106,8)" fg:x="30865" fg:w="7"/><text x="59.1235%" y="367.50"></text></g><g><title>tailcall`mi_free_block_delayed_mt (8 samples, 0.02%)</title><rect x="58.8868%" y="357" width="0.0153%" height="15" fill="rgb(211,220,0)" fg:x="30872" fg:w="8"/><text x="59.1368%" y="367.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;[tailcall::core::jit::model::Field&lt;async_graphql_value::ConstValue&gt;]&gt; (33 samples, 0.06%)</title><rect x="58.8468%" y="373" width="0.0629%" height="15" fill="rgb(229,52,16)" fg:x="30851" fg:w="33"/><text x="59.0968%" y="383.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;[tailcall::core::jit::model::Field&lt;async_graphql_value::ConstValue&gt;]&gt; (38 samples, 0.07%)</title><rect x="58.8468%" y="389" width="0.0725%" height="15" fill="rgb(212,155,18)" fg:x="30851" fg:w="38"/><text x="59.0968%" y="399.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;tailcall::core::ir::model::IO&gt; (10 samples, 0.02%)</title><rect x="58.9192%" y="389" width="0.0191%" height="15" fill="rgb(242,21,14)" fg:x="30889" fg:w="10"/><text x="59.1692%" y="399.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;[tailcall::core::jit::model::Field&lt;async_graphql_value::ConstValue&gt;]&gt; (58 samples, 0.11%)</title><rect x="58.8468%" y="405" width="0.1106%" height="15" fill="rgb(222,19,48)" fg:x="30851" fg:w="58"/><text x="59.0968%" y="415.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (175 samples, 0.33%)</title><rect x="59.0013%" y="309" width="0.3338%" height="15" fill="rgb(232,45,27)" fg:x="30932" fg:w="175"/><text x="59.2513%" y="319.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (52 samples, 0.10%)</title><rect x="59.2359%" y="293" width="0.0992%" height="15" fill="rgb(249,103,42)" fg:x="31055" fg:w="52"/><text x="59.4859%" y="303.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (228 samples, 0.43%)</title><rect x="58.9822%" y="325" width="0.4349%" height="15" fill="rgb(246,81,33)" fg:x="30922" fg:w="228"/><text x="59.2322%" y="335.50"></text></g><g><title>tailcall`mi_free (43 samples, 0.08%)</title><rect x="59.3351%" y="309" width="0.0820%" height="15" fill="rgb(252,33,42)" fg:x="31107" fg:w="43"/><text x="59.5851%" y="319.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (241 samples, 0.46%)</title><rect x="58.9746%" y="341" width="0.4597%" height="15" fill="rgb(209,212,41)" fg:x="30918" fg:w="241"/><text x="59.2246%" y="351.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (248 samples, 0.47%)</title><rect x="58.9669%" y="373" width="0.4730%" height="15" fill="rgb(207,154,6)" fg:x="30914" fg:w="248"/><text x="59.2169%" y="383.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (247 samples, 0.47%)</title><rect x="58.9688%" y="357" width="0.4711%" height="15" fill="rgb(223,64,47)" fg:x="30915" fg:w="247"/><text x="59.2188%" y="367.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;tailcall::core::jit::store::Store&lt;core::result::Result&lt;async_graphql_value::ConstValue,tailcall::core::jit::model::Positioned&lt;tailcall::core::jit::error::Error&gt;&gt;&gt;&gt; (252 samples, 0.48%)</title><rect x="58.9669%" y="405" width="0.4807%" height="15" fill="rgb(211,161,38)" fg:x="30914" fg:w="252"/><text x="59.2169%" y="415.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (252 samples, 0.48%)</title><rect x="58.9669%" y="389" width="0.4807%" height="15" fill="rgb(219,138,40)" fg:x="30914" fg:w="252"/><text x="59.2169%" y="399.50"></text></g><g><title>tailcall`mi_free (6 samples, 0.01%)</title><rect x="59.4495%" y="405" width="0.0114%" height="15" fill="rgb(241,228,46)" fg:x="31167" fg:w="6"/><text x="59.6995%" y="415.50"></text></g><g><title>tailcall`mi_free_block_delayed_mt (11 samples, 0.02%)</title><rect x="59.4610%" y="405" width="0.0210%" height="15" fill="rgb(223,209,38)" fg:x="31173" fg:w="11"/><text x="59.7110%" y="415.50"></text></g><g><title>tailcall`tailcall::core::jit::context::Context&lt;Input,Output&gt;::build_args (17 samples, 0.03%)</title><rect x="59.4877%" y="405" width="0.0324%" height="15" fill="rgb(236,164,45)" fg:x="31187" fg:w="17"/><text x="59.7377%" y="415.50"></text></g><g><title>tailcall`indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (13 samples, 0.02%)</title><rect x="59.4953%" y="389" width="0.0248%" height="15" fill="rgb(231,15,5)" fg:x="31191" fg:w="13"/><text x="59.7453%" y="399.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::enter (13 samples, 0.02%)</title><rect x="59.5525%" y="373" width="0.0248%" height="15" fill="rgb(252,35,15)" fg:x="31221" fg:w="13"/><text x="59.8025%" y="383.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::is_enabled_inner (6 samples, 0.01%)</title><rect x="59.5659%" y="357" width="0.0114%" height="15" fill="rgb(248,181,18)" fg:x="31228" fg:w="6"/><text x="59.8159%" y="367.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (6 samples, 0.01%)</title><rect x="59.5792%" y="357" width="0.0114%" height="15" fill="rgb(233,39,42)" fg:x="31235" fg:w="6"/><text x="59.8292%" y="367.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::exit (12 samples, 0.02%)</title><rect x="59.5773%" y="373" width="0.0229%" height="15" fill="rgb(238,110,33)" fg:x="31234" fg:w="12"/><text x="59.8273%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (6 samples, 0.01%)</title><rect x="59.6879%" y="261" width="0.0114%" height="15" fill="rgb(233,195,10)" fg:x="31292" fg:w="6"/><text x="59.9379%" y="271.50"></text></g><g><title>tailcall`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone_from (9 samples, 0.02%)</title><rect x="59.7929%" y="229" width="0.0172%" height="15" fill="rgb(254,105,3)" fg:x="31347" fg:w="9"/><text x="60.0429%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (11 samples, 0.02%)</title><rect x="59.8348%" y="213" width="0.0210%" height="15" fill="rgb(221,225,9)" fg:x="31369" fg:w="11"/><text x="60.0848%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (65 samples, 0.12%)</title><rect x="60.5272%" y="197" width="0.1240%" height="15" fill="rgb(224,227,45)" fg:x="31732" fg:w="65"/><text x="60.7772%" y="207.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (19 samples, 0.04%)</title><rect x="61.0651%" y="181" width="0.0362%" height="15" fill="rgb(229,198,43)" fg:x="32014" fg:w="19"/><text x="61.3151%" y="191.50"></text></g><g><title>tailcall`mi_page_fresh_alloc (6 samples, 0.01%)</title><rect x="61.1338%" y="133" width="0.0114%" height="15" fill="rgb(206,209,35)" fg:x="32050" fg:w="6"/><text x="61.3838%" y="143.50"></text></g><g><title>tailcall`mi_segments_page_alloc (6 samples, 0.01%)</title><rect x="61.1338%" y="117" width="0.0114%" height="15" fill="rgb(245,195,53)" fg:x="32050" fg:w="6"/><text x="61.3838%" y="127.50"></text></g><g><title>tailcall`mi_find_page (17 samples, 0.03%)</title><rect x="61.1147%" y="149" width="0.0324%" height="15" fill="rgb(240,92,26)" fg:x="32040" fg:w="17"/><text x="61.3647%" y="159.50"></text></g><g><title>tailcall`mi_page_free_list_extend (10 samples, 0.02%)</title><rect x="61.1471%" y="149" width="0.0191%" height="15" fill="rgb(207,40,23)" fg:x="32057" fg:w="10"/><text x="61.3971%" y="159.50"></text></g><g><title>tailcall`_mi_malloc_generic (36 samples, 0.07%)</title><rect x="61.1014%" y="165" width="0.0687%" height="15" fill="rgb(223,111,35)" fg:x="32033" fg:w="36"/><text x="61.3514%" y="175.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (38 samples, 0.07%)</title><rect x="61.1014%" y="181" width="0.0725%" height="15" fill="rgb(229,147,28)" fg:x="32033" fg:w="38"/><text x="61.3514%" y="191.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as core::clone::Clone&gt;::clone (336 samples, 0.64%)</title><rect x="60.6512%" y="197" width="0.6409%" height="15" fill="rgb(211,29,28)" fg:x="31797" fg:w="336"/><text x="60.9012%" y="207.50"></text></g><g><title>tailcall`mi_malloc_aligned (62 samples, 0.12%)</title><rect x="61.1738%" y="181" width="0.1183%" height="15" fill="rgb(228,72,33)" fg:x="32071" fg:w="62"/><text x="61.4238%" y="191.50"></text></g><g><title>tailcall`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone_from (781 samples, 1.49%)</title><rect x="59.8558%" y="213" width="1.4897%" height="15" fill="rgb(205,214,31)" fg:x="31380" fg:w="781"/><text x="60.1058%" y="223.50"></text></g><g><title>tailcall`mi_malloc_aligned (22 samples, 0.04%)</title><rect x="61.3036%" y="197" width="0.0420%" height="15" fill="rgb(224,111,15)" fg:x="32139" fg:w="22"/><text x="61.5536%" y="207.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as core::clone::Clone&gt;::clone (243 samples, 0.46%)</title><rect x="61.3455%" y="213" width="0.4635%" height="15" fill="rgb(253,21,26)" fg:x="32161" fg:w="243"/><text x="61.5955%" y="223.50"></text></g><g><title>tailcall`core::clone::Clone::clone_from (221 samples, 0.42%)</title><rect x="61.8147%" y="213" width="0.4215%" height="15" fill="rgb(245,139,43)" fg:x="32407" fg:w="221"/><text x="62.0647%" y="223.50"></text></g><g><title>tailcall`mi_malloc_aligned (7 samples, 0.01%)</title><rect x="62.2229%" y="197" width="0.0134%" height="15" fill="rgb(252,170,7)" fg:x="32621" fg:w="7"/><text x="62.4729%" y="207.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (12 samples, 0.02%)</title><rect x="62.2516%" y="181" width="0.0229%" height="15" fill="rgb(231,118,14)" fg:x="32636" fg:w="12"/><text x="62.5016%" y="191.50"></text></g><g><title>tailcall`_mi_free_delayed_block (49 samples, 0.09%)</title><rect x="62.3317%" y="149" width="0.0935%" height="15" fill="rgb(238,83,0)" fg:x="32678" fg:w="49"/><text x="62.5817%" y="159.50"></text></g><g><title>tailcall`mi_segment_span_allocate (9 samples, 0.02%)</title><rect x="62.5186%" y="101" width="0.0172%" height="15" fill="rgb(221,39,39)" fg:x="32776" fg:w="9"/><text x="62.7686%" y="111.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (8 samples, 0.02%)</title><rect x="62.5205%" y="85" width="0.0153%" height="15" fill="rgb(222,119,46)" fg:x="32777" fg:w="8"/><text x="62.7705%" y="95.50"></text></g><g><title>libsystem_c.dylib`_mach_boottime_usec (8 samples, 0.02%)</title><rect x="62.5205%" y="69" width="0.0153%" height="15" fill="rgb(222,165,49)" fg:x="32777" fg:w="8"/><text x="62.7705%" y="79.50"></text></g><g><title>libsystem_c.dylib`gettimeofday (8 samples, 0.02%)</title><rect x="62.5205%" y="53" width="0.0153%" height="15" fill="rgb(219,113,52)" fg:x="32777" fg:w="8"/><text x="62.7705%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (7 samples, 0.01%)</title><rect x="62.5224%" y="37" width="0.0134%" height="15" fill="rgb(214,7,15)" fg:x="32778" fg:w="7"/><text x="62.7724%" y="47.50"></text></g><g><title>tailcall`mi_page_fresh_alloc (19 samples, 0.04%)</title><rect x="62.5091%" y="133" width="0.0362%" height="15" fill="rgb(235,32,4)" fg:x="32771" fg:w="19"/><text x="62.7591%" y="143.50"></text></g><g><title>tailcall`mi_segments_page_alloc (18 samples, 0.03%)</title><rect x="62.5110%" y="117" width="0.0343%" height="15" fill="rgb(238,90,54)" fg:x="32772" fg:w="18"/><text x="62.7610%" y="127.50"></text></g><g><title>tailcall`mi_find_page (65 samples, 0.12%)</title><rect x="62.4270%" y="149" width="0.1240%" height="15" fill="rgb(213,208,19)" fg:x="32728" fg:w="65"/><text x="62.6770%" y="159.50"></text></g><g><title>tailcall`_mi_malloc_generic (142 samples, 0.27%)</title><rect x="62.2935%" y="165" width="0.2709%" height="15" fill="rgb(233,156,4)" fg:x="32658" fg:w="142"/><text x="62.5435%" y="175.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (151 samples, 0.29%)</title><rect x="62.2840%" y="181" width="0.2880%" height="15" fill="rgb(207,194,5)" fg:x="32653" fg:w="151"/><text x="62.5340%" y="191.50"></text></g><g><title>tailcall`alloc::raw_vec::finish_grow (175 samples, 0.33%)</title><rect x="62.2477%" y="197" width="0.3338%" height="15" fill="rgb(206,111,30)" fg:x="32634" fg:w="175"/><text x="62.4977%" y="207.50"></text></g><g><title>tailcall`indexmap::map::core::RefMut&lt;K,V&gt;::reserve_entries (189 samples, 0.36%)</title><rect x="62.2363%" y="213" width="0.3605%" height="15" fill="rgb(243,70,54)" fg:x="32628" fg:w="189"/><text x="62.4863%" y="223.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as core::clone::Clone&gt;::clone (1,463 samples, 2.79%)</title><rect x="59.8100%" y="229" width="2.7906%" height="15" fill="rgb(242,28,8)" fg:x="31356" fg:w="1463"/><text x="60.0600%" y="239.50">ta..</text></g><g><title>tailcall`indexmap::map::core::RefMut&lt;K,V&gt;::reserve_entries (6 samples, 0.01%)</title><rect x="62.6063%" y="229" width="0.0114%" height="15" fill="rgb(219,106,18)" fg:x="32822" fg:w="6"/><text x="62.8563%" y="239.50"></text></g><g><title>tailcall`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone_from (1,532 samples, 2.92%)</title><rect x="59.6994%" y="261" width="2.9222%" height="15" fill="rgb(244,222,10)" fg:x="31298" fg:w="1532"/><text x="59.9494%" y="271.50">ta..</text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as core::clone::Clone&gt;::clone (1,517 samples, 2.89%)</title><rect x="59.7280%" y="245" width="2.8936%" height="15" fill="rgb(236,179,52)" fg:x="31313" fg:w="1517"/><text x="59.9780%" y="255.50">ta..</text></g><g><title>tailcall`core::clone::Clone::clone_from (9 samples, 0.02%)</title><rect x="62.6254%" y="261" width="0.0172%" height="15" fill="rgb(213,23,39)" fg:x="32832" fg:w="9"/><text x="62.8754%" y="271.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as core::clone::Clone&gt;::clone (1,567 samples, 2.99%)</title><rect x="59.6727%" y="277" width="2.9890%" height="15" fill="rgb(238,48,10)" fg:x="31284" fg:w="1567"/><text x="59.9227%" y="287.50">tai..</text></g><g><title>tailcall`indexmap::map::core::RefMut&lt;K,V&gt;::reserve_entries (10 samples, 0.02%)</title><rect x="62.6426%" y="261" width="0.0191%" height="15" fill="rgb(251,196,23)" fg:x="32841" fg:w="10"/><text x="62.8926%" y="271.50"></text></g><g><title>tailcall`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone_from (1,581 samples, 3.02%)</title><rect x="59.6536%" y="309" width="3.0157%" height="15" fill="rgb(250,152,24)" fg:x="31274" fg:w="1581"/><text x="59.9036%" y="319.50">tai..</text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as core::clone::Clone&gt;::clone (1,580 samples, 3.01%)</title><rect x="59.6555%" y="293" width="3.0138%" height="15" fill="rgb(209,150,17)" fg:x="31275" fg:w="1580"/><text x="59.9055%" y="303.50">tai..</text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as core::clone::Clone&gt;::clone (1,588 samples, 3.03%)</title><rect x="59.6517%" y="325" width="3.0290%" height="15" fill="rgb(234,202,34)" fg:x="31273" fg:w="1588"/><text x="59.9017%" y="335.50">tai..</text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as core::clone::Clone&gt;::clone (1,591 samples, 3.03%)</title><rect x="59.6517%" y="341" width="3.0348%" height="15" fill="rgb(253,148,53)" fg:x="31273" fg:w="1591"/><text x="59.9017%" y="351.50">tai..</text></g><g><title>tailcall`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (6 samples, 0.01%)</title><rect x="62.7322%" y="277" width="0.0114%" height="15" fill="rgb(218,129,16)" fg:x="32888" fg:w="6"/><text x="62.9822%" y="287.50"></text></g><g><title>tailcall`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (6 samples, 0.01%)</title><rect x="62.7322%" y="261" width="0.0114%" height="15" fill="rgb(216,85,19)" fg:x="32888" fg:w="6"/><text x="62.9822%" y="271.50"></text></g><g><title>tailcall`alloc::fmt::format::format_inner (15 samples, 0.03%)</title><rect x="62.7208%" y="309" width="0.0286%" height="15" fill="rgb(235,228,7)" fg:x="32882" fg:w="15"/><text x="62.9708%" y="319.50"></text></g><g><title>tailcall`core::fmt::write (14 samples, 0.03%)</title><rect x="62.7227%" y="293" width="0.0267%" height="15" fill="rgb(245,175,0)" fg:x="32883" fg:w="14"/><text x="62.9727%" y="303.50"></text></g><g><title>tailcall`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (7 samples, 0.01%)</title><rect x="62.7723%" y="245" width="0.0134%" height="15" fill="rgb(208,168,36)" fg:x="32909" fg:w="7"/><text x="63.0223%" y="255.50"></text></g><g><title>tailcall`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (7 samples, 0.01%)</title><rect x="62.7723%" y="229" width="0.0134%" height="15" fill="rgb(246,171,24)" fg:x="32909" fg:w="7"/><text x="63.0223%" y="239.50"></text></g><g><title>tailcall`alloc::raw_vec::finish_grow (6 samples, 0.01%)</title><rect x="62.7742%" y="213" width="0.0114%" height="15" fill="rgb(215,142,24)" fg:x="32910" fg:w="6"/><text x="63.0242%" y="223.50"></text></g><g><title>tailcall`alloc::fmt::format::format_inner (12 samples, 0.02%)</title><rect x="62.7666%" y="277" width="0.0229%" height="15" fill="rgb(250,187,7)" fg:x="32906" fg:w="12"/><text x="63.0166%" y="287.50"></text></g><g><title>tailcall`core::fmt::write (10 samples, 0.02%)</title><rect x="62.7704%" y="261" width="0.0191%" height="15" fill="rgb(228,66,33)" fg:x="32908" fg:w="10"/><text x="63.0204%" y="271.50"></text></g><g><title>tailcall`tailcall::core::http::query_encoder::QueryEncoder::encode (24 samples, 0.05%)</title><rect x="62.7570%" y="309" width="0.0458%" height="15" fill="rgb(234,215,21)" fg:x="32901" fg:w="24"/><text x="63.0070%" y="319.50"></text></g><g><title>tailcall`tailcall::core::http::query_encoder::QueryEncoder::encode_const_value (21 samples, 0.04%)</title><rect x="62.7628%" y="293" width="0.0401%" height="15" fill="rgb(222,191,20)" fg:x="32904" fg:w="21"/><text x="63.0128%" y="303.50"></text></g><g><title>tailcall`tailcall::core::http::query_encoder::convert_value (7 samples, 0.01%)</title><rect x="62.7895%" y="277" width="0.0134%" height="15" fill="rgb(245,79,54)" fg:x="32918" fg:w="7"/><text x="63.0395%" y="287.50"></text></g><g><title>tailcall`tailcall::core::path::_&lt;impl tailcall::core::ir::eval_context::EvalContext&lt;Ctx&gt;&gt;::to_raw_value (9 samples, 0.02%)</title><rect x="62.8028%" y="309" width="0.0172%" height="15" fill="rgb(240,10,37)" fg:x="32925" fg:w="9"/><text x="63.0528%" y="319.50"></text></g><g><title>tailcall`url::host::Host::parse (9 samples, 0.02%)</title><rect x="62.8543%" y="277" width="0.0172%" height="15" fill="rgb(214,192,32)" fg:x="32952" fg:w="9"/><text x="63.1043%" y="287.50"></text></g><g><title>tailcall`url::ParseOptions::parse (38 samples, 0.07%)</title><rect x="62.8200%" y="309" width="0.0725%" height="15" fill="rgb(209,36,54)" fg:x="32934" fg:w="38"/><text x="63.0700%" y="319.50"></text></g><g><title>tailcall`url::parser::Parser::after_double_slash (36 samples, 0.07%)</title><rect x="62.8238%" y="293" width="0.0687%" height="15" fill="rgb(220,10,11)" fg:x="32936" fg:w="36"/><text x="63.0738%" y="303.50"></text></g><g><title>tailcall`url::parser::Parser::parse_path_start (10 samples, 0.02%)</title><rect x="62.8734%" y="277" width="0.0191%" height="15" fill="rgb(221,106,17)" fg:x="32962" fg:w="10"/><text x="63.1234%" y="287.50"></text></g><g><title>tailcall`url::parser::Parser::parse_path (7 samples, 0.01%)</title><rect x="62.8791%" y="261" width="0.0134%" height="15" fill="rgb(251,142,44)" fg:x="32965" fg:w="7"/><text x="63.1291%" y="271.50"></text></g><g><title>tailcall`tailcall::core::http::request_template::RequestTemplate::create_url (120 samples, 0.23%)</title><rect x="62.7017%" y="325" width="0.2289%" height="15" fill="rgb(238,13,15)" fg:x="32872" fg:w="120"/><text x="62.9517%" y="335.50"></text></g><g><title>tailcall`url::Url::set_query (20 samples, 0.04%)</title><rect x="62.8925%" y="309" width="0.0381%" height="15" fill="rgb(208,107,27)" fg:x="32972" fg:w="20"/><text x="63.1425%" y="319.50"></text></g><g><title>tailcall`url::parser::Parser::parse_query (7 samples, 0.01%)</title><rect x="62.9173%" y="293" width="0.0134%" height="15" fill="rgb(205,136,37)" fg:x="32985" fg:w="7"/><text x="63.1673%" y="303.50"></text></g><g><title>tailcall`&lt;tailcall::core::ir::model::IO as tailcall::core::ir::model::CacheKey&lt;tailcall::core::ir::eval_context::EvalContext&lt;Ctx&gt;&gt;&gt;::cache_key (127 samples, 0.24%)</title><rect x="62.6903%" y="341" width="0.2422%" height="15" fill="rgb(250,205,27)" fg:x="32866" fg:w="127"/><text x="62.9403%" y="351.50"></text></g><g><title>tailcall`_mi_page_free (8 samples, 0.02%)</title><rect x="62.9783%" y="261" width="0.0153%" height="15" fill="rgb(210,80,43)" fg:x="33017" fg:w="8"/><text x="63.2283%" y="271.50"></text></g><g><title>tailcall`mi_segment_page_clear (8 samples, 0.02%)</title><rect x="62.9783%" y="245" width="0.0153%" height="15" fill="rgb(247,160,36)" fg:x="33017" fg:w="8"/><text x="63.2283%" y="255.50"></text></g><g><title>tailcall`mi_segment_span_free_coalesce (6 samples, 0.01%)</title><rect x="62.9821%" y="229" width="0.0114%" height="15" fill="rgb(234,13,49)" fg:x="33019" fg:w="6"/><text x="63.2321%" y="239.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (44 samples, 0.08%)</title><rect x="63.3350%" y="245" width="0.0839%" height="15" fill="rgb(234,122,0)" fg:x="33204" fg:w="44"/><text x="63.5850%" y="255.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (227 samples, 0.43%)</title><rect x="62.9936%" y="261" width="0.4330%" height="15" fill="rgb(207,146,38)" fg:x="33025" fg:w="227"/><text x="63.2436%" y="271.50"></text></g><g><title>tailcall`mi_free (42 samples, 0.08%)</title><rect x="63.4265%" y="261" width="0.0801%" height="15" fill="rgb(207,177,25)" fg:x="33252" fg:w="42"/><text x="63.6765%" y="271.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (298 samples, 0.57%)</title><rect x="62.9516%" y="277" width="0.5684%" height="15" fill="rgb(211,178,42)" fg:x="33003" fg:w="298"/><text x="63.2016%" y="287.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (304 samples, 0.58%)</title><rect x="62.9497%" y="293" width="0.5799%" height="15" fill="rgb(230,69,54)" fg:x="33002" fg:w="304"/><text x="63.1997%" y="303.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (309 samples, 0.59%)</title><rect x="62.9421%" y="341" width="0.5894%" height="15" fill="rgb(214,135,41)" fg:x="32998" fg:w="309"/><text x="63.1921%" y="351.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (308 samples, 0.59%)</title><rect x="62.9440%" y="325" width="0.5875%" height="15" fill="rgb(237,67,25)" fg:x="32999" fg:w="308"/><text x="63.1940%" y="335.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (306 samples, 0.58%)</title><rect x="62.9478%" y="309" width="0.5837%" height="15" fill="rgb(222,189,50)" fg:x="33001" fg:w="306"/><text x="63.1978%" y="319.50"></text></g><g><title>tailcall`tailcall::core::data_loader::dedupe::Dedupe&lt;K,V&gt;::step (18 samples, 0.03%)</title><rect x="63.5372%" y="341" width="0.0343%" height="15" fill="rgb(245,148,34)" fg:x="33310" fg:w="18"/><text x="63.7872%" y="351.50"></text></g><g><title>tailcall`tailcall::core::http::query_encoder::QueryEncoder::encode (6 samples, 0.01%)</title><rect x="63.6001%" y="309" width="0.0114%" height="15" fill="rgb(222,29,6)" fg:x="33343" fg:w="6"/><text x="63.8501%" y="319.50"></text></g><g><title>tailcall`url::ParseOptions::parse (13 samples, 0.02%)</title><rect x="63.6192%" y="309" width="0.0248%" height="15" fill="rgb(221,189,43)" fg:x="33353" fg:w="13"/><text x="63.8692%" y="319.50"></text></g><g><title>tailcall`url::parser::Parser::after_double_slash (12 samples, 0.02%)</title><rect x="63.6211%" y="293" width="0.0229%" height="15" fill="rgb(207,36,27)" fg:x="33354" fg:w="12"/><text x="63.8711%" y="303.50"></text></g><g><title>tailcall`url::parser::Parser::parse_path_start (6 samples, 0.01%)</title><rect x="63.6325%" y="277" width="0.0114%" height="15" fill="rgb(217,90,24)" fg:x="33360" fg:w="6"/><text x="63.8825%" y="287.50"></text></g><g><title>tailcall`tailcall::core::http::request_template::RequestTemplate::create_url (36 samples, 0.07%)</title><rect x="63.5887%" y="325" width="0.0687%" height="15" fill="rgb(224,66,35)" fg:x="33337" fg:w="36"/><text x="63.8387%" y="335.50"></text></g><g><title>tailcall`url::Url::set_query (7 samples, 0.01%)</title><rect x="63.6440%" y="309" width="0.0134%" height="15" fill="rgb(221,13,50)" fg:x="33366" fg:w="7"/><text x="63.8940%" y="319.50"></text></g><g><title>tailcall`&lt;hyper::client::pool::Checkout&lt;T&gt; as core::future::future::Future&gt;::poll (8 samples, 0.02%)</title><rect x="63.7794%" y="213" width="0.0153%" height="15" fill="rgb(236,68,49)" fg:x="33437" fg:w="8"/><text x="64.0294%" y="223.50"></text></g><g><title>tailcall`hyper::client::client::Client&lt;C,B&gt;::retryably_send_request::_{{closure}} (56 samples, 0.11%)</title><rect x="63.7375%" y="229" width="0.1068%" height="15" fill="rgb(229,146,28)" fg:x="33415" fg:w="56"/><text x="63.9875%" y="239.50"></text></g><g><title>tailcall`&lt;reqwest::async_impl::client::PendingRequest as core::future::future::Future&gt;::poll (76 samples, 0.14%)</title><rect x="63.7088%" y="245" width="0.1450%" height="15" fill="rgb(225,31,38)" fg:x="33400" fg:w="76"/><text x="63.9588%" y="255.50"></text></g><g><title>tailcall`http::uri::Uri::from_shared (6 samples, 0.01%)</title><rect x="63.8977%" y="213" width="0.0114%" height="15" fill="rgb(250,208,3)" fg:x="33499" fg:w="6"/><text x="64.1477%" y="223.50"></text></g><g><title>tailcall`reqwest::into_url::try_uri (11 samples, 0.02%)</title><rect x="63.8977%" y="229" width="0.0210%" height="15" fill="rgb(246,54,23)" fg:x="33499" fg:w="11"/><text x="64.1477%" y="239.50"></text></g><g><title>tailcall`reqwest_middleware::middleware::Next::run::_{{closure}} (117 samples, 0.22%)</title><rect x="63.7031%" y="261" width="0.2232%" height="15" fill="rgb(243,76,11)" fg:x="33397" fg:w="117"/><text x="63.9531%" y="271.50"></text></g><g><title>tailcall`reqwest::async_impl::client::Client::execute_request (31 samples, 0.06%)</title><rect x="63.8672%" y="245" width="0.0591%" height="15" fill="rgb(245,21,50)" fg:x="33483" fg:w="31"/><text x="64.1172%" y="255.50"></text></g><g><title>tailcall`&lt;tailcall::cli::runtime::http::NativeHttp as tailcall::core::HttpIO&gt;::execute::_{{closure}}::_{{closure}} (132 samples, 0.25%)</title><rect x="63.6783%" y="277" width="0.2518%" height="15" fill="rgb(228,9,43)" fg:x="33384" fg:w="132"/><text x="63.9283%" y="287.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::enter (7 samples, 0.01%)</title><rect x="63.9301%" y="277" width="0.0134%" height="15" fill="rgb(208,100,47)" fg:x="33516" fg:w="7"/><text x="64.1801%" y="287.50"></text></g><g><title>tailcall`&lt;tailcall::cli::runtime::http::NativeHttp as tailcall::core::HttpIO&gt;::execute::_{{closure}} (157 samples, 0.30%)</title><rect x="63.6707%" y="293" width="0.2995%" height="15" fill="rgb(232,26,8)" fg:x="33380" fg:w="157"/><text x="63.9207%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (46 samples, 0.09%)</title><rect x="64.3250%" y="181" width="0.0877%" height="15" fill="rgb(216,166,38)" fg:x="33723" fg:w="46"/><text x="64.5750%" y="191.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as tailcall::core::http::response::FromValue&gt;::from_value (19 samples, 0.04%)</title><rect x="64.4146%" y="181" width="0.0362%" height="15" fill="rgb(251,202,51)" fg:x="33770" fg:w="19"/><text x="64.6646%" y="191.50"></text></g><g><title>tailcall`DYLD-STUB$$memcpy (11 samples, 0.02%)</title><rect x="64.4528%" y="181" width="0.0210%" height="15" fill="rgb(254,216,34)" fg:x="33790" fg:w="11"/><text x="64.7028%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (9 samples, 0.02%)</title><rect x="64.5252%" y="165" width="0.0172%" height="15" fill="rgb(251,32,27)" fg:x="33828" fg:w="9"/><text x="64.7752%" y="175.50"></text></g><g><title>tailcall`async_graphql_value::Name::new (72 samples, 0.14%)</title><rect x="64.4737%" y="181" width="0.1373%" height="15" fill="rgb(208,127,28)" fg:x="33801" fg:w="72"/><text x="64.7237%" y="191.50"></text></g><g><title>tailcall`mi_malloc_aligned (34 samples, 0.06%)</title><rect x="64.5462%" y="165" width="0.0649%" height="15" fill="rgb(224,137,22)" fg:x="33839" fg:w="34"/><text x="64.7962%" y="175.50"></text></g><g><title>tailcall`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (139 samples, 0.27%)</title><rect x="64.8190%" y="165" width="0.2651%" height="15" fill="rgb(254,70,32)" fg:x="33982" fg:w="139"/><text x="65.0690%" y="175.50"></text></g><g><title>tailcall`indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (312 samples, 0.60%)</title><rect x="64.6206%" y="181" width="0.5951%" height="15" fill="rgb(229,75,37)" fg:x="33878" fg:w="312"/><text x="64.8706%" y="191.50"></text></g><g><title>tailcall`indexmap::map::IndexMap&lt;K,V,S&gt;::hash (69 samples, 0.13%)</title><rect x="65.0841%" y="165" width="0.1316%" height="15" fill="rgb(252,64,23)" fg:x="34121" fg:w="69"/><text x="65.3341%" y="175.50"></text></g><g><title>tailcall`mi_free (34 samples, 0.06%)</title><rect x="65.2157%" y="181" width="0.0649%" height="15" fill="rgb(232,162,48)" fg:x="34190" fg:w="34"/><text x="65.4657%" y="191.50"></text></g><g><title>tailcall`_mi_free_delayed_block (9 samples, 0.02%)</title><rect x="65.2806%" y="149" width="0.0172%" height="15" fill="rgb(246,160,12)" fg:x="34224" fg:w="9"/><text x="65.5306%" y="159.50"></text></g><g><title>tailcall`mi_find_page (13 samples, 0.02%)</title><rect x="65.2978%" y="149" width="0.0248%" height="15" fill="rgb(247,166,0)" fg:x="34233" fg:w="13"/><text x="65.5478%" y="159.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (25 samples, 0.05%)</title><rect x="65.2806%" y="181" width="0.0477%" height="15" fill="rgb(249,219,21)" fg:x="34224" fg:w="25"/><text x="65.5306%" y="191.50"></text></g><g><title>tailcall`_mi_malloc_generic (25 samples, 0.05%)</title><rect x="65.2806%" y="165" width="0.0477%" height="15" fill="rgb(205,209,3)" fg:x="34224" fg:w="25"/><text x="65.5306%" y="175.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as tailcall::core::http::response::FromValue&gt;::from_value (688 samples, 1.31%)</title><rect x="64.0179%" y="197" width="1.3123%" height="15" fill="rgb(243,44,1)" fg:x="33562" fg:w="688"/><text x="64.2679%" y="207.50"></text></g><g><title>tailcall`async_graphql_value::Name::new (18 samples, 0.03%)</title><rect x="65.3302%" y="197" width="0.0343%" height="15" fill="rgb(206,159,16)" fg:x="34250" fg:w="18"/><text x="65.5802%" y="207.50"></text></g><g><title>tailcall`indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (39 samples, 0.07%)</title><rect x="65.3683%" y="197" width="0.0744%" height="15" fill="rgb(244,77,30)" fg:x="34270" fg:w="39"/><text x="65.6183%" y="207.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as tailcall::core::http::response::FromValue&gt;::from_value (751 samples, 1.43%)</title><rect x="64.0159%" y="213" width="1.4325%" height="15" fill="rgb(218,69,12)" fg:x="33561" fg:w="751"/><text x="64.2659%" y="223.50"></text></g><g><title>tailcall`indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (8 samples, 0.02%)</title><rect x="65.4503%" y="213" width="0.0153%" height="15" fill="rgb(212,87,7)" fg:x="34313" fg:w="8"/><text x="65.7003%" y="223.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as tailcall::core::http::response::FromValue&gt;::from_value (778 samples, 1.48%)</title><rect x="63.9892%" y="245" width="1.4840%" height="15" fill="rgb(245,114,25)" fg:x="33547" fg:w="778"/><text x="64.2392%" y="255.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as tailcall::core::http::response::FromValue&gt;::from_value (777 samples, 1.48%)</title><rect x="63.9911%" y="229" width="1.4821%" height="15" fill="rgb(210,61,42)" fg:x="33548" fg:w="777"/><text x="64.2411%" y="239.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as tailcall::core::http::response::FromValue&gt;::from_value (786 samples, 1.50%)</title><rect x="63.9835%" y="261" width="1.4993%" height="15" fill="rgb(211,52,33)" fg:x="33544" fg:w="786"/><text x="64.2335%" y="271.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as tailcall::core::http::response::FromValue&gt;::from_value (788 samples, 1.50%)</title><rect x="63.9816%" y="277" width="1.5031%" height="15" fill="rgb(234,58,33)" fg:x="33543" fg:w="788"/><text x="64.2316%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (41 samples, 0.08%)</title><rect x="65.5514%" y="197" width="0.0782%" height="15" fill="rgb(220,115,36)" fg:x="34366" fg:w="41"/><text x="65.8014%" y="207.50"></text></g><g><title>tailcall`&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed::has_next_key (20 samples, 0.04%)</title><rect x="65.6296%" y="197" width="0.0381%" height="15" fill="rgb(243,153,54)" fg:x="34407" fg:w="20"/><text x="65.8796%" y="207.50"></text></g><g><title>tailcall`&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (20 samples, 0.04%)</title><rect x="65.6735%" y="197" width="0.0381%" height="15" fill="rgb(251,47,18)" fg:x="34430" fg:w="20"/><text x="65.9235%" y="207.50"></text></g><g><title>tailcall`DYLD-STUB$$memcpy (7 samples, 0.01%)</title><rect x="65.7117%" y="197" width="0.0134%" height="15" fill="rgb(242,102,42)" fg:x="34450" fg:w="7"/><text x="65.9617%" y="207.50"></text></g><g><title>tailcall`&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed::has_next_key (45 samples, 0.09%)</title><rect x="65.9177%" y="181" width="0.0858%" height="15" fill="rgb(234,31,38)" fg:x="34558" fg:w="45"/><text x="66.1677%" y="191.50"></text></g><g><title>tailcall`&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (229 samples, 0.44%)</title><rect x="66.0035%" y="181" width="0.4368%" height="15" fill="rgb(221,117,51)" fg:x="34603" fg:w="229"/><text x="66.2535%" y="191.50"></text></g><g><title>tailcall`core::str::converts::from_utf8 (143 samples, 0.27%)</title><rect x="66.1676%" y="165" width="0.2728%" height="15" fill="rgb(212,20,18)" fg:x="34689" fg:w="143"/><text x="66.4176%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (19 samples, 0.04%)</title><rect x="66.4766%" y="149" width="0.0362%" height="15" fill="rgb(245,133,36)" fg:x="34851" fg:w="19"/><text x="66.7266%" y="159.50"></text></g><g><title>tailcall`_mi_free_delayed_block (14 samples, 0.03%)</title><rect x="66.5300%" y="117" width="0.0267%" height="15" fill="rgb(212,6,19)" fg:x="34879" fg:w="14"/><text x="66.7800%" y="127.50"></text></g><g><title>tailcall`_mi_heap_realloc_zero (31 samples, 0.06%)</title><rect x="66.5147%" y="149" width="0.0591%" height="15" fill="rgb(218,1,36)" fg:x="34871" fg:w="31"/><text x="66.7647%" y="159.50"></text></g><g><title>tailcall`_mi_malloc_generic (25 samples, 0.05%)</title><rect x="66.5262%" y="133" width="0.0477%" height="15" fill="rgb(246,84,54)" fg:x="34877" fg:w="25"/><text x="66.7762%" y="143.50"></text></g><g><title>tailcall`mi_find_page (6 samples, 0.01%)</title><rect x="66.5624%" y="117" width="0.0114%" height="15" fill="rgb(242,110,6)" fg:x="34896" fg:w="6"/><text x="66.8124%" y="127.50"></text></g><g><title>tailcall`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (76 samples, 0.14%)</title><rect x="66.4403%" y="181" width="0.1450%" height="15" fill="rgb(214,47,5)" fg:x="34832" fg:w="76"/><text x="66.6903%" y="191.50"></text></g><g><title>tailcall`alloc::raw_vec::finish_grow (64 samples, 0.12%)</title><rect x="66.4632%" y="165" width="0.1221%" height="15" fill="rgb(218,159,25)" fg:x="34844" fg:w="64"/><text x="66.7132%" y="175.50"></text></g><g><title>tailcall`core::str::converts::from_utf8 (6 samples, 0.01%)</title><rect x="66.5872%" y="181" width="0.0114%" height="15" fill="rgb(215,211,28)" fg:x="34909" fg:w="6"/><text x="66.8372%" y="191.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (10 samples, 0.02%)</title><rect x="66.5986%" y="181" width="0.0191%" height="15" fill="rgb(238,59,32)" fg:x="34915" fg:w="10"/><text x="66.8486%" y="191.50"></text></g><g><title>tailcall`_mi_malloc_generic (10 samples, 0.02%)</title><rect x="66.5986%" y="165" width="0.0191%" height="15" fill="rgb(226,82,3)" fg:x="34915" fg:w="10"/><text x="66.8486%" y="175.50"></text></g><g><title>tailcall`mi_malloc_aligned (34 samples, 0.06%)</title><rect x="66.6177%" y="181" width="0.0649%" height="15" fill="rgb(240,164,32)" fg:x="34925" fg:w="34"/><text x="66.8677%" y="191.50"></text></g><g><title>tailcall`&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (147 samples, 0.28%)</title><rect x="66.7589%" y="165" width="0.2804%" height="15" fill="rgb(232,46,7)" fg:x="34999" fg:w="147"/><text x="67.0089%" y="175.50"></text></g><g><title>tailcall`core::str::converts::from_utf8 (56 samples, 0.11%)</title><rect x="66.9324%" y="149" width="0.1068%" height="15" fill="rgb(229,129,53)" fg:x="35090" fg:w="56"/><text x="67.1824%" y="159.50"></text></g><g><title>tailcall`serde_json::de::Deserializer&lt;R&gt;::f64_from_parts (6 samples, 0.01%)</title><rect x="67.0412%" y="165" width="0.0114%" height="15" fill="rgb(234,188,29)" fg:x="35147" fg:w="6"/><text x="67.2912%" y="175.50"></text></g><g><title>tailcall`tailcall::core::ir::eval_io::eval_io_inner::_{{closure}} (1,882 samples, 3.59%)</title><rect x="63.5734%" y="341" width="3.5898%" height="15" fill="rgb(246,141,4)" fg:x="33329" fg:w="1882"/><text x="63.8234%" y="351.50">tail..</text></g><g><title>tailcall`tailcall::core::ir::eval_http::EvalHttp&lt;Context&gt;::execute::_{{closure}} (1,838 samples, 3.51%)</title><rect x="63.6573%" y="325" width="3.5059%" height="15" fill="rgb(229,23,39)" fg:x="33373" fg:w="1838"/><text x="63.9073%" y="335.50">tai..</text></g><g><title>tailcall`tailcall::core::ir::eval_http::execute_raw_request::_{{closure}} (1,836 samples, 3.50%)</title><rect x="63.6612%" y="309" width="3.5021%" height="15" fill="rgb(206,12,3)" fg:x="33375" fg:w="1836"/><text x="63.9112%" y="319.50">tai..</text></g><g><title>tailcall`tailcall::core::http::response::Response&lt;bytes::bytes::Bytes&gt;::to_json (1,670 samples, 3.19%)</title><rect x="63.9778%" y="293" width="3.1854%" height="15" fill="rgb(252,226,20)" fg:x="33541" fg:w="1670"/><text x="64.2278%" y="303.50">tai..</text></g><g><title>tailcall`serde_json_borrow::de::_&lt;impl serde::de::Deserialize for serde_json_borrow::value::Value&gt;::deserialize (880 samples, 1.68%)</title><rect x="65.4847%" y="277" width="1.6786%" height="15" fill="rgb(216,123,35)" fg:x="34331" fg:w="880"/><text x="65.7347%" y="287.50"></text></g><g><title>tailcall`serde_json_borrow::de::_&lt;impl serde::de::Deserialize for serde_json_borrow::value::Value&gt;::deserialize (875 samples, 1.67%)</title><rect x="65.4942%" y="261" width="1.6690%" height="15" fill="rgb(212,68,40)" fg:x="34336" fg:w="875"/><text x="65.7442%" y="271.50"></text></g><g><title>tailcall`serde_json_borrow::de::_&lt;impl serde::de::Deserialize for serde_json_borrow::value::Value&gt;::deserialize (870 samples, 1.66%)</title><rect x="65.5038%" y="245" width="1.6595%" height="15" fill="rgb(254,125,32)" fg:x="34341" fg:w="870"/><text x="65.7538%" y="255.50"></text></g><g><title>tailcall`serde_json_borrow::de::_&lt;impl serde::de::Deserialize for serde_json_borrow::value::Value&gt;::deserialize (859 samples, 1.64%)</title><rect x="65.5247%" y="229" width="1.6385%" height="15" fill="rgb(253,97,22)" fg:x="34352" fg:w="859"/><text x="65.7747%" y="239.50"></text></g><g><title>tailcall`serde_json_borrow::de::_&lt;impl serde::de::Deserialize for serde_json_borrow::value::Value&gt;::deserialize (848 samples, 1.62%)</title><rect x="65.5457%" y="213" width="1.6175%" height="15" fill="rgb(241,101,14)" fg:x="34363" fg:w="848"/><text x="65.7957%" y="223.50"></text></g><g><title>tailcall`serde_json_borrow::de::_&lt;impl serde::de::Deserialize for serde_json_borrow::value::Value&gt;::deserialize (747 samples, 1.42%)</title><rect x="65.7384%" y="197" width="1.4249%" height="15" fill="rgb(238,103,29)" fg:x="34464" fg:w="747"/><text x="65.9884%" y="207.50"></text></g><g><title>tailcall`serde_json_borrow::de::_&lt;impl serde::de::Deserialize for serde_json_borrow::value::Value&gt;::deserialize (248 samples, 0.47%)</title><rect x="66.6902%" y="181" width="0.4730%" height="15" fill="rgb(233,195,47)" fg:x="34963" fg:w="248"/><text x="66.9402%" y="191.50"></text></g><g><title>tailcall`serde_json::de::Deserializer&lt;R&gt;::parse_integer (55 samples, 0.10%)</title><rect x="67.0583%" y="165" width="0.1049%" height="15" fill="rgb(246,218,30)" fg:x="35156" fg:w="55"/><text x="67.3083%" y="175.50"></text></g><g><title>tailcall`serde_json::de::Deserializer&lt;R&gt;::parse_decimal (12 samples, 0.02%)</title><rect x="67.1404%" y="149" width="0.0229%" height="15" fill="rgb(219,145,47)" fg:x="35199" fg:w="12"/><text x="67.3904%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (22 samples, 0.04%)</title><rect x="67.5752%" y="181" width="0.0420%" height="15" fill="rgb(243,12,26)" fg:x="35427" fg:w="22"/><text x="67.8252%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (7 samples, 0.01%)</title><rect x="67.7374%" y="165" width="0.0134%" height="15" fill="rgb(214,87,16)" fg:x="35512" fg:w="7"/><text x="67.9874%" y="175.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as core::clone::Clone&gt;::clone (88 samples, 0.17%)</title><rect x="67.6172%" y="181" width="0.1679%" height="15" fill="rgb(208,99,42)" fg:x="35449" fg:w="88"/><text x="67.8672%" y="191.50"></text></g><g><title>tailcall`mi_malloc_aligned (17 samples, 0.03%)</title><rect x="67.7526%" y="165" width="0.0324%" height="15" fill="rgb(253,99,2)" fg:x="35520" fg:w="17"/><text x="68.0026%" y="175.50"></text></g><g><title>tailcall`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone_from (294 samples, 0.56%)</title><rect x="67.2453%" y="197" width="0.5608%" height="15" fill="rgb(220,168,23)" fg:x="35254" fg:w="294"/><text x="67.4953%" y="207.50"></text></g><g><title>tailcall`mi_malloc_aligned (6 samples, 0.01%)</title><rect x="67.7946%" y="181" width="0.0114%" height="15" fill="rgb(242,38,24)" fg:x="35542" fg:w="6"/><text x="68.0446%" y="191.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as core::clone::Clone&gt;::clone (92 samples, 0.18%)</title><rect x="67.8061%" y="197" width="0.1755%" height="15" fill="rgb(225,182,9)" fg:x="35548" fg:w="92"/><text x="68.0561%" y="207.50"></text></g><g><title>tailcall`core::clone::Clone::clone_from (72 samples, 0.14%)</title><rect x="67.9815%" y="197" width="0.1373%" height="15" fill="rgb(243,178,37)" fg:x="35640" fg:w="72"/><text x="68.2315%" y="207.50"></text></g><g><title>tailcall`_mi_free_delayed_block (75 samples, 0.14%)</title><rect x="68.1360%" y="133" width="0.1431%" height="15" fill="rgb(232,139,19)" fg:x="35721" fg:w="75"/><text x="68.3860%" y="143.50"></text></g><g><title>tailcall`_mi_page_free (6 samples, 0.01%)</title><rect x="68.2677%" y="117" width="0.0114%" height="15" fill="rgb(225,201,24)" fg:x="35790" fg:w="6"/><text x="68.5177%" y="127.50"></text></g><g><title>tailcall`mi_segment_page_clear (6 samples, 0.01%)</title><rect x="68.2677%" y="101" width="0.0114%" height="15" fill="rgb(221,47,46)" fg:x="35790" fg:w="6"/><text x="68.5177%" y="111.50"></text></g><g><title>tailcall`mi_segment_span_free_coalesce (6 samples, 0.01%)</title><rect x="68.2677%" y="85" width="0.0114%" height="15" fill="rgb(249,23,13)" fg:x="35790" fg:w="6"/><text x="68.5177%" y="95.50"></text></g><g><title>tailcall`mi_segment_span_free (6 samples, 0.01%)</title><rect x="68.2677%" y="69" width="0.0114%" height="15" fill="rgb(219,9,5)" fg:x="35790" fg:w="6"/><text x="68.5177%" y="79.50"></text></g><g><title>tailcall`mi_page_fresh_alloc (6 samples, 0.01%)</title><rect x="68.3172%" y="117" width="0.0114%" height="15" fill="rgb(254,171,16)" fg:x="35816" fg:w="6"/><text x="68.5672%" y="127.50"></text></g><g><title>tailcall`mi_segments_page_alloc (6 samples, 0.01%)</title><rect x="68.3172%" y="101" width="0.0114%" height="15" fill="rgb(230,171,20)" fg:x="35816" fg:w="6"/><text x="68.5672%" y="111.50"></text></g><g><title>tailcall`mi_find_page (24 samples, 0.05%)</title><rect x="68.2848%" y="133" width="0.0458%" height="15" fill="rgb(210,71,41)" fg:x="35799" fg:w="24"/><text x="68.5348%" y="143.50"></text></g><g><title>tailcall`_mi_malloc_generic (108 samples, 0.21%)</title><rect x="68.1284%" y="149" width="0.2060%" height="15" fill="rgb(206,173,20)" fg:x="35717" fg:w="108"/><text x="68.3784%" y="159.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (110 samples, 0.21%)</title><rect x="68.1265%" y="165" width="0.2098%" height="15" fill="rgb(233,88,34)" fg:x="35716" fg:w="110"/><text x="68.3765%" y="175.50"></text></g><g><title>tailcall`alloc::raw_vec::finish_grow (116 samples, 0.22%)</title><rect x="68.1227%" y="181" width="0.2213%" height="15" fill="rgb(223,209,46)" fg:x="35714" fg:w="116"/><text x="68.3727%" y="191.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as core::clone::Clone&gt;::clone (599 samples, 1.14%)</title><rect x="67.2262%" y="213" width="1.1426%" height="15" fill="rgb(250,43,18)" fg:x="35244" fg:w="599"/><text x="67.4762%" y="223.50"></text></g><g><title>tailcall`indexmap::map::core::RefMut&lt;K,V&gt;::reserve_entries (131 samples, 0.25%)</title><rect x="68.1189%" y="197" width="0.2499%" height="15" fill="rgb(208,13,10)" fg:x="35712" fg:w="131"/><text x="68.3689%" y="207.50"></text></g><g><title>tailcall`mi_malloc_aligned (9 samples, 0.02%)</title><rect x="68.3516%" y="181" width="0.0172%" height="15" fill="rgb(212,200,36)" fg:x="35834" fg:w="9"/><text x="68.6016%" y="191.50"></text></g><g><title>tailcall`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone_from (622 samples, 1.19%)</title><rect x="67.1880%" y="245" width="1.1864%" height="15" fill="rgb(225,90,30)" fg:x="35224" fg:w="622"/><text x="67.4380%" y="255.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as core::clone::Clone&gt;::clone (615 samples, 1.17%)</title><rect x="67.2014%" y="229" width="1.1731%" height="15" fill="rgb(236,182,39)" fg:x="35231" fg:w="615"/><text x="67.4514%" y="239.50"></text></g><g><title>tailcall`core::clone::Clone::clone_from (9 samples, 0.02%)</title><rect x="68.3745%" y="245" width="0.0172%" height="15" fill="rgb(212,144,35)" fg:x="35846" fg:w="9"/><text x="68.6245%" y="255.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as core::clone::Clone&gt;::clone (645 samples, 1.23%)</title><rect x="67.1804%" y="261" width="1.2303%" height="15" fill="rgb(228,63,44)" fg:x="35220" fg:w="645"/><text x="67.4304%" y="271.50"></text></g><g><title>tailcall`indexmap::map::core::RefMut&lt;K,V&gt;::reserve_entries (10 samples, 0.02%)</title><rect x="68.3916%" y="245" width="0.0191%" height="15" fill="rgb(228,109,6)" fg:x="35855" fg:w="10"/><text x="68.6416%" y="255.50"></text></g><g><title>tailcall`alloc::raw_vec::finish_grow (7 samples, 0.01%)</title><rect x="68.3974%" y="229" width="0.0134%" height="15" fill="rgb(238,117,24)" fg:x="35858" fg:w="7"/><text x="68.6474%" y="239.50"></text></g><g><title>tailcall`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone_from (649 samples, 1.24%)</title><rect x="67.1747%" y="293" width="1.2379%" height="15" fill="rgb(242,26,26)" fg:x="35217" fg:w="649"/><text x="67.4247%" y="303.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as core::clone::Clone&gt;::clone (649 samples, 1.24%)</title><rect x="67.1747%" y="277" width="1.2379%" height="15" fill="rgb(221,92,48)" fg:x="35217" fg:w="649"/><text x="67.4247%" y="287.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as core::clone::Clone&gt;::clone (657 samples, 1.25%)</title><rect x="67.1690%" y="325" width="1.2532%" height="15" fill="rgb(209,209,32)" fg:x="35214" fg:w="657"/><text x="67.4190%" y="335.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as core::clone::Clone&gt;::clone (656 samples, 1.25%)</title><rect x="67.1709%" y="309" width="1.2513%" height="15" fill="rgb(221,70,22)" fg:x="35215" fg:w="656"/><text x="67.4209%" y="319.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (20 samples, 0.04%)</title><rect x="68.4870%" y="229" width="0.0381%" height="15" fill="rgb(248,145,5)" fg:x="35905" fg:w="20"/><text x="68.7370%" y="239.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (52 samples, 0.10%)</title><rect x="68.4279%" y="245" width="0.0992%" height="15" fill="rgb(226,116,26)" fg:x="35874" fg:w="52"/><text x="68.6779%" y="255.50"></text></g><g><title>tailcall`mi_free (10 samples, 0.02%)</title><rect x="68.5271%" y="245" width="0.0191%" height="15" fill="rgb(244,5,17)" fg:x="35926" fg:w="10"/><text x="68.7771%" y="255.50"></text></g><g><title>tailcall`mi_free_block_delayed_mt (15 samples, 0.03%)</title><rect x="68.5461%" y="245" width="0.0286%" height="15" fill="rgb(252,159,33)" fg:x="35936" fg:w="15"/><text x="68.7961%" y="255.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (86 samples, 0.16%)</title><rect x="68.4241%" y="261" width="0.1640%" height="15" fill="rgb(206,71,0)" fg:x="35872" fg:w="86"/><text x="68.6741%" y="271.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (89 samples, 0.17%)</title><rect x="68.4222%" y="277" width="0.1698%" height="15" fill="rgb(233,118,54)" fg:x="35871" fg:w="89"/><text x="68.6722%" y="287.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (90 samples, 0.17%)</title><rect x="68.4222%" y="293" width="0.1717%" height="15" fill="rgb(234,83,48)" fg:x="35871" fg:w="90"/><text x="68.6722%" y="303.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (93 samples, 0.18%)</title><rect x="68.4222%" y="325" width="0.1774%" height="15" fill="rgb(228,3,54)" fg:x="35871" fg:w="93"/><text x="68.6722%" y="335.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (93 samples, 0.18%)</title><rect x="68.4222%" y="309" width="0.1774%" height="15" fill="rgb(226,155,13)" fg:x="35871" fg:w="93"/><text x="68.6722%" y="319.50"></text></g><g><title>tailcall`tokio::sync::broadcast::Receiver&lt;T&gt;::recv::_{{closure}} (760 samples, 1.45%)</title><rect x="67.1632%" y="341" width="1.4497%" height="15" fill="rgb(241,28,37)" fg:x="35211" fg:w="760"/><text x="67.4132%" y="351.50"></text></g><g><title>tailcall`tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (6 samples, 0.01%)</title><rect x="68.6015%" y="325" width="0.0114%" height="15" fill="rgb(233,93,10)" fg:x="35965" fg:w="6"/><text x="68.8515%" y="335.50"></text></g><g><title>tailcall`tailcall::core::ir::eval_io::eval_io::_{{closure}} (4,715 samples, 8.99%)</title><rect x="59.6326%" y="357" width="8.9936%" height="15" fill="rgb(225,113,19)" fg:x="31263" fg:w="4715"/><text x="59.8826%" y="367.50">tailcall`tail..</text></g><g><title>tailcall`tokio::sync::broadcast::Sender&lt;T&gt;::send (7 samples, 0.01%)</title><rect x="68.6129%" y="341" width="0.0134%" height="15" fill="rgb(241,2,18)" fg:x="35971" fg:w="7"/><text x="68.8629%" y="351.50"></text></g><g><title>tailcall`tokio::sync::broadcast::Shared&lt;T&gt;::notify_rx (7 samples, 0.01%)</title><rect x="68.6129%" y="325" width="0.0134%" height="15" fill="rgb(228,207,21)" fg:x="35971" fg:w="7"/><text x="68.8629%" y="335.50"></text></g><g><title>tailcall`tokio::runtime::task::waker::wake_by_val (7 samples, 0.01%)</title><rect x="68.6129%" y="309" width="0.0134%" height="15" fill="rgb(213,211,35)" fg:x="35971" fg:w="7"/><text x="68.8629%" y="319.50"></text></g><g><title>tailcall`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (6 samples, 0.01%)</title><rect x="68.6148%" y="293" width="0.0114%" height="15" fill="rgb(209,83,10)" fg:x="35972" fg:w="6"/><text x="68.8648%" y="303.50"></text></g><g><title>tailcall`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task::_{{closure}} (6 samples, 0.01%)</title><rect x="68.6148%" y="277" width="0.0114%" height="15" fill="rgb(209,164,1)" fg:x="35972" fg:w="6"/><text x="68.8648%" y="287.50"></text></g><g><title>tailcall`parking_lot::condvar::Condvar::notify_one_slow (6 samples, 0.01%)</title><rect x="68.6148%" y="261" width="0.0114%" height="15" fill="rgb(213,184,43)" fg:x="35972" fg:w="6"/><text x="68.8648%" y="271.50"></text></g><g><title>tailcall`tailcall::core::ir::eval::_&lt;impl tailcall::core::ir::model::IR&gt;::eval::_{{closure}}::_{{closure}} (4,727 samples, 9.02%)</title><rect x="59.6116%" y="373" width="9.0165%" height="15" fill="rgb(231,61,34)" fg:x="31252" fg:w="4727"/><text x="59.8616%" y="383.50">tailcall`tail..</text></g><g><title>tailcall`tracing::span::Span::new (6 samples, 0.01%)</title><rect x="68.6377%" y="373" width="0.0114%" height="15" fill="rgb(235,75,3)" fg:x="35984" fg:w="6"/><text x="68.8877%" y="383.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::new_span (6 samples, 0.01%)</title><rect x="68.6377%" y="357" width="0.0114%" height="15" fill="rgb(220,106,47)" fg:x="35984" fg:w="6"/><text x="68.8877%" y="367.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::new_span (6 samples, 0.01%)</title><rect x="68.6377%" y="341" width="0.0114%" height="15" fill="rgb(210,196,33)" fg:x="35984" fg:w="6"/><text x="68.8877%" y="351.50"></text></g><g><title>tailcall`&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (4,776 samples, 9.11%)</title><rect x="59.5449%" y="389" width="9.1100%" height="15" fill="rgb(229,154,42)" fg:x="31217" fg:w="4776"/><text x="59.7949%" y="399.50">tailcall`&lt;cor..</text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (8 samples, 0.02%)</title><rect x="68.6816%" y="373" width="0.0153%" height="15" fill="rgb(228,114,26)" fg:x="36007" fg:w="8"/><text x="68.9316%" y="383.50"></text></g><g><title>tailcall`_mi_malloc_generic (7 samples, 0.01%)</title><rect x="68.6835%" y="357" width="0.0134%" height="15" fill="rgb(208,144,1)" fg:x="36008" fg:w="7"/><text x="68.9335%" y="367.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (50 samples, 0.10%)</title><rect x="68.9200%" y="277" width="0.0954%" height="15" fill="rgb(239,112,37)" fg:x="36132" fg:w="50"/><text x="69.1700%" y="287.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (146 samples, 0.28%)</title><rect x="68.7426%" y="293" width="0.2785%" height="15" fill="rgb(210,96,50)" fg:x="36039" fg:w="146"/><text x="68.9926%" y="303.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (199 samples, 0.38%)</title><rect x="68.7140%" y="309" width="0.3796%" height="15" fill="rgb(222,178,2)" fg:x="36024" fg:w="199"/><text x="68.9640%" y="319.50"></text></g><g><title>tailcall`mi_free (38 samples, 0.07%)</title><rect x="69.0211%" y="293" width="0.0725%" height="15" fill="rgb(226,74,18)" fg:x="36185" fg:w="38"/><text x="69.2711%" y="303.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (208 samples, 0.40%)</title><rect x="68.7064%" y="341" width="0.3967%" height="15" fill="rgb(225,67,54)" fg:x="36020" fg:w="208"/><text x="68.9564%" y="351.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (207 samples, 0.39%)</title><rect x="68.7083%" y="325" width="0.3948%" height="15" fill="rgb(251,92,32)" fg:x="36021" fg:w="207"/><text x="68.9583%" y="335.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (210 samples, 0.40%)</title><rect x="68.7045%" y="357" width="0.4006%" height="15" fill="rgb(228,149,22)" fg:x="36019" fg:w="210"/><text x="68.9545%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (41 samples, 0.08%)</title><rect x="69.1203%" y="325" width="0.0782%" height="15" fill="rgb(243,54,13)" fg:x="36237" fg:w="41"/><text x="69.3703%" y="335.50"></text></g><g><title>tailcall`_mi_page_free (8 samples, 0.02%)</title><rect x="69.2290%" y="277" width="0.0153%" height="15" fill="rgb(243,180,28)" fg:x="36294" fg:w="8"/><text x="69.4790%" y="287.50"></text></g><g><title>tailcall`mi_segment_page_clear (8 samples, 0.02%)</title><rect x="69.2290%" y="261" width="0.0153%" height="15" fill="rgb(208,167,24)" fg:x="36294" fg:w="8"/><text x="69.4790%" y="271.50"></text></g><g><title>tailcall`mi_segment_span_free_coalesce (8 samples, 0.02%)</title><rect x="69.2290%" y="245" width="0.0153%" height="15" fill="rgb(245,73,45)" fg:x="36294" fg:w="8"/><text x="69.4790%" y="255.50"></text></g><g><title>tailcall`mi_segment_span_free (6 samples, 0.01%)</title><rect x="69.2328%" y="229" width="0.0114%" height="15" fill="rgb(237,203,48)" fg:x="36296" fg:w="6"/><text x="69.4828%" y="239.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (53 samples, 0.10%)</title><rect x="69.4865%" y="261" width="0.1011%" height="15" fill="rgb(211,197,16)" fg:x="36429" fg:w="53"/><text x="69.7365%" y="271.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (181 samples, 0.35%)</title><rect x="69.2443%" y="277" width="0.3452%" height="15" fill="rgb(243,99,51)" fg:x="36302" fg:w="181"/><text x="69.4943%" y="287.50"></text></g><g><title>tailcall`mi_free (34 samples, 0.06%)</title><rect x="69.5895%" y="277" width="0.0649%" height="15" fill="rgb(215,123,29)" fg:x="36483" fg:w="34"/><text x="69.8395%" y="287.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (238 samples, 0.45%)</title><rect x="69.2099%" y="293" width="0.4540%" height="15" fill="rgb(239,186,37)" fg:x="36284" fg:w="238"/><text x="69.4599%" y="303.50"></text></g><g><title>tailcall`mi_free (6 samples, 0.01%)</title><rect x="69.6639%" y="293" width="0.0114%" height="15" fill="rgb(252,136,39)" fg:x="36522" fg:w="6"/><text x="69.9139%" y="303.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (248 samples, 0.47%)</title><rect x="69.2042%" y="309" width="0.4730%" height="15" fill="rgb(223,213,32)" fg:x="36281" fg:w="248"/><text x="69.4542%" y="319.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (249 samples, 0.47%)</title><rect x="69.2042%" y="325" width="0.4750%" height="15" fill="rgb(233,115,5)" fg:x="36281" fg:w="249"/><text x="69.4542%" y="335.50"></text></g><g><title>tailcall`mi_find_page (20 samples, 0.04%)</title><rect x="69.7669%" y="277" width="0.0381%" height="15" fill="rgb(207,226,44)" fg:x="36576" fg:w="20"/><text x="70.0169%" y="287.50"></text></g><g><title>tailcall`mi_page_fresh_alloc (9 samples, 0.02%)</title><rect x="69.7879%" y="261" width="0.0172%" height="15" fill="rgb(208,126,0)" fg:x="36587" fg:w="9"/><text x="70.0379%" y="271.50"></text></g><g><title>tailcall`mi_segments_page_alloc (8 samples, 0.02%)</title><rect x="69.7898%" y="245" width="0.0153%" height="15" fill="rgb(244,66,21)" fg:x="36588" fg:w="8"/><text x="70.0398%" y="255.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (25 samples, 0.05%)</title><rect x="69.7593%" y="309" width="0.0477%" height="15" fill="rgb(222,97,12)" fg:x="36572" fg:w="25"/><text x="70.0093%" y="319.50"></text></g><g><title>tailcall`_mi_malloc_generic (25 samples, 0.05%)</title><rect x="69.7593%" y="293" width="0.0477%" height="15" fill="rgb(219,213,19)" fg:x="36572" fg:w="25"/><text x="70.0093%" y="303.50"></text></g><g><title>tailcall`_mi_page_free (6 samples, 0.01%)</title><rect x="69.8852%" y="261" width="0.0114%" height="15" fill="rgb(252,169,30)" fg:x="36638" fg:w="6"/><text x="70.1352%" y="271.50"></text></g><g><title>tailcall`mi_segment_page_clear (6 samples, 0.01%)</title><rect x="69.8852%" y="245" width="0.0114%" height="15" fill="rgb(206,32,51)" fg:x="36638" fg:w="6"/><text x="70.1352%" y="255.50"></text></g><g><title>tailcall`mi_segment_span_free_coalesce (6 samples, 0.01%)</title><rect x="69.8852%" y="229" width="0.0114%" height="15" fill="rgb(250,172,42)" fg:x="36638" fg:w="6"/><text x="70.1352%" y="239.50"></text></g><g><title>tailcall`mi_segment_span_free (6 samples, 0.01%)</title><rect x="69.8852%" y="213" width="0.0114%" height="15" fill="rgb(209,34,43)" fg:x="36638" fg:w="6"/><text x="70.1352%" y="223.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (93 samples, 0.18%)</title><rect x="69.8966%" y="261" width="0.1774%" height="15" fill="rgb(223,11,35)" fg:x="36644" fg:w="93"/><text x="70.1466%" y="271.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (39 samples, 0.07%)</title><rect x="69.9996%" y="245" width="0.0744%" height="15" fill="rgb(251,219,26)" fg:x="36698" fg:w="39"/><text x="70.2496%" y="255.50"></text></g><g><title>tailcall`mi_free (28 samples, 0.05%)</title><rect x="70.0740%" y="261" width="0.0534%" height="15" fill="rgb(231,119,3)" fg:x="36737" fg:w="28"/><text x="70.3240%" y="271.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (141 samples, 0.27%)</title><rect x="69.8642%" y="277" width="0.2690%" height="15" fill="rgb(216,97,11)" fg:x="36627" fg:w="141"/><text x="70.1142%" y="287.50"></text></g><g><title>tailcall`mi_free (28 samples, 0.05%)</title><rect x="70.1331%" y="277" width="0.0534%" height="15" fill="rgb(223,59,9)" fg:x="36768" fg:w="28"/><text x="70.3831%" y="287.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (182 samples, 0.35%)</title><rect x="69.8413%" y="293" width="0.3472%" height="15" fill="rgb(233,93,31)" fg:x="36615" fg:w="182"/><text x="70.0913%" y="303.50"></text></g><g><title>tailcall`mi_free (9 samples, 0.02%)</title><rect x="70.1885%" y="293" width="0.0172%" height="15" fill="rgb(239,81,33)" fg:x="36797" fg:w="9"/><text x="70.4385%" y="303.50"></text></g><g><title>tailcall`tailcall::core::jit::exec::ExecutorInner&lt;Input,Output,Error,Exec&gt;::iter_field::_{{closure}} (35 samples, 0.07%)</title><rect x="70.2075%" y="293" width="0.0668%" height="15" fill="rgb(213,120,34)" fg:x="36807" fg:w="35"/><text x="70.4575%" y="303.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (6 samples, 0.01%)</title><rect x="70.4193%" y="277" width="0.0114%" height="15" fill="rgb(243,49,53)" fg:x="36918" fg:w="6"/><text x="70.6693%" y="287.50"></text></g><g><title>tailcall`_mi_malloc_generic (6 samples, 0.01%)</title><rect x="70.4193%" y="261" width="0.0114%" height="15" fill="rgb(247,216,33)" fg:x="36918" fg:w="6"/><text x="70.6693%" y="271.50"></text></g><g><title>tailcall`mi_malloc_aligned (7 samples, 0.01%)</title><rect x="70.4307%" y="277" width="0.0134%" height="15" fill="rgb(226,26,14)" fg:x="36924" fg:w="7"/><text x="70.6807%" y="287.50"></text></g><g><title>tailcall`_mi_free_delayed_block (8 samples, 0.02%)</title><rect x="70.7588%" y="229" width="0.0153%" height="15" fill="rgb(215,49,53)" fg:x="37096" fg:w="8"/><text x="71.0088%" y="239.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (15 samples, 0.03%)</title><rect x="70.7588%" y="261" width="0.0286%" height="15" fill="rgb(245,162,40)" fg:x="37096" fg:w="15"/><text x="71.0088%" y="271.50"></text></g><g><title>tailcall`_mi_malloc_generic (15 samples, 0.03%)</title><rect x="70.7588%" y="245" width="0.0286%" height="15" fill="rgb(229,68,17)" fg:x="37096" fg:w="15"/><text x="71.0088%" y="255.50"></text></g><g><title>tailcall`mi_find_page (6 samples, 0.01%)</title><rect x="70.7760%" y="229" width="0.0114%" height="15" fill="rgb(213,182,10)" fg:x="37105" fg:w="6"/><text x="71.0260%" y="239.50"></text></g><g><title>tailcall`mi_malloc_aligned (18 samples, 0.03%)</title><rect x="70.7874%" y="261" width="0.0343%" height="15" fill="rgb(245,125,30)" fg:x="37111" fg:w="18"/><text x="71.0374%" y="271.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (6 samples, 0.01%)</title><rect x="71.3940%" y="245" width="0.0114%" height="15" fill="rgb(232,202,2)" fg:x="37429" fg:w="6"/><text x="71.6440%" y="255.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as core::clone::Clone&gt;::clone (33 samples, 0.06%)</title><rect x="71.4054%" y="245" width="0.0629%" height="15" fill="rgb(237,140,51)" fg:x="37435" fg:w="33"/><text x="71.6554%" y="255.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (16 samples, 0.03%)</title><rect x="71.4684%" y="245" width="0.0305%" height="15" fill="rgb(236,157,25)" fg:x="37468" fg:w="16"/><text x="71.7184%" y="255.50"></text></g><g><title>tailcall`_mi_free_delayed_block (26 samples, 0.05%)</title><rect x="71.5179%" y="213" width="0.0496%" height="15" fill="rgb(219,209,0)" fg:x="37494" fg:w="26"/><text x="71.7679%" y="223.50"></text></g><g><title>tailcall`_mi_page_try_use_delayed_free (6 samples, 0.01%)</title><rect x="71.5675%" y="213" width="0.0114%" height="15" fill="rgb(240,116,54)" fg:x="37520" fg:w="6"/><text x="71.8175%" y="223.50"></text></g><g><title>tailcall`mi_page_fresh_alloc (7 samples, 0.01%)</title><rect x="71.6038%" y="197" width="0.0134%" height="15" fill="rgb(216,10,36)" fg:x="37539" fg:w="7"/><text x="71.8538%" y="207.50"></text></g><g><title>tailcall`mi_segments_page_alloc (7 samples, 0.01%)</title><rect x="71.6038%" y="181" width="0.0134%" height="15" fill="rgb(222,72,44)" fg:x="37539" fg:w="7"/><text x="71.8538%" y="191.50"></text></g><g><title>tailcall`_mi_malloc_generic (62 samples, 0.12%)</title><rect x="71.5027%" y="229" width="0.1183%" height="15" fill="rgb(232,159,9)" fg:x="37486" fg:w="62"/><text x="71.7527%" y="239.50"></text></g><g><title>tailcall`mi_find_page (22 samples, 0.04%)</title><rect x="71.5790%" y="213" width="0.0420%" height="15" fill="rgb(210,39,32)" fg:x="37526" fg:w="22"/><text x="71.8290%" y="223.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (65 samples, 0.12%)</title><rect x="71.4989%" y="245" width="0.1240%" height="15" fill="rgb(216,194,45)" fg:x="37484" fg:w="65"/><text x="71.7489%" y="255.50"></text></g><g><title>tailcall`mi_malloc_aligned (33 samples, 0.06%)</title><rect x="71.6229%" y="245" width="0.0629%" height="15" fill="rgb(218,18,35)" fg:x="37549" fg:w="33"/><text x="71.8729%" y="255.50"></text></g><g><title>tailcall`tailcall::core::json::graphql::_&lt;impl tailcall::core::json::json_like::JsonLike for async_graphql_value::ConstValue&gt;::get_key (60 samples, 0.11%)</title><rect x="71.6858%" y="245" width="0.1144%" height="15" fill="rgb(207,83,51)" fg:x="37582" fg:w="60"/><text x="71.9358%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (73 samples, 0.14%)</title><rect x="71.9528%" y="229" width="0.1392%" height="15" fill="rgb(225,63,43)" fg:x="37722" fg:w="73"/><text x="72.2028%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (127 samples, 0.24%)</title><rect x="72.0921%" y="229" width="0.2422%" height="15" fill="rgb(207,57,36)" fg:x="37795" fg:w="127"/><text x="72.3421%" y="239.50"></text></g><g><title>tailcall`_mi_free_delayed_block (19 samples, 0.04%)</title><rect x="72.4831%" y="181" width="0.0362%" height="15" fill="rgb(216,99,33)" fg:x="38000" fg:w="19"/><text x="72.7331%" y="191.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (27 samples, 0.05%)</title><rect x="72.4812%" y="213" width="0.0515%" height="15" fill="rgb(225,42,16)" fg:x="37999" fg:w="27"/><text x="72.7312%" y="223.50"></text></g><g><title>tailcall`_mi_malloc_generic (27 samples, 0.05%)</title><rect x="72.4812%" y="197" width="0.0515%" height="15" fill="rgb(220,201,45)" fg:x="37999" fg:w="27"/><text x="72.7312%" y="207.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as core::clone::Clone&gt;::clone (138 samples, 0.26%)</title><rect x="72.3343%" y="229" width="0.2632%" height="15" fill="rgb(225,33,4)" fg:x="37922" fg:w="138"/><text x="72.5843%" y="239.50"></text></g><g><title>tailcall`mi_malloc_aligned (34 samples, 0.06%)</title><rect x="72.5327%" y="213" width="0.0649%" height="15" fill="rgb(224,33,50)" fg:x="38026" fg:w="34"/><text x="72.7827%" y="223.50"></text></g><g><title>tailcall`DYLD-STUB$$memcmp (14 samples, 0.03%)</title><rect x="72.5976%" y="229" width="0.0267%" height="15" fill="rgb(246,198,51)" fg:x="38060" fg:w="14"/><text x="72.8476%" y="239.50"></text></g><g><title>tailcall`DYLD-STUB$$memcpy (23 samples, 0.04%)</title><rect x="72.6243%" y="229" width="0.0439%" height="15" fill="rgb(205,22,4)" fg:x="38074" fg:w="23"/><text x="72.8743%" y="239.50"></text></g><g><title>tailcall`alloc::sync::Arc&lt;T,A&gt;::drop_slow (44 samples, 0.08%)</title><rect x="72.6681%" y="229" width="0.0839%" height="15" fill="rgb(206,3,8)" fg:x="38097" fg:w="44"/><text x="72.9181%" y="239.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (34 samples, 0.06%)</title><rect x="72.7521%" y="229" width="0.0649%" height="15" fill="rgb(251,23,15)" fg:x="38141" fg:w="34"/><text x="73.0021%" y="239.50"></text></g><g><title>tailcall`mi_free (49 samples, 0.09%)</title><rect x="72.8207%" y="229" width="0.0935%" height="15" fill="rgb(252,88,28)" fg:x="38177" fg:w="49"/><text x="73.0707%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (29 samples, 0.06%)</title><rect x="73.2747%" y="213" width="0.0553%" height="15" fill="rgb(212,127,14)" fg:x="38415" fg:w="29"/><text x="73.5247%" y="223.50"></text></g><g><title>tailcall`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,233 samples, 2.35%)</title><rect x="73.3300%" y="213" width="2.3519%" height="15" fill="rgb(247,145,37)" fg:x="38444" fg:w="1233"/><text x="73.5800%" y="223.50">t..</text></g><g><title>tailcall`indexmap::map::IndexMap&lt;K,V,S&gt;::hash (157 samples, 0.30%)</title><rect x="75.6819%" y="213" width="0.2995%" height="15" fill="rgb(209,117,53)" fg:x="39677" fg:w="157"/><text x="75.9319%" y="223.50"></text></g><g><title>tailcall`_mi_malloc_generic (6 samples, 0.01%)</title><rect x="75.9814%" y="197" width="0.0114%" height="15" fill="rgb(212,90,42)" fg:x="39834" fg:w="6"/><text x="76.2314%" y="207.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (7 samples, 0.01%)</title><rect x="75.9814%" y="213" width="0.0134%" height="15" fill="rgb(218,164,37)" fg:x="39834" fg:w="7"/><text x="76.2314%" y="223.50"></text></g><g><title>tailcall`tailcall::core::jit::exec::ExecutorInner&lt;Input,Output,Error,Exec&gt;::execute::_{{closure}} (3,331 samples, 6.35%)</title><rect x="69.8108%" y="309" width="6.3537%" height="15" fill="rgb(246,65,34)" fg:x="36599" fg:w="3331"/><text x="70.0608%" y="319.50">tailcall..</text></g><g><title>tailcall`tailcall::core::json::json_like_list::JsonLikeList::map_ref (3,088 samples, 5.89%)</title><rect x="70.2743%" y="293" width="5.8902%" height="15" fill="rgb(231,100,33)" fg:x="36842" fg:w="3088"/><text x="70.5243%" y="303.50">tailcal..</text></g><g><title>tailcall`tailcall::core::json::json_like_list::JsonLikeList::map_ref (2,999 samples, 5.72%)</title><rect x="70.4441%" y="277" width="5.7204%" height="15" fill="rgb(228,126,14)" fg:x="36931" fg:w="2999"/><text x="70.6941%" y="287.50">tailcal..</text></g><g><title>tailcall`tailcall::core::json::json_like_list::JsonLikeList::map_ref (2,801 samples, 5.34%)</title><rect x="70.8217%" y="261" width="5.3428%" height="15" fill="rgb(215,173,21)" fg:x="37129" fg:w="2801"/><text x="71.0717%" y="271.50">tailcal..</text></g><g><title>tailcall`tailcall::core::json::json_like_list::JsonLikeList::map_ref (2,288 samples, 4.36%)</title><rect x="71.8003%" y="245" width="4.3642%" height="15" fill="rgb(210,6,40)" fg:x="37642" fg:w="2288"/><text x="72.0503%" y="255.50">tailc..</text></g><g><title>tailcall`tailcall::core::json::graphql::_&lt;impl tailcall::core::json::json_like::JsonLike for async_graphql_value::ConstValue&gt;::get_key (1,699 samples, 3.24%)</title><rect x="72.9237%" y="229" width="3.2408%" height="15" fill="rgb(212,48,18)" fg:x="38231" fg:w="1699"/><text x="73.1737%" y="239.50">tai..</text></g><g><title>tailcall`mi_malloc_aligned (89 samples, 0.17%)</title><rect x="75.9947%" y="213" width="0.1698%" height="15" fill="rgb(230,214,11)" fg:x="39841" fg:w="89"/><text x="76.2447%" y="223.50"></text></g><g><title>tailcall`tailcall::core::jit::exec::ExecutorInner&lt;Input,Output,Error,Exec&gt;::iter_field::_{{closure}} (3,405 samples, 6.49%)</title><rect x="69.6868%" y="325" width="6.4949%" height="15" fill="rgb(254,105,39)" fg:x="36534" fg:w="3405"/><text x="69.9368%" y="335.50">tailcall`..</text></g><g><title>tailcall`tailcall::core::json::json_like_list::JsonLikeList::map_ref (7 samples, 0.01%)</title><rect x="76.1683%" y="309" width="0.0134%" height="15" fill="rgb(245,158,5)" fg:x="39932" fg:w="7"/><text x="76.4183%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (27 samples, 0.05%)</title><rect x="76.5326%" y="229" width="0.0515%" height="15" fill="rgb(249,208,11)" fg:x="40123" fg:w="27"/><text x="76.7826%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (6 samples, 0.01%)</title><rect x="76.7444%" y="213" width="0.0114%" height="15" fill="rgb(210,39,28)" fg:x="40234" fg:w="6"/><text x="76.9944%" y="223.50"></text></g><g><title>tailcall`mi_find_page (9 samples, 0.02%)</title><rect x="76.7806%" y="181" width="0.0172%" height="15" fill="rgb(211,56,53)" fg:x="40253" fg:w="9"/><text x="77.0306%" y="191.50"></text></g><g><title>tailcall`_mi_malloc_generic (26 samples, 0.05%)</title><rect x="76.7577%" y="197" width="0.0496%" height="15" fill="rgb(226,201,30)" fg:x="40241" fg:w="26"/><text x="77.0077%" y="207.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (28 samples, 0.05%)</title><rect x="76.7558%" y="213" width="0.0534%" height="15" fill="rgb(239,101,34)" fg:x="40240" fg:w="28"/><text x="77.0058%" y="223.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as core::clone::Clone&gt;::clone (147 samples, 0.28%)</title><rect x="76.5841%" y="229" width="0.2804%" height="15" fill="rgb(226,209,5)" fg:x="40150" fg:w="147"/><text x="76.8341%" y="239.50"></text></g><g><title>tailcall`mi_malloc_aligned (29 samples, 0.06%)</title><rect x="76.8092%" y="213" width="0.0553%" height="15" fill="rgb(250,105,47)" fg:x="40268" fg:w="29"/><text x="77.0592%" y="223.50"></text></g><g><title>tailcall`DYLD-STUB$$memcpy (7 samples, 0.01%)</title><rect x="76.8645%" y="229" width="0.0134%" height="15" fill="rgb(230,72,3)" fg:x="40297" fg:w="7"/><text x="77.1145%" y="239.50"></text></g><g><title>tailcall`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone_from (335 samples, 0.64%)</title><rect x="76.2484%" y="245" width="0.6390%" height="15" fill="rgb(232,218,39)" fg:x="39974" fg:w="335"/><text x="76.4984%" y="255.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as core::clone::Clone&gt;::clone (97 samples, 0.19%)</title><rect x="76.8874%" y="245" width="0.1850%" height="15" fill="rgb(248,166,6)" fg:x="40309" fg:w="97"/><text x="77.1374%" y="255.50"></text></g><g><title>tailcall`core::clone::Clone::clone_from (87 samples, 0.17%)</title><rect x="77.0782%" y="245" width="0.1659%" height="15" fill="rgb(247,89,20)" fg:x="40409" fg:w="87"/><text x="77.3282%" y="255.50"></text></g><g><title>tailcall`_mi_free_delayed_block (8 samples, 0.02%)</title><rect x="77.2689%" y="181" width="0.0153%" height="15" fill="rgb(248,130,54)" fg:x="40509" fg:w="8"/><text x="77.5189%" y="191.50"></text></g><g><title>tailcall`mi_page_fresh_alloc (9 samples, 0.02%)</title><rect x="77.3223%" y="165" width="0.0172%" height="15" fill="rgb(234,196,4)" fg:x="40537" fg:w="9"/><text x="77.5723%" y="175.50"></text></g><g><title>tailcall`mi_segments_page_alloc (9 samples, 0.02%)</title><rect x="77.3223%" y="149" width="0.0172%" height="15" fill="rgb(250,143,31)" fg:x="40537" fg:w="9"/><text x="77.5723%" y="159.50"></text></g><g><title>tailcall`mi_find_page (30 samples, 0.06%)</title><rect x="77.2880%" y="181" width="0.0572%" height="15" fill="rgb(211,110,34)" fg:x="40519" fg:w="30"/><text x="77.5380%" y="191.50"></text></g><g><title>tailcall`_mi_malloc_generic (46 samples, 0.09%)</title><rect x="77.2632%" y="197" width="0.0877%" height="15" fill="rgb(215,124,48)" fg:x="40506" fg:w="46"/><text x="77.5132%" y="207.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (51 samples, 0.10%)</title><rect x="77.2575%" y="213" width="0.0973%" height="15" fill="rgb(216,46,13)" fg:x="40503" fg:w="51"/><text x="77.5075%" y="223.50"></text></g><g><title>tailcall`alloc::raw_vec::finish_grow (55 samples, 0.10%)</title><rect x="77.2517%" y="229" width="0.1049%" height="15" fill="rgb(205,184,25)" fg:x="40500" fg:w="55"/><text x="77.5017%" y="239.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as core::clone::Clone&gt;::clone (591 samples, 1.13%)</title><rect x="76.2332%" y="261" width="1.1273%" height="15" fill="rgb(228,1,10)" fg:x="39966" fg:w="591"/><text x="76.4832%" y="271.50"></text></g><g><title>tailcall`indexmap::map::core::RefMut&lt;K,V&gt;::reserve_entries (61 samples, 0.12%)</title><rect x="77.2441%" y="245" width="0.1164%" height="15" fill="rgb(213,116,27)" fg:x="40496" fg:w="61"/><text x="77.4941%" y="255.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as core::clone::Clone&gt;::clone (607 samples, 1.16%)</title><rect x="76.2065%" y="277" width="1.1578%" height="15" fill="rgb(241,95,50)" fg:x="39952" fg:w="607"/><text x="76.4565%" y="287.50"></text></g><g><title>tailcall`tailcall::core::jit::exec::ExecutorInner&lt;Input,Output,Error,Exec&gt;::iter_field::_{{closure}} (4,338 samples, 8.27%)</title><rect x="69.1069%" y="357" width="8.2745%" height="15" fill="rgb(238,48,32)" fg:x="36230" fg:w="4338"/><text x="69.3569%" y="367.50">tailcall`tai..</text></g><g><title>tailcall`tailcall::core::jit::exec::ExecutorInner&lt;Input,Output,Error,Exec&gt;::execute::_{{closure}} (4,331 samples, 8.26%)</title><rect x="69.1203%" y="341" width="8.2612%" height="15" fill="rgb(235,113,49)" fg:x="36237" fg:w="4331"/><text x="69.3703%" y="351.50">tailcall`tai..</text></g><g><title>tailcall`tailcall::core::json::json_like_list::JsonLikeList::map_ref (629 samples, 1.20%)</title><rect x="76.1817%" y="325" width="1.1998%" height="15" fill="rgb(205,127,43)" fg:x="39939" fg:w="629"/><text x="76.4317%" y="335.50"></text></g><g><title>tailcall`tailcall::core::json::json_like_list::JsonLikeList::map_ref (627 samples, 1.20%)</title><rect x="76.1855%" y="309" width="1.1960%" height="15" fill="rgb(250,162,2)" fg:x="39941" fg:w="627"/><text x="76.4355%" y="319.50"></text></g><g><title>tailcall`tailcall::core::json::json_like_list::JsonLikeList::map_ref (617 samples, 1.18%)</title><rect x="76.2046%" y="293" width="1.1769%" height="15" fill="rgb(220,13,41)" fg:x="39951" fg:w="617"/><text x="76.4546%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (10 samples, 0.02%)</title><rect x="77.4616%" y="245" width="0.0191%" height="15" fill="rgb(249,221,25)" fg:x="40610" fg:w="10"/><text x="77.7116%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (27 samples, 0.05%)</title><rect x="77.7381%" y="229" width="0.0515%" height="15" fill="rgb(215,208,19)" fg:x="40755" fg:w="27"/><text x="77.9881%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (8 samples, 0.02%)</title><rect x="77.9365%" y="213" width="0.0153%" height="15" fill="rgb(236,175,2)" fg:x="40859" fg:w="8"/><text x="78.1865%" y="223.50"></text></g><g><title>tailcall`_mi_malloc_generic (8 samples, 0.02%)</title><rect x="77.9537%" y="197" width="0.0153%" height="15" fill="rgb(241,52,2)" fg:x="40868" fg:w="8"/><text x="78.2037%" y="207.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (10 samples, 0.02%)</title><rect x="77.9518%" y="213" width="0.0191%" height="15" fill="rgb(248,140,14)" fg:x="40867" fg:w="10"/><text x="78.2018%" y="223.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as core::clone::Clone&gt;::clone (127 samples, 0.24%)</title><rect x="77.7896%" y="229" width="0.2422%" height="15" fill="rgb(253,22,42)" fg:x="40782" fg:w="127"/><text x="78.0396%" y="239.50"></text></g><g><title>tailcall`mi_malloc_aligned (32 samples, 0.06%)</title><rect x="77.9709%" y="213" width="0.0610%" height="15" fill="rgb(234,61,47)" fg:x="40877" fg:w="32"/><text x="78.2209%" y="223.50"></text></g><g><title>tailcall`DYLD-STUB$$memcpy (7 samples, 0.01%)</title><rect x="78.0319%" y="229" width="0.0134%" height="15" fill="rgb(208,226,15)" fg:x="40909" fg:w="7"/><text x="78.2819%" y="239.50"></text></g><g><title>tailcall`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone_from (304 samples, 0.58%)</title><rect x="77.4806%" y="245" width="0.5799%" height="15" fill="rgb(217,221,4)" fg:x="40620" fg:w="304"/><text x="77.7306%" y="255.50"></text></g><g><title>tailcall`mi_malloc_aligned (8 samples, 0.02%)</title><rect x="78.0452%" y="229" width="0.0153%" height="15" fill="rgb(212,174,34)" fg:x="40916" fg:w="8"/><text x="78.2952%" y="239.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as core::clone::Clone&gt;::clone (90 samples, 0.17%)</title><rect x="78.0605%" y="245" width="0.1717%" height="15" fill="rgb(253,83,4)" fg:x="40924" fg:w="90"/><text x="78.3105%" y="255.50"></text></g><g><title>tailcall`core::clone::Clone::clone_from (76 samples, 0.14%)</title><rect x="78.2379%" y="245" width="0.1450%" height="15" fill="rgb(250,195,49)" fg:x="41017" fg:w="76"/><text x="78.4879%" y="255.50"></text></g><g><title>tailcall`_mi_free_delayed_block (14 samples, 0.03%)</title><rect x="78.4000%" y="181" width="0.0267%" height="15" fill="rgb(241,192,25)" fg:x="41102" fg:w="14"/><text x="78.6500%" y="191.50"></text></g><g><title>tailcall`mi_find_page (20 samples, 0.04%)</title><rect x="78.4286%" y="181" width="0.0381%" height="15" fill="rgb(208,124,10)" fg:x="41117" fg:w="20"/><text x="78.6786%" y="191.50"></text></g><g><title>tailcall`_mi_malloc_generic (43 samples, 0.08%)</title><rect x="78.3924%" y="197" width="0.0820%" height="15" fill="rgb(222,33,0)" fg:x="41098" fg:w="43"/><text x="78.6424%" y="207.50"></text></g><g><title>tailcall`alloc::raw_vec::finish_grow (50 samples, 0.10%)</title><rect x="78.3829%" y="229" width="0.0954%" height="15" fill="rgb(234,209,28)" fg:x="41093" fg:w="50"/><text x="78.6329%" y="239.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (46 samples, 0.09%)</title><rect x="78.3905%" y="213" width="0.0877%" height="15" fill="rgb(224,11,23)" fg:x="41097" fg:w="46"/><text x="78.6405%" y="223.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as core::clone::Clone&gt;::clone (538 samples, 1.03%)</title><rect x="77.4539%" y="261" width="1.0262%" height="15" fill="rgb(232,99,1)" fg:x="40606" fg:w="538"/><text x="77.7039%" y="271.50"></text></g><g><title>tailcall`indexmap::map::core::RefMut&lt;K,V&gt;::reserve_entries (51 samples, 0.10%)</title><rect x="78.3829%" y="245" width="0.0973%" height="15" fill="rgb(237,95,45)" fg:x="41093" fg:w="51"/><text x="78.6329%" y="255.50"></text></g><g><title>tailcall`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone_from (566 samples, 1.08%)</title><rect x="77.4082%" y="293" width="1.0796%" height="15" fill="rgb(208,109,11)" fg:x="40582" fg:w="566"/><text x="77.6582%" y="303.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as core::clone::Clone&gt;::clone (560 samples, 1.07%)</title><rect x="77.4196%" y="277" width="1.0682%" height="15" fill="rgb(216,190,48)" fg:x="40588" fg:w="560"/><text x="77.6696%" y="287.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as core::clone::Clone&gt;::clone (585 samples, 1.12%)</title><rect x="77.3986%" y="309" width="1.1159%" height="15" fill="rgb(251,171,36)" fg:x="40577" fg:w="585"/><text x="77.6486%" y="319.50"></text></g><g><title>tailcall`indexmap::map::core::RefMut&lt;K,V&gt;::reserve_entries (9 samples, 0.02%)</title><rect x="78.4973%" y="293" width="0.0172%" height="15" fill="rgb(230,62,22)" fg:x="41153" fg:w="9"/><text x="78.7473%" y="303.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as core::clone::Clone&gt;::clone (593 samples, 1.13%)</title><rect x="77.3910%" y="325" width="1.1311%" height="15" fill="rgb(225,114,35)" fg:x="40573" fg:w="593"/><text x="77.6410%" y="335.50"></text></g><g><title>tailcall`tailcall::core::jit::exec::ExecutorInner&lt;Input,Output,Error,Exec&gt;::execute::_{{closure}} (9,966 samples, 19.01%)</title><rect x="59.5201%" y="405" width="19.0097%" height="15" fill="rgb(215,118,42)" fg:x="31204" fg:w="9966"/><text x="59.7701%" y="415.50">tailcall`tailcall::core::jit::..</text></g><g><title>tailcall`tailcall::core::jit::exec::ExecutorInner&lt;Input,Output,Error,Exec&gt;::iter_field::_{{closure}} (5,168 samples, 9.86%)</title><rect x="68.6720%" y="389" width="9.8577%" height="15" fill="rgb(243,119,21)" fg:x="36002" fg:w="5168"/><text x="68.9220%" y="399.50">tailcall`tailc..</text></g><g><title>tailcall`tailcall::core::jit::exec::ExecutorInner&lt;Input,Output,Error,Exec&gt;::execute::_{{closure}} (5,155 samples, 9.83%)</title><rect x="68.6968%" y="373" width="9.8329%" height="15" fill="rgb(252,177,53)" fg:x="36015" fg:w="5155"/><text x="68.9468%" y="383.50">tailcall`tailc..</text></g><g><title>tailcall`tailcall::core::json::json_like_list::JsonLikeList::map_ref (602 samples, 1.15%)</title><rect x="77.3815%" y="357" width="1.1483%" height="15" fill="rgb(237,209,29)" fg:x="40568" fg:w="602"/><text x="77.6315%" y="367.50"></text></g><g><title>tailcall`tailcall::core::json::json_like_list::JsonLikeList::map_ref (601 samples, 1.15%)</title><rect x="77.3834%" y="341" width="1.1464%" height="15" fill="rgb(212,65,23)" fg:x="40569" fg:w="601"/><text x="77.6334%" y="351.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (28 samples, 0.05%)</title><rect x="78.5603%" y="373" width="0.0534%" height="15" fill="rgb(230,222,46)" fg:x="41186" fg:w="28"/><text x="78.8103%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (25 samples, 0.05%)</title><rect x="78.6327%" y="357" width="0.0477%" height="15" fill="rgb(215,135,32)" fg:x="41224" fg:w="25"/><text x="78.8827%" y="367.50"></text></g><g><title>tailcall`tailcall::core::jit::model::Field&lt;Input&gt;::try_map (107 samples, 0.20%)</title><rect x="78.5297%" y="405" width="0.2041%" height="15" fill="rgb(246,101,22)" fg:x="41170" fg:w="107"/><text x="78.7797%" y="415.50"></text></g><g><title>tailcall`tailcall::core::jit::model::Field&lt;Input&gt;::try_map (92 samples, 0.18%)</title><rect x="78.5583%" y="389" width="0.1755%" height="15" fill="rgb(206,107,13)" fg:x="41185" fg:w="92"/><text x="78.8083%" y="399.50"></text></g><g><title>tailcall`tailcall::core::jit::model::Field&lt;Input&gt;::try_map (61 samples, 0.12%)</title><rect x="78.6175%" y="373" width="0.1164%" height="15" fill="rgb(250,100,44)" fg:x="41216" fg:w="61"/><text x="78.8675%" y="383.50"></text></g><g><title>tailcall`tailcall::core::jit::model::Field&lt;Input&gt;::try_map (28 samples, 0.05%)</title><rect x="78.6804%" y="357" width="0.0534%" height="15" fill="rgb(231,147,38)" fg:x="41249" fg:w="28"/><text x="78.9304%" y="367.50"></text></g><g><title>tailcall`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (9 samples, 0.02%)</title><rect x="78.7834%" y="373" width="0.0172%" height="15" fill="rgb(229,8,40)" fg:x="41303" fg:w="9"/><text x="79.0334%" y="383.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (8 samples, 0.02%)</title><rect x="78.8349%" y="357" width="0.0153%" height="15" fill="rgb(221,135,30)" fg:x="41330" fg:w="8"/><text x="79.0849%" y="367.50"></text></g><g><title>tailcall`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (9 samples, 0.02%)</title><rect x="78.8559%" y="357" width="0.0172%" height="15" fill="rgb(249,193,18)" fg:x="41341" fg:w="9"/><text x="79.1059%" y="367.50"></text></g><g><title>tailcall`alloc::raw_vec::finish_grow (8 samples, 0.02%)</title><rect x="78.8578%" y="341" width="0.0153%" height="15" fill="rgb(209,133,39)" fg:x="41342" fg:w="8"/><text x="79.1078%" y="351.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (9 samples, 0.02%)</title><rect x="78.9665%" y="341" width="0.0172%" height="15" fill="rgb(232,100,14)" fg:x="41399" fg:w="9"/><text x="79.2165%" y="351.50"></text></g><g><title>tailcall`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (10 samples, 0.02%)</title><rect x="78.9837%" y="341" width="0.0191%" height="15" fill="rgb(224,185,1)" fg:x="41408" fg:w="10"/><text x="79.2337%" y="351.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (92 samples, 0.18%)</title><rect x="79.0982%" y="325" width="0.1755%" height="15" fill="rgb(223,139,8)" fg:x="41468" fg:w="92"/><text x="79.3482%" y="335.50"></text></g><g><title>tailcall`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8 samples, 0.02%)</title><rect x="79.2736%" y="325" width="0.0153%" height="15" fill="rgb(232,213,38)" fg:x="41560" fg:w="8"/><text x="79.5236%" y="335.50"></text></g><g><title>tailcall`DYLD-STUB$$memcpy (22 samples, 0.04%)</title><rect x="79.2889%" y="325" width="0.0420%" height="15" fill="rgb(207,94,22)" fg:x="41568" fg:w="22"/><text x="79.5389%" y="335.50"></text></g><g><title>tailcall`_mi_heap_realloc_zero (7 samples, 0.01%)</title><rect x="79.3499%" y="293" width="0.0134%" height="15" fill="rgb(219,183,54)" fg:x="41600" fg:w="7"/><text x="79.5999%" y="303.50"></text></g><g><title>tailcall`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (18 samples, 0.03%)</title><rect x="79.3309%" y="325" width="0.0343%" height="15" fill="rgb(216,185,54)" fg:x="41590" fg:w="18"/><text x="79.5809%" y="335.50"></text></g><g><title>tailcall`alloc::raw_vec::finish_grow (15 samples, 0.03%)</title><rect x="79.3366%" y="309" width="0.0286%" height="15" fill="rgb(254,217,39)" fg:x="41593" fg:w="15"/><text x="79.5866%" y="319.50"></text></g><g><title>tailcall`indexmap::map::IndexMap&lt;K,V,S&gt;::get (10 samples, 0.02%)</title><rect x="79.3747%" y="325" width="0.0191%" height="15" fill="rgb(240,178,23)" fg:x="41613" fg:w="10"/><text x="79.6247%" y="335.50"></text></g><g><title>tailcall`indexmap::map::IndexMap&lt;K,V,S&gt;::get_index_of (98 samples, 0.19%)</title><rect x="79.3938%" y="325" width="0.1869%" height="15" fill="rgb(218,11,47)" fg:x="41623" fg:w="98"/><text x="79.6438%" y="335.50"></text></g><g><title>tailcall`mi_free (50 samples, 0.10%)</title><rect x="79.5807%" y="325" width="0.0954%" height="15" fill="rgb(218,51,51)" fg:x="41721" fg:w="50"/><text x="79.8307%" y="335.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (17 samples, 0.03%)</title><rect x="80.6546%" y="309" width="0.0324%" height="15" fill="rgb(238,126,27)" fg:x="42284" fg:w="17"/><text x="80.9046%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (92 samples, 0.18%)</title><rect x="80.6871%" y="309" width="0.1755%" height="15" fill="rgb(249,202,22)" fg:x="42301" fg:w="92"/><text x="80.9371%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (62 samples, 0.12%)</title><rect x="80.8625%" y="309" width="0.1183%" height="15" fill="rgb(254,195,49)" fg:x="42393" fg:w="62"/><text x="81.1125%" y="319.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as core::clone::Clone&gt;::clone (27 samples, 0.05%)</title><rect x="80.9808%" y="309" width="0.0515%" height="15" fill="rgb(208,123,14)" fg:x="42455" fg:w="27"/><text x="81.2308%" y="319.50"></text></g><g><title>tailcall`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (624 samples, 1.19%)</title><rect x="81.0323%" y="309" width="1.1902%" height="15" fill="rgb(224,200,8)" fg:x="42482" fg:w="624"/><text x="81.2823%" y="319.50"></text></g><g><title>tailcall`DYLD-STUB$$memcmp (13 samples, 0.02%)</title><rect x="82.2226%" y="309" width="0.0248%" height="15" fill="rgb(217,61,36)" fg:x="43106" fg:w="13"/><text x="82.4726%" y="319.50"></text></g><g><title>tailcall`DYLD-STUB$$memcpy (11 samples, 0.02%)</title><rect x="82.2474%" y="309" width="0.0210%" height="15" fill="rgb(206,35,45)" fg:x="43119" fg:w="11"/><text x="82.4974%" y="319.50"></text></g><g><title>tailcall`core::hash::BuildHasher::hash_one (128 samples, 0.24%)</title><rect x="82.2683%" y="309" width="0.2442%" height="15" fill="rgb(217,65,33)" fg:x="43130" fg:w="128"/><text x="82.5183%" y="319.50"></text></g><g><title>tailcall`indexmap::map::IndexMap&lt;K,V,S&gt;::get (68 samples, 0.13%)</title><rect x="82.5125%" y="309" width="0.1297%" height="15" fill="rgb(222,158,48)" fg:x="43258" fg:w="68"/><text x="82.7625%" y="319.50"></text></g><g><title>tailcall`indexmap::map::IndexMap&lt;K,V,S&gt;::get_index_of (931 samples, 1.78%)</title><rect x="82.6422%" y="309" width="1.7758%" height="15" fill="rgb(254,2,54)" fg:x="43326" fg:w="931"/><text x="82.8922%" y="319.50">t..</text></g><g><title>tailcall`indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (68 samples, 0.13%)</title><rect x="84.4180%" y="309" width="0.1297%" height="15" fill="rgb(250,143,38)" fg:x="44257" fg:w="68"/><text x="84.6680%" y="319.50"></text></g><g><title>tailcall`_mi_free_delayed_block (6 samples, 0.01%)</title><rect x="84.5477%" y="277" width="0.0114%" height="15" fill="rgb(248,25,0)" fg:x="44325" fg:w="6"/><text x="84.7977%" y="287.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (7 samples, 0.01%)</title><rect x="84.5477%" y="309" width="0.0134%" height="15" fill="rgb(206,152,27)" fg:x="44325" fg:w="7"/><text x="84.7977%" y="319.50"></text></g><g><title>tailcall`_mi_malloc_generic (7 samples, 0.01%)</title><rect x="84.5477%" y="293" width="0.0134%" height="15" fill="rgb(240,77,30)" fg:x="44325" fg:w="7"/><text x="84.7977%" y="303.50"></text></g><g><title>tailcall`mi_malloc_aligned (58 samples, 0.11%)</title><rect x="84.5611%" y="309" width="0.1106%" height="15" fill="rgb(231,5,3)" fg:x="44332" fg:w="58"/><text x="84.8111%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (13 samples, 0.02%)</title><rect x="85.1829%" y="293" width="0.0248%" height="15" fill="rgb(207,226,32)" fg:x="44658" fg:w="13"/><text x="85.4329%" y="303.50"></text></g><g><title>tailcall`_mi_free_delayed_block (10 samples, 0.02%)</title><rect x="85.2936%" y="245" width="0.0191%" height="15" fill="rgb(222,207,47)" fg:x="44716" fg:w="10"/><text x="85.5436%" y="255.50"></text></g><g><title>tailcall`_mi_malloc_generic (23 samples, 0.04%)</title><rect x="85.2897%" y="261" width="0.0439%" height="15" fill="rgb(229,115,45)" fg:x="44714" fg:w="23"/><text x="85.5397%" y="271.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (25 samples, 0.05%)</title><rect x="85.2878%" y="277" width="0.0477%" height="15" fill="rgb(224,191,6)" fg:x="44713" fg:w="25"/><text x="85.5378%" y="287.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as core::clone::Clone&gt;::clone (88 samples, 0.17%)</title><rect x="85.2077%" y="293" width="0.1679%" height="15" fill="rgb(230,227,24)" fg:x="44671" fg:w="88"/><text x="85.4577%" y="303.50"></text></g><g><title>tailcall`mi_malloc_aligned (21 samples, 0.04%)</title><rect x="85.3355%" y="277" width="0.0401%" height="15" fill="rgb(228,80,19)" fg:x="44738" fg:w="21"/><text x="85.5855%" y="287.50"></text></g><g><title>tailcall`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (393 samples, 0.75%)</title><rect x="85.3756%" y="293" width="0.7496%" height="15" fill="rgb(247,229,0)" fg:x="44759" fg:w="393"/><text x="85.6256%" y="303.50"></text></g><g><title>tailcall`core::hash::BuildHasher::hash_one (9 samples, 0.02%)</title><rect x="86.1271%" y="293" width="0.0172%" height="15" fill="rgb(237,194,15)" fg:x="45153" fg:w="9"/><text x="86.3771%" y="303.50"></text></g><g><title>tailcall`indexmap::map::IndexMap&lt;K,V,S&gt;::get (151 samples, 0.29%)</title><rect x="86.1443%" y="293" width="0.2880%" height="15" fill="rgb(219,203,20)" fg:x="45162" fg:w="151"/><text x="86.3943%" y="303.50"></text></g><g><title>tailcall`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (534 samples, 1.02%)</title><rect x="86.5906%" y="277" width="1.0186%" height="15" fill="rgb(234,128,8)" fg:x="45396" fg:w="534"/><text x="86.8406%" y="287.50"></text></g><g><title>tailcall`tailcall::core::scalar::Scalar::find (821 samples, 1.57%)</title><rect x="86.4342%" y="293" width="1.5660%" height="15" fill="rgb(248,202,8)" fg:x="45314" fg:w="821"/><text x="86.6842%" y="303.50"></text></g><g><title>tailcall`core::hash::BuildHasher::hash_one (205 samples, 0.39%)</title><rect x="87.6092%" y="277" width="0.3910%" height="15" fill="rgb(206,104,37)" fg:x="45930" fg:w="205"/><text x="87.8592%" y="287.50"></text></g><g><title>tailcall`tailcall::core::scalar::Scalar::is_predefined (36 samples, 0.07%)</title><rect x="88.0002%" y="293" width="0.0687%" height="15" fill="rgb(223,8,27)" fg:x="46135" fg:w="36"/><text x="88.2502%" y="303.50"></text></g><g><title>tailcall`tailcall::core::jit::synth::synth::Synth&lt;Value&gt;::iter_inner (1,802 samples, 3.44%)</title><rect x="84.6717%" y="309" width="3.4372%" height="15" fill="rgb(216,217,28)" fg:x="44390" fg:w="1802"/><text x="84.9217%" y="319.50">tai..</text></g><g><title>tailcall`tailcall::core::scalar::Scalar::validate (21 samples, 0.04%)</title><rect x="88.0689%" y="293" width="0.0401%" height="15" fill="rgb(249,199,1)" fg:x="46171" fg:w="21"/><text x="88.3189%" y="303.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (18 samples, 0.03%)</title><rect x="88.2024%" y="293" width="0.0343%" height="15" fill="rgb(240,85,17)" fg:x="46241" fg:w="18"/><text x="88.4524%" y="303.50"></text></g><g><title>tailcall`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (437 samples, 0.83%)</title><rect x="88.9444%" y="277" width="0.8336%" height="15" fill="rgb(206,108,45)" fg:x="46630" fg:w="437"/><text x="89.1944%" y="287.50"></text></g><g><title>tailcall`alloc::raw_vec::finish_grow (8 samples, 0.02%)</title><rect x="89.7799%" y="277" width="0.0153%" height="15" fill="rgb(245,210,41)" fg:x="47068" fg:w="8"/><text x="90.0299%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (13 samples, 0.02%)</title><rect x="90.1576%" y="261" width="0.0248%" height="15" fill="rgb(206,13,37)" fg:x="47266" fg:w="13"/><text x="90.4076%" y="271.50"></text></g><g><title>tailcall`_mi_malloc_generic (11 samples, 0.02%)</title><rect x="90.2339%" y="229" width="0.0210%" height="15" fill="rgb(250,61,18)" fg:x="47306" fg:w="11"/><text x="90.4839%" y="239.50"></text></g><g><title>tailcall`mi_find_page (7 samples, 0.01%)</title><rect x="90.2415%" y="213" width="0.0134%" height="15" fill="rgb(235,172,48)" fg:x="47310" fg:w="7"/><text x="90.4915%" y="223.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (12 samples, 0.02%)</title><rect x="90.2339%" y="245" width="0.0229%" height="15" fill="rgb(249,201,17)" fg:x="47306" fg:w="12"/><text x="90.4839%" y="255.50"></text></g><g><title>tailcall`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (247 samples, 0.47%)</title><rect x="89.7951%" y="277" width="0.4711%" height="15" fill="rgb(219,208,6)" fg:x="47076" fg:w="247"/><text x="90.0451%" y="287.50"></text></g><g><title>tailcall`hashbrown::raw::RawTableInner::fallible_with_capacity (42 samples, 0.08%)</title><rect x="90.1862%" y="261" width="0.0801%" height="15" fill="rgb(248,31,23)" fg:x="47281" fg:w="42"/><text x="90.4362%" y="271.50"></text></g><g><title>tailcall`indexmap::map::IndexMap&lt;K,V,S&gt;::hash (107 samples, 0.20%)</title><rect x="90.2739%" y="277" width="0.2041%" height="15" fill="rgb(245,15,42)" fg:x="47327" fg:w="107"/><text x="90.5239%" y="287.50"></text></g><g><title>tailcall`_mi_heap_realloc_zero (17 samples, 0.03%)</title><rect x="90.5867%" y="261" width="0.0324%" height="15" fill="rgb(222,217,39)" fg:x="47491" fg:w="17"/><text x="90.8367%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (73 samples, 0.14%)</title><rect x="90.6344%" y="245" width="0.1392%" height="15" fill="rgb(210,219,27)" fg:x="47516" fg:w="73"/><text x="90.8844%" y="255.50"></text></g><g><title>tailcall`_mi_free_delayed_block (88 samples, 0.17%)</title><rect x="90.8347%" y="213" width="0.1679%" height="15" fill="rgb(252,166,36)" fg:x="47621" fg:w="88"/><text x="91.0847%" y="223.50"></text></g><g><title>tailcall`_mi_page_try_use_delayed_free (10 samples, 0.02%)</title><rect x="91.0026%" y="213" width="0.0191%" height="15" fill="rgb(245,132,34)" fg:x="47709" fg:w="10"/><text x="91.2526%" y="223.50"></text></g><g><title>tailcall`mi_find_page (31 samples, 0.06%)</title><rect x="91.0216%" y="213" width="0.0591%" height="15" fill="rgb(236,54,3)" fg:x="47719" fg:w="31"/><text x="91.2716%" y="223.50"></text></g><g><title>tailcall`_mi_malloc_generic (144 samples, 0.27%)</title><rect x="90.8118%" y="229" width="0.2747%" height="15" fill="rgb(241,173,43)" fg:x="47609" fg:w="144"/><text x="91.0618%" y="239.50"></text></g><g><title>tailcall`_mi_heap_realloc_zero (167 samples, 0.32%)</title><rect x="90.7756%" y="245" width="0.3185%" height="15" fill="rgb(215,190,9)" fg:x="47590" fg:w="167"/><text x="91.0256%" y="255.50"></text></g><g><title>tailcall`indexmap::map::core::RefMut&lt;K,V&gt;::reserve_entries (333 samples, 0.64%)</title><rect x="90.4780%" y="277" width="0.6352%" height="15" fill="rgb(242,101,16)" fg:x="47434" fg:w="333"/><text x="90.7280%" y="287.50"></text></g><g><title>tailcall`alloc::raw_vec::finish_grow (259 samples, 0.49%)</title><rect x="90.6192%" y="261" width="0.4940%" height="15" fill="rgb(223,190,21)" fg:x="47508" fg:w="259"/><text x="90.8692%" y="271.50"></text></g><g><title>tailcall`indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (1,513 samples, 2.89%)</title><rect x="88.2482%" y="293" width="2.8860%" height="15" fill="rgb(215,228,25)" fg:x="46265" fg:w="1513"/><text x="88.4982%" y="303.50">ta..</text></g><g><title>tailcall`mi_free (11 samples, 0.02%)</title><rect x="91.1132%" y="277" width="0.0210%" height="15" fill="rgb(225,36,22)" fg:x="47767" fg:w="11"/><text x="91.3632%" y="287.50"></text></g><g><title>tailcall`_mi_malloc_generic (17 samples, 0.03%)</title><rect x="91.1418%" y="277" width="0.0324%" height="15" fill="rgb(251,106,46)" fg:x="47782" fg:w="17"/><text x="91.3918%" y="287.50"></text></g><g><title>tailcall`mi_page_free_list_extend (6 samples, 0.01%)</title><rect x="91.1628%" y="261" width="0.0114%" height="15" fill="rgb(208,90,1)" fg:x="47793" fg:w="6"/><text x="91.4128%" y="271.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (18 samples, 0.03%)</title><rect x="91.1418%" y="293" width="0.0343%" height="15" fill="rgb(243,10,4)" fg:x="47782" fg:w="18"/><text x="91.3918%" y="303.50"></text></g><g><title>tailcall`tailcall::core::json::graphql::_&lt;impl tailcall::core::json::json_like::JsonObjectLike for indexmap::map::IndexMap&lt;async_graphql_value::Name,Value&gt;&gt;::insert_key (1,674 samples, 3.19%)</title><rect x="88.1090%" y="309" width="3.1931%" height="15" fill="rgb(212,137,27)" fg:x="46192" fg:w="1674"/><text x="88.3590%" y="319.50">tai..</text></g><g><title>tailcall`mi_malloc_aligned (66 samples, 0.13%)</title><rect x="91.1761%" y="293" width="0.1259%" height="15" fill="rgb(231,220,49)" fg:x="47800" fg:w="66"/><text x="91.4261%" y="303.50"></text></g><g><title>tailcall`tailcall::core::scalar::Scalar::find (71 samples, 0.14%)</title><rect x="91.3020%" y="309" width="0.1354%" height="15" fill="rgb(237,96,20)" fg:x="47866" fg:w="71"/><text x="91.5520%" y="319.50"></text></g><g><title>tailcall`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (9 samples, 0.02%)</title><rect x="91.5805%" y="293" width="0.0172%" height="15" fill="rgb(239,229,30)" fg:x="48012" fg:w="9"/><text x="91.8305%" y="303.50"></text></g><g><title>tailcall`tailcall::core::scalar::Scalar::is_predefined (88 samples, 0.17%)</title><rect x="91.4375%" y="309" width="0.1679%" height="15" fill="rgb(219,65,33)" fg:x="47937" fg:w="88"/><text x="91.6875%" y="319.50"></text></g><g><title>tailcall`tailcall::core::jit::synth::synth::Synth&lt;Value&gt;::iter_inner (6,290 samples, 12.00%)</title><rect x="79.6780%" y="325" width="11.9979%" height="15" fill="rgb(243,134,7)" fg:x="41772" fg:w="6290"/><text x="79.9280%" y="335.50">tailcall`tailcall:..</text></g><g><title>tailcall`tailcall::core::scalar::Scalar::validate (37 samples, 0.07%)</title><rect x="91.6053%" y="309" width="0.0706%" height="15" fill="rgb(216,177,54)" fg:x="48025" fg:w="37"/><text x="91.8553%" y="319.50"></text></g><g><title>tailcall`tailcall::core::json::graphql::_&lt;impl tailcall::core::json::json_like::JsonObjectLike for indexmap::map::IndexMap&lt;async_graphql_value::Name,Value&gt;&gt;::insert_key (66 samples, 0.13%)</title><rect x="91.6759%" y="325" width="0.1259%" height="15" fill="rgb(211,160,20)" fg:x="48062" fg:w="66"/><text x="91.9259%" y="335.50"></text></g><g><title>tailcall`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7 samples, 0.01%)</title><rect x="91.8113%" y="309" width="0.0134%" height="15" fill="rgb(239,85,39)" fg:x="48133" fg:w="7"/><text x="92.0613%" y="319.50"></text></g><g><title>tailcall`tailcall::core::jit::synth::synth::Synth&lt;Value&gt;::iter_inner (6,713 samples, 12.80%)</title><rect x="79.0238%" y="341" width="12.8047%" height="15" fill="rgb(232,125,22)" fg:x="41429" fg:w="6713"/><text x="79.2738%" y="351.50">tailcall`tailcall::..</text></g><g><title>tailcall`tailcall::core::scalar::Scalar::is_predefined (14 samples, 0.03%)</title><rect x="91.8018%" y="325" width="0.0267%" height="15" fill="rgb(244,57,34)" fg:x="48128" fg:w="14"/><text x="92.0518%" y="335.50"></text></g><g><title>tailcall`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6 samples, 0.01%)</title><rect x="91.8418%" y="309" width="0.0114%" height="15" fill="rgb(214,203,32)" fg:x="48149" fg:w="6"/><text x="92.0918%" y="319.50"></text></g><g><title>tailcall`indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (25 samples, 0.05%)</title><rect x="91.8304%" y="325" width="0.0477%" height="15" fill="rgb(207,58,43)" fg:x="48143" fg:w="25"/><text x="92.0804%" y="335.50"></text></g><g><title>tailcall`tailcall::core::json::graphql::_&lt;impl tailcall::core::json::json_like::JsonObjectLike for indexmap::map::IndexMap&lt;async_graphql_value::Name,Value&gt;&gt;::insert_key (27 samples, 0.05%)</title><rect x="91.8285%" y="341" width="0.0515%" height="15" fill="rgb(215,193,15)" fg:x="48142" fg:w="27"/><text x="92.0785%" y="351.50"></text></g><g><title>tailcall`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7 samples, 0.01%)</title><rect x="91.8800%" y="325" width="0.0134%" height="15" fill="rgb(232,15,44)" fg:x="48169" fg:w="7"/><text x="92.1300%" y="335.50"></text></g><g><title>tailcall`tailcall::core::jit::synth::synth::Synth&lt;Value&gt;::iter_inner (6,818 samples, 13.00%)</title><rect x="78.8902%" y="357" width="13.0050%" height="15" fill="rgb(212,3,48)" fg:x="41359" fg:w="6818"/><text x="79.1402%" y="367.50">tailcall`tailcall::c..</text></g><g><title>tailcall`tailcall::core::scalar::Scalar::is_predefined (8 samples, 0.02%)</title><rect x="91.8800%" y="341" width="0.0153%" height="15" fill="rgb(218,128,7)" fg:x="48169" fg:w="8"/><text x="92.1300%" y="351.50"></text></g><g><title>tailcall`tailcall::core::jit::synth::synth::Synth&lt;Value&gt;::iter_inner (6,863 samples, 13.09%)</title><rect x="78.8139%" y="373" width="13.0908%" height="15" fill="rgb(226,216,39)" fg:x="41319" fg:w="6863"/><text x="79.0639%" y="383.50">tailcall`tailcall::c..</text></g><g><title>tailcall`indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (10 samples, 0.02%)</title><rect x="91.9067%" y="357" width="0.0191%" height="15" fill="rgb(243,47,51)" fg:x="48183" fg:w="10"/><text x="92.1567%" y="367.50"></text></g><g><title>tailcall`tailcall::core::json::graphql::_&lt;impl tailcall::core::json::json_like::JsonObjectLike for indexmap::map::IndexMap&lt;async_graphql_value::Name,Value&gt;&gt;::insert_key (12 samples, 0.02%)</title><rect x="91.9048%" y="373" width="0.0229%" height="15" fill="rgb(241,183,40)" fg:x="48182" fg:w="12"/><text x="92.1548%" y="383.50"></text></g><g><title>tailcall`tailcall::core::jit::synth::synth::Synth&lt;Value&gt;::iter_inner (6,914 samples, 13.19%)</title><rect x="78.7510%" y="389" width="13.1881%" height="15" fill="rgb(231,217,32)" fg:x="41286" fg:w="6914"/><text x="79.0010%" y="399.50">tailcall`tailcall::c..</text></g><g><title>tailcall`tailcall::core::scalar::Scalar::is_predefined (6 samples, 0.01%)</title><rect x="91.9277%" y="373" width="0.0114%" height="15" fill="rgb(229,61,38)" fg:x="48194" fg:w="6"/><text x="92.1777%" y="383.50"></text></g><g><title>tailcall`tailcall::core::jit::synth::synth::Synth&lt;Value&gt;::iter_inner (6,924 samples, 13.21%)</title><rect x="78.7338%" y="405" width="13.2072%" height="15" fill="rgb(225,210,5)" fg:x="41277" fg:w="6924"/><text x="78.9838%" y="415.50">tailcall`tailcall::c..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (22 samples, 0.04%)</title><rect x="91.9620%" y="373" width="0.0420%" height="15" fill="rgb(231,79,45)" fg:x="48212" fg:w="22"/><text x="92.2120%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (16 samples, 0.03%)</title><rect x="92.0154%" y="357" width="0.0305%" height="15" fill="rgb(224,100,7)" fg:x="48240" fg:w="16"/><text x="92.2654%" y="367.50"></text></g><g><title>tailcall`tailcall::core::jit::transform::input_resolver::InputResolver&lt;Input&gt;::resolve_field (78 samples, 0.15%)</title><rect x="91.9410%" y="405" width="0.1488%" height="15" fill="rgb(241,198,18)" fg:x="48201" fg:w="78"/><text x="92.1910%" y="415.50"></text></g><g><title>tailcall`tailcall::core::jit::transform::input_resolver::InputResolver&lt;Input&gt;::resolve_field (67 samples, 0.13%)</title><rect x="91.9620%" y="389" width="0.1278%" height="15" fill="rgb(252,97,53)" fg:x="48212" fg:w="67"/><text x="92.2120%" y="399.50"></text></g><g><title>tailcall`tailcall::core::jit::transform::input_resolver::InputResolver&lt;Input&gt;::resolve_field (44 samples, 0.08%)</title><rect x="92.0059%" y="373" width="0.0839%" height="15" fill="rgb(220,88,7)" fg:x="48235" fg:w="44"/><text x="92.2559%" y="383.50"></text></g><g><title>tailcall`tailcall::core::jit::transform::input_resolver::InputResolver&lt;Input&gt;::resolve_field (21 samples, 0.04%)</title><rect x="92.0497%" y="357" width="0.0401%" height="15" fill="rgb(213,176,14)" fg:x="48258" fg:w="21"/><text x="92.2997%" y="367.50"></text></g><g><title>tailcall`tailcall::core::jit::transform::skip::skip (8 samples, 0.02%)</title><rect x="92.0898%" y="405" width="0.0153%" height="15" fill="rgb(246,73,7)" fg:x="48279" fg:w="8"/><text x="92.3398%" y="415.50"></text></g><g><title>tailcall`tailcall::core::jit::transform::skip::skip (6 samples, 0.01%)</title><rect x="92.0936%" y="389" width="0.0114%" height="15" fill="rgb(245,64,36)" fg:x="48281" fg:w="6"/><text x="92.3436%" y="399.50"></text></g><g><title>tailcall`tailcall::core::jit::transform::skip::skip (6 samples, 0.01%)</title><rect x="92.0936%" y="373" width="0.0114%" height="15" fill="rgb(245,80,10)" fg:x="48281" fg:w="6"/><text x="92.3436%" y="383.50"></text></g><g><title>tailcall`tailcall::core::jit::graphql_executor::JITExecutor::exec::_{{closure}} (20,190 samples, 38.51%)</title><rect x="53.5975%" y="421" width="38.5114%" height="15" fill="rgb(232,107,50)" fg:x="28099" fg:w="20190"/><text x="53.8475%" y="431.50">tailcall`tailcall::core::jit::graphql_executor::JITExecutor::ex..</text></g><g><title>tailcall`tailcall::core::jit::request::Request&lt;async_graphql_value::ConstValue&gt;::create_plan (6 samples, 0.01%)</title><rect x="92.1089%" y="421" width="0.0114%" height="15" fill="rgb(253,3,0)" fg:x="48289" fg:w="6"/><text x="92.3589%" y="431.50"></text></g><g><title>tailcall`tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (88 samples, 0.17%)</title><rect x="92.1318%" y="421" width="0.1679%" height="15" fill="rgb(212,99,53)" fg:x="48301" fg:w="88"/><text x="92.3818%" y="431.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (11 samples, 0.02%)</title><rect x="92.3816%" y="341" width="0.0210%" height="15" fill="rgb(249,111,54)" fg:x="48432" fg:w="11"/><text x="92.6316%" y="351.50"></text></g><g><title>tailcall`parking_lot::condvar::Condvar::notify_one_slow (14 samples, 0.03%)</title><rect x="92.3778%" y="357" width="0.0267%" height="15" fill="rgb(249,55,30)" fg:x="48430" fg:w="14"/><text x="92.6278%" y="367.50"></text></g><g><title>tailcall`tailcall::core::jit::graphql_executor::JITExecutor::execute::_{{closure}} (28,191 samples, 53.77%)</title><rect x="38.6411%" y="437" width="53.7729%" height="15" fill="rgb(237,47,42)" fg:x="20258" fg:w="28191"/><text x="38.8911%" y="447.50">tailcall`tailcall::core::jit::graphql_executor::JITExecutor::execute::_{{closure}}</text></g><g><title>tailcall`tokio::sync::broadcast::Shared&lt;T&gt;::notify_rx (60 samples, 0.11%)</title><rect x="92.2996%" y="421" width="0.1144%" height="15" fill="rgb(211,20,18)" fg:x="48389" fg:w="60"/><text x="92.5496%" y="431.50"></text></g><g><title>tailcall`tokio::runtime::task::waker::wake_by_val (36 samples, 0.07%)</title><rect x="92.3454%" y="405" width="0.0687%" height="15" fill="rgb(231,203,46)" fg:x="48413" fg:w="36"/><text x="92.5954%" y="415.50"></text></g><g><title>tailcall`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (32 samples, 0.06%)</title><rect x="92.3530%" y="389" width="0.0610%" height="15" fill="rgb(237,142,3)" fg:x="48417" fg:w="32"/><text x="92.6030%" y="399.50"></text></g><g><title>tailcall`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task::_{{closure}} (30 samples, 0.06%)</title><rect x="92.3568%" y="373" width="0.0572%" height="15" fill="rgb(241,107,1)" fg:x="48419" fg:w="30"/><text x="92.6068%" y="383.50"></text></g><g><title>tailcall`&lt;tailcall::core::async_graphql_hyper::GraphQLRequest as tailcall::core::async_graphql_hyper::GraphQLRequestLike&gt;::execute_with_jit::_{{closure}} (28,658 samples, 54.66%)</title><rect x="37.7542%" y="453" width="54.6637%" height="15" fill="rgb(229,83,13)" fg:x="19793" fg:w="28658"/><text x="38.0042%" y="463.50">tailcall`&lt;tailcall::core::async_graphql_hyper::GraphQLRequest as tailcall::core::async_gra..</text></g><g><title>tailcall`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (7 samples, 0.01%)</title><rect x="92.4408%" y="453" width="0.0134%" height="15" fill="rgb(241,91,40)" fg:x="48463" fg:w="7"/><text x="92.6908%" y="463.50"></text></g><g><title>tailcall`_mi_page_free (13 samples, 0.02%)</title><rect x="92.5533%" y="341" width="0.0248%" height="15" fill="rgb(225,3,45)" fg:x="48522" fg:w="13"/><text x="92.8033%" y="351.50"></text></g><g><title>tailcall`mi_segment_page_clear (13 samples, 0.02%)</title><rect x="92.5533%" y="325" width="0.0248%" height="15" fill="rgb(244,223,14)" fg:x="48522" fg:w="13"/><text x="92.8033%" y="335.50"></text></g><g><title>tailcall`mi_segment_span_free_coalesce (13 samples, 0.02%)</title><rect x="92.5533%" y="309" width="0.0248%" height="15" fill="rgb(224,124,37)" fg:x="48522" fg:w="13"/><text x="92.8033%" y="319.50"></text></g><g><title>tailcall`mi_segment_span_free (10 samples, 0.02%)</title><rect x="92.5590%" y="293" width="0.0191%" height="15" fill="rgb(251,171,30)" fg:x="48525" fg:w="10"/><text x="92.8090%" y="303.50"></text></g><g><title>tailcall`alloc::sync::Arc&lt;T,A&gt;::drop_slow (16 samples, 0.03%)</title><rect x="92.5800%" y="341" width="0.0305%" height="15" fill="rgb(236,46,54)" fg:x="48536" fg:w="16"/><text x="92.8300%" y="351.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (67 samples, 0.13%)</title><rect x="92.8013%" y="325" width="0.1278%" height="15" fill="rgb(245,213,5)" fg:x="48652" fg:w="67"/><text x="93.0513%" y="335.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (172 samples, 0.33%)</title><rect x="92.6105%" y="341" width="0.3281%" height="15" fill="rgb(230,144,27)" fg:x="48552" fg:w="172"/><text x="92.8605%" y="351.50"></text></g><g><title>tailcall`mi_free (82 samples, 0.16%)</title><rect x="92.9386%" y="341" width="0.1564%" height="15" fill="rgb(220,86,6)" fg:x="48724" fg:w="82"/><text x="93.1886%" y="351.50"></text></g><g><title>tailcall`mi_free_block_delayed_mt (12 samples, 0.02%)</title><rect x="93.0950%" y="341" width="0.0229%" height="15" fill="rgb(240,20,13)" fg:x="48806" fg:w="12"/><text x="93.3450%" y="351.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (312 samples, 0.60%)</title><rect x="92.5476%" y="357" width="0.5951%" height="15" fill="rgb(217,89,34)" fg:x="48519" fg:w="312"/><text x="92.7976%" y="367.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (326 samples, 0.62%)</title><rect x="92.5361%" y="373" width="0.6218%" height="15" fill="rgb(229,13,5)" fg:x="48513" fg:w="326"/><text x="92.7861%" y="383.50"></text></g><g><title>tailcall`mi_free (8 samples, 0.02%)</title><rect x="93.1427%" y="357" width="0.0153%" height="15" fill="rgb(244,67,35)" fg:x="48831" fg:w="8"/><text x="93.3927%" y="367.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (332 samples, 0.63%)</title><rect x="92.5323%" y="405" width="0.6333%" height="15" fill="rgb(221,40,2)" fg:x="48511" fg:w="332"/><text x="92.7823%" y="415.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (330 samples, 0.63%)</title><rect x="92.5361%" y="389" width="0.6295%" height="15" fill="rgb(237,157,21)" fg:x="48513" fg:w="330"/><text x="92.7861%" y="399.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (334 samples, 0.64%)</title><rect x="92.5323%" y="421" width="0.6371%" height="15" fill="rgb(222,94,11)" fg:x="48511" fg:w="334"/><text x="92.7823%" y="431.50"></text></g><g><title>tailcall`alloc::sync::Arc&lt;T,A&gt;::drop_slow (349 samples, 0.67%)</title><rect x="92.5171%" y="437" width="0.6657%" height="15" fill="rgb(249,113,6)" fg:x="48503" fg:w="349"/><text x="92.7671%" y="447.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,alloc::string::String&gt;&gt; (6 samples, 0.01%)</title><rect x="93.2247%" y="421" width="0.0114%" height="15" fill="rgb(238,137,36)" fg:x="48874" fg:w="6"/><text x="93.4747%" y="431.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;http::header::map::HeaderMap&gt; (9 samples, 0.02%)</title><rect x="93.2362%" y="421" width="0.0172%" height="15" fill="rgb(210,102,26)" fg:x="48880" fg:w="9"/><text x="93.4862%" y="431.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;tailcall::core::blueprint::server::Server&gt; (29 samples, 0.06%)</title><rect x="93.2038%" y="437" width="0.0553%" height="15" fill="rgb(218,30,30)" fg:x="48863" fg:w="29"/><text x="93.4538%" y="447.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;tailcall::core::runtime::TargetRuntime&gt; (26 samples, 0.05%)</title><rect x="93.2648%" y="437" width="0.0496%" height="15" fill="rgb(214,67,26)" fg:x="48895" fg:w="26"/><text x="93.5148%" y="447.50"></text></g><g><title>tailcall`mi_free (13 samples, 0.02%)</title><rect x="93.3144%" y="437" width="0.0248%" height="15" fill="rgb(251,9,53)" fg:x="48921" fg:w="13"/><text x="93.5644%" y="447.50"></text></g><g><title>tailcall`mi_free_block_delayed_mt (30 samples, 0.06%)</title><rect x="93.3392%" y="437" width="0.0572%" height="15" fill="rgb(228,204,25)" fg:x="48934" fg:w="30"/><text x="93.5892%" y="447.50"></text></g><g><title>tailcall`mi_free_block_mt (24 samples, 0.05%)</title><rect x="93.3964%" y="437" width="0.0458%" height="15" fill="rgb(207,153,8)" fg:x="48964" fg:w="24"/><text x="93.6464%" y="447.50"></text></g><g><title>tailcall`alloc::sync::Arc&lt;T,A&gt;::drop_slow (519 samples, 0.99%)</title><rect x="92.4541%" y="453" width="0.9900%" height="15" fill="rgb(242,9,16)" fg:x="48470" fg:w="519"/><text x="92.7041%" y="463.50"></text></g><g><title>tailcall`bytes::bytes::static_drop (6 samples, 0.01%)</title><rect x="93.4441%" y="453" width="0.0114%" height="15" fill="rgb(217,211,10)" fg:x="48989" fg:w="6"/><text x="93.6941%" y="463.50"></text></g><g><title>tailcall`bytes::bytes_mut::shared_v_drop (13 samples, 0.02%)</title><rect x="93.4555%" y="453" width="0.0248%" height="15" fill="rgb(219,228,52)" fg:x="48995" fg:w="13"/><text x="93.7055%" y="463.50"></text></g><g><title>tailcall`mi_free_block_mt (6 samples, 0.01%)</title><rect x="93.4689%" y="437" width="0.0114%" height="15" fill="rgb(231,92,29)" fg:x="49002" fg:w="6"/><text x="93.7189%" y="447.50"></text></g><g><title>tailcall`core::fmt::write (6 samples, 0.01%)</title><rect x="93.4803%" y="453" width="0.0114%" height="15" fill="rgb(232,8,23)" fg:x="49008" fg:w="6"/><text x="93.7303%" y="463.50"></text></g><g><title>tailcall`bytes::bytes_mut::shared_v_drop (23 samples, 0.04%)</title><rect x="93.5318%" y="421" width="0.0439%" height="15" fill="rgb(216,211,34)" fg:x="49035" fg:w="23"/><text x="93.7818%" y="431.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;http::header::map::HeaderMap&gt; (43 samples, 0.08%)</title><rect x="93.5128%" y="437" width="0.0820%" height="15" fill="rgb(236,151,0)" fg:x="49025" fg:w="43"/><text x="93.7628%" y="447.50"></text></g><g><title>tailcall`mi_free_block_mt (10 samples, 0.02%)</title><rect x="93.5757%" y="421" width="0.0191%" height="15" fill="rgb(209,168,3)" fg:x="49058" fg:w="10"/><text x="93.8257%" y="431.50"></text></g><g><title>tailcall`mi_free (35 samples, 0.07%)</title><rect x="93.5948%" y="437" width="0.0668%" height="15" fill="rgb(208,129,28)" fg:x="49068" fg:w="35"/><text x="93.8448%" y="447.50"></text></g><g><title>tailcall`mi_free_block_delayed_mt (32 samples, 0.06%)</title><rect x="93.6615%" y="437" width="0.0610%" height="15" fill="rgb(229,78,22)" fg:x="49103" fg:w="32"/><text x="93.9115%" y="447.50"></text></g><g><title>tailcall`mi_free_block_mt (10 samples, 0.02%)</title><rect x="93.7226%" y="437" width="0.0191%" height="15" fill="rgb(228,187,13)" fg:x="49135" fg:w="10"/><text x="93.9726%" y="447.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;http::request::Parts&gt; (129 samples, 0.25%)</title><rect x="93.4994%" y="453" width="0.2461%" height="15" fill="rgb(240,119,24)" fg:x="49018" fg:w="129"/><text x="93.7494%" y="463.50"></text></g><g><title>tailcall`&lt;hyper::body::body::Body as http_body::Body&gt;::poll_data (14 samples, 0.03%)</title><rect x="93.8561%" y="437" width="0.0267%" height="15" fill="rgb(209,194,42)" fg:x="49205" fg:w="14"/><text x="94.1061%" y="447.50"></text></g><g><title>tailcall`_mi_page_retire (7 samples, 0.01%)</title><rect x="93.8828%" y="437" width="0.0134%" height="15" fill="rgb(247,200,46)" fg:x="49219" fg:w="7"/><text x="94.1328%" y="447.50"></text></g><g><title>tailcall`alloc::sync::Arc&lt;T,A&gt;::drop_slow (8 samples, 0.02%)</title><rect x="93.9019%" y="421" width="0.0153%" height="15" fill="rgb(218,76,16)" fg:x="49229" fg:w="8"/><text x="94.1519%" y="431.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;hyper::body::body::Body&gt; (14 samples, 0.03%)</title><rect x="93.8962%" y="437" width="0.0267%" height="15" fill="rgb(225,21,48)" fg:x="49226" fg:w="14"/><text x="94.1462%" y="447.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (8 samples, 0.02%)</title><rect x="93.9896%" y="405" width="0.0153%" height="15" fill="rgb(239,223,50)" fg:x="49275" fg:w="8"/><text x="94.2396%" y="415.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_destroy (6 samples, 0.01%)</title><rect x="94.0201%" y="389" width="0.0114%" height="15" fill="rgb(244,45,21)" fg:x="49291" fg:w="6"/><text x="94.2701%" y="399.50"></text></g><g><title>tailcall`alloc::sync::Arc&lt;T,A&gt;::drop_slow (19 samples, 0.04%)</title><rect x="94.0049%" y="405" width="0.0362%" height="15" fill="rgb(232,33,43)" fg:x="49283" fg:w="19"/><text x="94.2549%" y="415.50"></text></g><g><title>tailcall`futures_channel::mpsc::Receiver&lt;T&gt;::next_message (49 samples, 0.09%)</title><rect x="93.9553%" y="421" width="0.0935%" height="15" fill="rgb(209,8,3)" fg:x="49257" fg:w="49"/><text x="94.2053%" y="431.50"></text></g><g><title>tailcall`hyper::body::body::Body::poll_inner (78 samples, 0.15%)</title><rect x="93.9267%" y="437" width="0.1488%" height="15" fill="rgb(214,25,53)" fg:x="49242" fg:w="78"/><text x="94.1767%" y="447.50"></text></g><g><title>tailcall`mi_free (12 samples, 0.02%)</title><rect x="94.0526%" y="421" width="0.0229%" height="15" fill="rgb(254,186,54)" fg:x="49308" fg:w="12"/><text x="94.3026%" y="431.50"></text></g><g><title>tailcall`hyper::body::to_bytes::to_bytes::_{{closure}} (157 samples, 0.30%)</title><rect x="93.7855%" y="453" width="0.2995%" height="15" fill="rgb(208,174,49)" fg:x="49168" fg:w="157"/><text x="94.0355%" y="463.50"></text></g><g><title>tailcall`mi_free (64 samples, 0.12%)</title><rect x="94.0850%" y="453" width="0.1221%" height="15" fill="rgb(233,191,51)" fg:x="49325" fg:w="64"/><text x="94.3350%" y="463.50"></text></g><g><title>tailcall`mi_free_block_delayed_mt (90 samples, 0.17%)</title><rect x="94.2071%" y="453" width="0.1717%" height="15" fill="rgb(222,134,10)" fg:x="49389" fg:w="90"/><text x="94.4571%" y="463.50"></text></g><g><title>tailcall`mi_free_block_mt (26 samples, 0.05%)</title><rect x="94.3787%" y="453" width="0.0496%" height="15" fill="rgb(230,226,20)" fg:x="49479" fg:w="26"/><text x="94.6287%" y="463.50"></text></g><g><title>tailcall`mi_free_generic_mt (15 samples, 0.03%)</title><rect x="94.4283%" y="453" width="0.0286%" height="15" fill="rgb(251,111,25)" fg:x="49505" fg:w="15"/><text x="94.6783%" y="463.50"></text></g><g><title>tailcall`_mi_free_delayed_block (26 samples, 0.05%)</title><rect x="94.4913%" y="421" width="0.0496%" height="15" fill="rgb(224,40,46)" fg:x="49538" fg:w="26"/><text x="94.7413%" y="431.50"></text></g><g><title>tailcall`_mi_page_free (15 samples, 0.03%)</title><rect x="94.6191%" y="405" width="0.0286%" height="15" fill="rgb(236,108,47)" fg:x="49605" fg:w="15"/><text x="94.8691%" y="415.50"></text></g><g><title>tailcall`mi_segment_page_clear (15 samples, 0.03%)</title><rect x="94.6191%" y="389" width="0.0286%" height="15" fill="rgb(234,93,0)" fg:x="49605" fg:w="15"/><text x="94.8691%" y="399.50"></text></g><g><title>tailcall`mi_segment_span_free_coalesce (15 samples, 0.03%)</title><rect x="94.6191%" y="373" width="0.0286%" height="15" fill="rgb(224,213,32)" fg:x="49605" fg:w="15"/><text x="94.8691%" y="383.50"></text></g><g><title>tailcall`mi_segment_span_free (12 samples, 0.02%)</title><rect x="94.6248%" y="357" width="0.0229%" height="15" fill="rgb(251,11,48)" fg:x="49608" fg:w="12"/><text x="94.8748%" y="367.50"></text></g><g><title>tailcall`mi_segment_try_purge (8 samples, 0.02%)</title><rect x="94.6324%" y="341" width="0.0153%" height="15" fill="rgb(236,173,5)" fg:x="49612" fg:w="8"/><text x="94.8824%" y="351.50"></text></g><g><title>tailcall`mi_segment_purge (8 samples, 0.02%)</title><rect x="94.6324%" y="325" width="0.0153%" height="15" fill="rgb(230,95,12)" fg:x="49612" fg:w="8"/><text x="94.8824%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`madvise (8 samples, 0.02%)</title><rect x="94.6324%" y="309" width="0.0153%" height="15" fill="rgb(232,209,1)" fg:x="49612" fg:w="8"/><text x="94.8824%" y="319.50"></text></g><g><title>tailcall`mi_segment_span_allocate (6 samples, 0.01%)</title><rect x="94.6610%" y="373" width="0.0114%" height="15" fill="rgb(232,6,1)" fg:x="49627" fg:w="6"/><text x="94.9110%" y="383.50"></text></g><g><title>tailcall`mi_page_fresh_alloc (17 samples, 0.03%)</title><rect x="94.6515%" y="405" width="0.0324%" height="15" fill="rgb(210,224,50)" fg:x="49622" fg:w="17"/><text x="94.9015%" y="415.50"></text></g><g><title>tailcall`mi_segments_page_alloc (16 samples, 0.03%)</title><rect x="94.6534%" y="389" width="0.0305%" height="15" fill="rgb(228,127,35)" fg:x="49623" fg:w="16"/><text x="94.9034%" y="399.50"></text></g><g><title>tailcall`mi_segment_try_purge (6 samples, 0.01%)</title><rect x="94.6725%" y="373" width="0.0114%" height="15" fill="rgb(245,102,45)" fg:x="49633" fg:w="6"/><text x="94.9225%" y="383.50"></text></g><g><title>tailcall`mi_find_page (75 samples, 0.14%)</title><rect x="94.5466%" y="421" width="0.1431%" height="15" fill="rgb(214,1,49)" fg:x="49567" fg:w="75"/><text x="94.7966%" y="431.50"></text></g><g><title>tailcall`mi_page_free_list_extend (8 samples, 0.02%)</title><rect x="94.6897%" y="421" width="0.0153%" height="15" fill="rgb(226,163,40)" fg:x="49642" fg:w="8"/><text x="94.9397%" y="431.50"></text></g><g><title>tailcall`_mi_malloc_generic (118 samples, 0.23%)</title><rect x="94.4817%" y="437" width="0.2251%" height="15" fill="rgb(239,212,28)" fg:x="49533" fg:w="118"/><text x="94.7317%" y="447.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (133 samples, 0.25%)</title><rect x="94.4569%" y="453" width="0.2537%" height="15" fill="rgb(220,20,13)" fg:x="49520" fg:w="133"/><text x="94.7069%" y="463.50"></text></g><g><title>tailcall`&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (233 samples, 0.44%)</title><rect x="94.7393%" y="437" width="0.4444%" height="15" fill="rgb(210,164,35)" fg:x="49668" fg:w="233"/><text x="94.9893%" y="447.50"></text></g><g><title>tailcall`core::str::converts::from_utf8 (39 samples, 0.07%)</title><rect x="95.1093%" y="421" width="0.0744%" height="15" fill="rgb(248,109,41)" fg:x="49862" fg:w="39"/><text x="95.3593%" y="431.50"></text></g><g><title>tailcall`_mi_free_delayed_block (9 samples, 0.02%)</title><rect x="95.1989%" y="405" width="0.0172%" height="15" fill="rgb(238,23,50)" fg:x="49909" fg:w="9"/><text x="95.4489%" y="415.50"></text></g><g><title>tailcall`_mi_malloc_generic (17 samples, 0.03%)</title><rect x="95.1970%" y="421" width="0.0324%" height="15" fill="rgb(211,48,49)" fg:x="49908" fg:w="17"/><text x="95.4470%" y="431.50"></text></g><g><title>tailcall`mi_find_page (6 samples, 0.01%)</title><rect x="95.2180%" y="405" width="0.0114%" height="15" fill="rgb(223,36,21)" fg:x="49919" fg:w="6"/><text x="95.4680%" y="415.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (24 samples, 0.05%)</title><rect x="95.1951%" y="437" width="0.0458%" height="15" fill="rgb(207,123,46)" fg:x="49907" fg:w="24"/><text x="95.4451%" y="447.50"></text></g><g><title>tailcall`mi_find_page (6 samples, 0.01%)</title><rect x="95.2295%" y="421" width="0.0114%" height="15" fill="rgb(240,218,32)" fg:x="49925" fg:w="6"/><text x="95.4795%" y="431.50"></text></g><g><title>tailcall`serde::de::impls::_&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (283 samples, 0.54%)</title><rect x="94.7183%" y="453" width="0.5398%" height="15" fill="rgb(252,5,43)" fg:x="49657" fg:w="283"/><text x="94.9683%" y="463.50"></text></g><g><title>tailcall`serde_json::read::SliceRead::skip_to_escape_slow (8 samples, 0.02%)</title><rect x="95.2428%" y="437" width="0.0153%" height="15" fill="rgb(252,84,19)" fg:x="49932" fg:w="8"/><text x="95.4928%" y="447.50"></text></g><g><title>tailcall`_mi_free_delayed_block (6 samples, 0.01%)</title><rect x="95.5137%" y="357" width="0.0114%" height="15" fill="rgb(243,152,39)" fg:x="50074" fg:w="6"/><text x="95.7637%" y="367.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (10 samples, 0.02%)</title><rect x="95.5137%" y="389" width="0.0191%" height="15" fill="rgb(234,160,15)" fg:x="50074" fg:w="10"/><text x="95.7637%" y="399.50"></text></g><g><title>tailcall`_mi_malloc_generic (10 samples, 0.02%)</title><rect x="95.5137%" y="373" width="0.0191%" height="15" fill="rgb(237,34,20)" fg:x="50074" fg:w="10"/><text x="95.7637%" y="383.50"></text></g><g><title>tailcall`http::header::map::HeaderMap&lt;T&gt;::try_reserve_one (25 samples, 0.05%)</title><rect x="95.5003%" y="405" width="0.0477%" height="15" fill="rgb(229,97,13)" fg:x="50067" fg:w="25"/><text x="95.7503%" y="415.50"></text></g><g><title>tailcall`mi_malloc_aligned (8 samples, 0.02%)</title><rect x="95.5328%" y="389" width="0.0153%" height="15" fill="rgb(234,71,50)" fg:x="50084" fg:w="8"/><text x="95.7828%" y="399.50"></text></g><g><title>tailcall`http::header::map::HeaderMap&lt;T&gt;::try_append2 (37 samples, 0.07%)</title><rect x="95.4851%" y="421" width="0.0706%" height="15" fill="rgb(253,155,4)" fg:x="50059" fg:w="37"/><text x="95.7351%" y="431.50"></text></g><g><title>tailcall`http::response::Builder::and_then (113 samples, 0.22%)</title><rect x="95.3458%" y="437" width="0.2155%" height="15" fill="rgb(222,185,37)" fg:x="49986" fg:w="113"/><text x="95.5958%" y="447.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (7 samples, 0.01%)</title><rect x="97.7778%" y="325" width="0.0134%" height="15" fill="rgb(251,177,13)" fg:x="51261" fg:w="7"/><text x="98.0278%" y="335.50"></text></g><g><title>libsystem_c.dylib`_mach_boottime_usec (6 samples, 0.01%)</title><rect x="97.7797%" y="309" width="0.0114%" height="15" fill="rgb(250,179,40)" fg:x="51262" fg:w="6"/><text x="98.0297%" y="319.50"></text></g><g><title>tailcall`mi_segment_page_clear (57 samples, 0.11%)</title><rect x="97.7664%" y="373" width="0.1087%" height="15" fill="rgb(242,44,2)" fg:x="51255" fg:w="57"/><text x="98.0164%" y="383.50"></text></g><g><title>tailcall`mi_segment_span_free_coalesce (56 samples, 0.11%)</title><rect x="97.7683%" y="357" width="0.1068%" height="15" fill="rgb(216,177,13)" fg:x="51256" fg:w="56"/><text x="98.0183%" y="367.50"></text></g><g><title>tailcall`mi_segment_span_free (53 samples, 0.10%)</title><rect x="97.7740%" y="341" width="0.1011%" height="15" fill="rgb(216,106,43)" fg:x="51259" fg:w="53"/><text x="98.0240%" y="351.50"></text></g><g><title>tailcall`mi_segment_try_purge (44 samples, 0.08%)</title><rect x="97.7912%" y="325" width="0.0839%" height="15" fill="rgb(216,183,2)" fg:x="51268" fg:w="44"/><text x="98.0412%" y="335.50"></text></g><g><title>tailcall`mi_segment_purge (44 samples, 0.08%)</title><rect x="97.7912%" y="309" width="0.0839%" height="15" fill="rgb(249,75,3)" fg:x="51268" fg:w="44"/><text x="98.0412%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`madvise (44 samples, 0.08%)</title><rect x="97.7912%" y="293" width="0.0839%" height="15" fill="rgb(219,67,39)" fg:x="51268" fg:w="44"/><text x="98.0412%" y="303.50"></text></g><g><title>tailcall`_mi_page_free (58 samples, 0.11%)</title><rect x="97.7664%" y="389" width="0.1106%" height="15" fill="rgb(253,228,2)" fg:x="51255" fg:w="58"/><text x="98.0164%" y="399.50"></text></g><g><title>tailcall`_mi_free_delayed_block (1,187 samples, 2.26%)</title><rect x="95.6281%" y="405" width="2.2641%" height="15" fill="rgb(235,138,27)" fg:x="50134" fg:w="1187"/><text x="95.8781%" y="415.50">t..</text></g><g><title>tailcall`mi_segment_try_purge (7 samples, 0.01%)</title><rect x="97.8789%" y="389" width="0.0134%" height="15" fill="rgb(236,97,51)" fg:x="51314" fg:w="7"/><text x="98.1289%" y="399.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (7 samples, 0.01%)</title><rect x="97.8789%" y="373" width="0.0134%" height="15" fill="rgb(240,80,30)" fg:x="51314" fg:w="7"/><text x="98.1289%" y="383.50"></text></g><g><title>libsystem_c.dylib`_mach_boottime_usec (7 samples, 0.01%)</title><rect x="97.8789%" y="357" width="0.0134%" height="15" fill="rgb(230,178,19)" fg:x="51314" fg:w="7"/><text x="98.1289%" y="367.50"></text></g><g><title>libsystem_c.dylib`gettimeofday (7 samples, 0.01%)</title><rect x="97.8789%" y="341" width="0.0134%" height="15" fill="rgb(210,190,27)" fg:x="51314" fg:w="7"/><text x="98.1289%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (7 samples, 0.01%)</title><rect x="97.8789%" y="325" width="0.0134%" height="15" fill="rgb(222,107,31)" fg:x="51314" fg:w="7"/><text x="98.1289%" y="335.50"></text></g><g><title>tailcall`_mi_page_try_use_delayed_free (12 samples, 0.02%)</title><rect x="97.9018%" y="405" width="0.0229%" height="15" fill="rgb(216,127,34)" fg:x="51326" fg:w="12"/><text x="98.1518%" y="415.50"></text></g><g><title>tailcall`mi_page_free_list_extend (12 samples, 0.02%)</title><rect x="97.9724%" y="389" width="0.0229%" height="15" fill="rgb(234,116,52)" fg:x="51363" fg:w="12"/><text x="98.2224%" y="399.50"></text></g><g><title>tailcall`mi_find_page (47 samples, 0.09%)</title><rect x="97.9247%" y="405" width="0.0897%" height="15" fill="rgb(222,124,15)" fg:x="51338" fg:w="47"/><text x="98.1747%" y="415.50"></text></g><g><title>tailcall`mi_page_fresh_alloc (10 samples, 0.02%)</title><rect x="97.9953%" y="389" width="0.0191%" height="15" fill="rgb(231,179,28)" fg:x="51375" fg:w="10"/><text x="98.2453%" y="399.50"></text></g><g><title>tailcall`mi_segments_page_alloc (9 samples, 0.02%)</title><rect x="97.9972%" y="373" width="0.0172%" height="15" fill="rgb(226,93,45)" fg:x="51376" fg:w="9"/><text x="98.2472%" y="383.50"></text></g><g><title>tailcall`_mi_malloc_generic (1,283 samples, 2.45%)</title><rect x="95.5728%" y="421" width="2.4473%" height="15" fill="rgb(215,8,51)" fg:x="50105" fg:w="1283"/><text x="95.8228%" y="431.50">ta..</text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (1,293 samples, 2.47%)</title><rect x="95.5633%" y="437" width="2.4663%" height="15" fill="rgb(223,106,5)" fg:x="50100" fg:w="1293"/><text x="95.8133%" y="447.50">ta..</text></g><g><title>tailcall`tailcall::core::async_graphql_hyper::GraphQLArcResponse::into_response (1,456 samples, 2.78%)</title><rect x="95.2600%" y="453" width="2.7772%" height="15" fill="rgb(250,191,5)" fg:x="49941" fg:w="1456"/><text x="95.5100%" y="463.50">ta..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (21 samples, 0.04%)</title><rect x="98.4359%" y="437" width="0.0401%" height="15" fill="rgb(242,132,44)" fg:x="51606" fg:w="21"/><text x="98.6859%" y="447.50"></text></g><g><title>tailcall`&lt;tailcall::core::blueprint::server::Server as core::clone::Clone&gt;::clone (35 samples, 0.07%)</title><rect x="98.4836%" y="437" width="0.0668%" height="15" fill="rgb(251,152,29)" fg:x="51631" fg:w="35"/><text x="98.7336%" y="447.50"></text></g><g><title>tailcall`mi_malloc_aligned (11 samples, 0.02%)</title><rect x="98.5294%" y="421" width="0.0210%" height="15" fill="rgb(218,179,5)" fg:x="51655" fg:w="11"/><text x="98.7794%" y="431.50"></text></g><g><title>tailcall`&lt;tailcall::core::blueprint::upstream::Upstream as core::clone::Clone&gt;::clone (16 samples, 0.03%)</title><rect x="98.5503%" y="437" width="0.0305%" height="15" fill="rgb(227,67,19)" fg:x="51666" fg:w="16"/><text x="98.8003%" y="447.50"></text></g><g><title>tailcall`tailcall::core::http::request_handler::create_request_context (302 samples, 0.58%)</title><rect x="98.0372%" y="453" width="0.5761%" height="15" fill="rgb(233,119,31)" fg:x="51397" fg:w="302"/><text x="98.2872%" y="463.50"></text></g><g><title>tailcall`mi_malloc_aligned (9 samples, 0.02%)</title><rect x="98.5961%" y="437" width="0.0172%" height="15" fill="rgb(241,120,22)" fg:x="51690" fg:w="9"/><text x="98.8461%" y="447.50"></text></g><g><title>tailcall`tailcall::core::http::request_handler::update_response_headers (8 samples, 0.02%)</title><rect x="98.6133%" y="453" width="0.0153%" height="15" fill="rgb(224,102,30)" fg:x="51699" fg:w="8"/><text x="98.8633%" y="463.50"></text></g><g><title>tailcall`tailcall::core::http::request_handler::graphql_request::_{{closure}}::_{{closure}} (35,272 samples, 67.28%)</title><rect x="31.3852%" y="469" width="67.2796%" height="15" fill="rgb(210,164,37)" fg:x="16454" fg:w="35272"/><text x="31.6352%" y="479.50">tailcall`tailcall::core::http::request_handler::graphql_request::_{{closure}}::_{{closure}}</text></g><g><title>tailcall`tailcall::core::jit::graphql_executor::JITExecutor::execute::_{{closure}} (17 samples, 0.03%)</title><rect x="98.6324%" y="453" width="0.0324%" height="15" fill="rgb(226,191,16)" fg:x="51709" fg:w="17"/><text x="98.8824%" y="463.50"></text></g><g><title>tailcall`tailcall::core::http::request_handler::update_response_headers (37 samples, 0.07%)</title><rect x="98.6648%" y="469" width="0.0706%" height="15" fill="rgb(214,40,45)" fg:x="51726" fg:w="37"/><text x="98.9148%" y="479.50"></text></g><g><title>tailcall`tracing::__macro_support::__is_enabled (11 samples, 0.02%)</title><rect x="98.7392%" y="469" width="0.0210%" height="15" fill="rgb(244,29,26)" fg:x="51765" fg:w="11"/><text x="98.9892%" y="479.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (7 samples, 0.01%)</title><rect x="98.7792%" y="437" width="0.0134%" height="15" fill="rgb(216,16,5)" fg:x="51786" fg:w="7"/><text x="99.0292%" y="447.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (6 samples, 0.01%)</title><rect x="98.8212%" y="421" width="0.0114%" height="15" fill="rgb(249,76,35)" fg:x="51808" fg:w="6"/><text x="99.0712%" y="431.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::current_span (10 samples, 0.02%)</title><rect x="98.8326%" y="421" width="0.0191%" height="15" fill="rgb(207,11,44)" fg:x="51814" fg:w="10"/><text x="99.0826%" y="431.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::new_span (41 samples, 0.08%)</title><rect x="98.7754%" y="453" width="0.0782%" height="15" fill="rgb(228,190,49)" fg:x="51784" fg:w="41"/><text x="99.0254%" y="463.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::new_span (31 samples, 0.06%)</title><rect x="98.7945%" y="437" width="0.0591%" height="15" fill="rgb(214,173,12)" fg:x="51794" fg:w="31"/><text x="99.0445%" y="447.50"></text></g><g><title>tailcall`tracing::span::Span::new (51 samples, 0.10%)</title><rect x="98.7602%" y="469" width="0.0973%" height="15" fill="rgb(218,26,35)" fg:x="51776" fg:w="51"/><text x="99.0102%" y="479.50"></text></g><g><title>tailcall`tailcall::core::http::request_handler::graphql_request::_{{closure}} (36,571 samples, 69.76%)</title><rect x="29.1287%" y="485" width="69.7574%" height="15" fill="rgb(220,200,19)" fg:x="15271" fg:w="36571"/><text x="29.3787%" y="495.50">tailcall`tailcall::core::http::request_handler::graphql_request::_{{closure}}</text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::is_enabled_inner (15 samples, 0.03%)</title><rect x="98.8574%" y="469" width="0.0286%" height="15" fill="rgb(239,95,49)" fg:x="51827" fg:w="15"/><text x="99.1074%" y="479.50"></text></g><g><title>tailcall`tailcall::core::http::request_handler::handle_request_inner::_{{closure}} (36,796 samples, 70.19%)</title><rect x="28.7033%" y="501" width="70.1865%" height="15" fill="rgb(235,85,53)" fg:x="15048" fg:w="36796"/><text x="28.9533%" y="511.50">tailcall`tailcall::core::http::request_handler::handle_request_inner::_{{closure}}</text></g><g><title>libdyld.dylib`tlv_get_addr (8 samples, 0.02%)</title><rect x="98.9452%" y="485" width="0.0153%" height="15" fill="rgb(233,133,31)" fg:x="51873" fg:w="8"/><text x="99.1952%" y="495.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (6 samples, 0.01%)</title><rect x="98.9891%" y="469" width="0.0114%" height="15" fill="rgb(218,25,20)" fg:x="51896" fg:w="6"/><text x="99.2391%" y="479.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (19 samples, 0.04%)</title><rect x="98.9662%" y="485" width="0.0362%" height="15" fill="rgb(252,210,38)" fg:x="51884" fg:w="19"/><text x="99.2162%" y="495.50"></text></g><g><title>tailcall`opentelemetry::propagation::text_map_propagator::TextMapPropagator::extract (113 samples, 0.22%)</title><rect x="99.0196%" y="485" width="0.2155%" height="15" fill="rgb(242,134,21)" fg:x="51912" fg:w="113"/><text x="99.2696%" y="495.50"></text></g><g><title>tailcall`opentelemetry::context::Context::current (103 samples, 0.20%)</title><rect x="99.0386%" y="469" width="0.1965%" height="15" fill="rgb(213,28,48)" fg:x="51922" fg:w="103"/><text x="99.2886%" y="479.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::clone_span (6 samples, 0.01%)</title><rect x="99.2542%" y="469" width="0.0114%" height="15" fill="rgb(250,196,2)" fg:x="52035" fg:w="6"/><text x="99.5042%" y="479.50"></text></g><g><title>tailcall`tailcall::core::http::telemetry::propagate_context (205 samples, 0.39%)</title><rect x="98.8918%" y="501" width="0.3910%" height="15" fill="rgb(227,5,17)" fg:x="51845" fg:w="205"/><text x="99.1418%" y="511.50"></text></g><g><title>tailcall`tracing::span::Span::current (25 samples, 0.05%)</title><rect x="99.2351%" y="485" width="0.0477%" height="15" fill="rgb(221,226,24)" fg:x="52025" fg:w="25"/><text x="99.4851%" y="495.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::current_span (7 samples, 0.01%)</title><rect x="99.2694%" y="469" width="0.0134%" height="15" fill="rgb(211,5,48)" fg:x="52043" fg:w="7"/><text x="99.5194%" y="479.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::clone_span (11 samples, 0.02%)</title><rect x="99.4468%" y="485" width="0.0210%" height="15" fill="rgb(219,150,6)" fg:x="52136" fg:w="11"/><text x="99.6968%" y="495.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (11 samples, 0.02%)</title><rect x="99.4468%" y="469" width="0.0210%" height="15" fill="rgb(251,46,16)" fg:x="52136" fg:w="11"/><text x="99.6968%" y="479.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (7 samples, 0.01%)</title><rect x="99.4545%" y="453" width="0.0134%" height="15" fill="rgb(220,204,40)" fg:x="52140" fg:w="7"/><text x="99.7045%" y="463.50"></text></g><g><title>tailcall`tailcall::core::http::request_handler::handle_request::_{{closure}}::_{{closure}} (37,227 samples, 71.01%)</title><rect x="28.4859%" y="517" width="71.0087%" height="15" fill="rgb(211,85,2)" fg:x="14934" fg:w="37227"/><text x="28.7359%" y="527.50">tailcall`tailcall::core::http::request_handler::handle_request::_{{closure}}::_{{closure}}</text></g><g><title>tailcall`tracing::span::Span::current (111 samples, 0.21%)</title><rect x="99.2828%" y="501" width="0.2117%" height="15" fill="rgb(229,17,7)" fg:x="52050" fg:w="111"/><text x="99.5328%" y="511.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::current_span (14 samples, 0.03%)</title><rect x="99.4678%" y="485" width="0.0267%" height="15" fill="rgb(239,72,28)" fg:x="52147" fg:w="14"/><text x="99.7178%" y="495.50"></text></g><g><title>tailcall`tailcall::core::http::telemetry::RequestCounter::update (15 samples, 0.03%)</title><rect x="99.5041%" y="517" width="0.0286%" height="15" fill="rgb(230,47,54)" fg:x="52166" fg:w="15"/><text x="99.7541%" y="527.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (15 samples, 0.03%)</title><rect x="99.5479%" y="501" width="0.0286%" height="15" fill="rgb(214,50,8)" fg:x="52189" fg:w="15"/><text x="99.7979%" y="511.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::enabled (6 samples, 0.01%)</title><rect x="99.5765%" y="501" width="0.0114%" height="15" fill="rgb(216,198,43)" fg:x="52204" fg:w="6"/><text x="99.8265%" y="511.50"></text></g><g><title>tailcall`tracing::__macro_support::__is_enabled (30 samples, 0.06%)</title><rect x="99.5327%" y="517" width="0.0572%" height="15" fill="rgb(234,20,35)" fg:x="52181" fg:w="30"/><text x="99.7827%" y="527.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::new_span (42 samples, 0.08%)</title><rect x="99.6261%" y="501" width="0.0801%" height="15" fill="rgb(254,45,19)" fg:x="52230" fg:w="42"/><text x="99.8761%" y="511.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::new_span (37 samples, 0.07%)</title><rect x="99.6357%" y="485" width="0.0706%" height="15" fill="rgb(219,14,44)" fg:x="52235" fg:w="37"/><text x="99.8857%" y="495.50"></text></g><g><title>tailcall`tracing::span::Span::new (60 samples, 0.11%)</title><rect x="99.5956%" y="517" width="0.1144%" height="15" fill="rgb(217,220,26)" fg:x="52214" fg:w="60"/><text x="99.8456%" y="527.50"></text></g><g><title>tailcall`tailcall::core::http::request_handler::handle_request::_{{closure}} (37,975 samples, 72.44%)</title><rect x="27.2861%" y="533" width="72.4354%" height="15" fill="rgb(213,158,28)" fg:x="14305" fg:w="37975"/><text x="27.5361%" y="543.50">tailcall`tailcall::core::http::request_handler::handle_request::_{{closure}}</text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::is_enabled_inner (6 samples, 0.01%)</title><rect x="99.7101%" y="517" width="0.0114%" height="15" fill="rgb(252,51,52)" fg:x="52274" fg:w="6"/><text x="99.9601%" y="527.50"></text></g><g><title>tailcall`&lt;hyper::server::conn::upgrades::UpgradeableConnection&lt;I,S,E&gt; as core::future::future::Future&gt;::poll (50,497 samples, 96.32%)</title><rect x="3.4239%" y="549" width="96.3205%" height="15" fill="rgb(246,89,16)" fg:x="1795" fg:w="50497"/><text x="3.6739%" y="559.50">tailcall`&lt;hyper::server::conn::upgrades::UpgradeableConnection&lt;I,S,E&gt; as core::future::future::Future&gt;::poll</text></g><g><title>tailcall`tracing::span::Span::new (9 samples, 0.02%)</title><rect x="99.7272%" y="533" width="0.0172%" height="15" fill="rgb(216,158,49)" fg:x="52283" fg:w="9"/><text x="99.9772%" y="543.50"></text></g><g><title>tailcall`core::task::poll::Poll&lt;core::result::Result&lt;T,E&gt;&gt;::map_err (9 samples, 0.02%)</title><rect x="99.7482%" y="549" width="0.0172%" height="15" fill="rgb(236,107,19)" fg:x="52294" fg:w="9"/><text x="99.9982%" y="559.50"></text></g><g><title>tailcall`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_flush (7 samples, 0.01%)</title><rect x="99.7845%" y="549" width="0.0134%" height="15" fill="rgb(228,185,30)" fg:x="52313" fg:w="7"/><text x="100.0345%" y="559.50"></text></g><g><title>tailcall`&lt;hyper::server::server::new_svc::NewSvcTask&lt;I,N,S,E,W&gt; as core::future::future::Future&gt;::poll (50,570 samples, 96.46%)</title><rect x="3.3819%" y="565" width="96.4598%" height="15" fill="rgb(246,134,8)" fg:x="1773" fg:w="50570"/><text x="3.6319%" y="575.50">tailcall`&lt;hyper::server::server::new_svc::NewSvcTask&lt;I,N,S,E,W&gt; as core::future::future::Future&gt;::poll</text></g><g><title>tailcall`tailcall::core::http::request_handler::handle_request::_{{closure}} (11 samples, 0.02%)</title><rect x="99.8207%" y="549" width="0.0210%" height="15" fill="rgb(214,143,50)" fg:x="52332" fg:w="11"/><text x="100.0707%" y="559.50"></text></g><g><title>tailcall`tailcall::cli::server::http_server::Server::start::_{{closure}} (7 samples, 0.01%)</title><rect x="99.8493%" y="565" width="0.0134%" height="15" fill="rgb(228,75,8)" fg:x="52347" fg:w="7"/><text x="100.0993%" y="575.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (11 samples, 0.02%)</title><rect x="99.9008%" y="517" width="0.0210%" height="15" fill="rgb(207,175,4)" fg:x="52374" fg:w="11"/><text x="100.1508%" y="527.50"></text></g><g><title>tailcall`parking_lot::condvar::Condvar::notify_one_slow (14 samples, 0.03%)</title><rect x="99.8989%" y="533" width="0.0267%" height="15" fill="rgb(205,108,24)" fg:x="52373" fg:w="14"/><text x="100.1489%" y="543.50"></text></g><g><title>tailcall`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (32 samples, 0.06%)</title><rect x="99.8722%" y="565" width="0.0610%" height="15" fill="rgb(244,120,49)" fg:x="52359" fg:w="32"/><text x="100.1222%" y="575.50"></text></g><g><title>tailcall`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task::_{{closure}} (30 samples, 0.06%)</title><rect x="99.8760%" y="549" width="0.0572%" height="15" fill="rgb(223,47,38)" fg:x="52361" fg:w="30"/><text x="100.1260%" y="559.50"></text></g><g><title>tailcall`tokio::runtime::task::raw::poll (50,968 samples, 97.22%)</title><rect x="2.7563%" y="581" width="97.2189%" height="15" fill="rgb(229,179,11)" fg:x="1445" fg:w="50968"/><text x="3.0063%" y="591.50">tailcall`tokio::runtime::task::raw::poll</text></g><g><title>tailcall`tokio::runtime::task::state::State::transition_to_idle (22 samples, 0.04%)</title><rect x="99.9332%" y="565" width="0.0420%" height="15" fill="rgb(231,122,1)" fg:x="52391" fg:w="22"/><text x="100.1832%" y="575.50"></text></g><g><title>tailcall`tokio::runtime::scheduler::multi_thread::worker::Context::run_task (51,155 samples, 97.58%)</title><rect x="2.4034%" y="597" width="97.5756%" height="15" fill="rgb(245,119,9)" fg:x="1260" fg:w="51155"/><text x="2.6534%" y="607.50">tailcall`tokio::runtime::scheduler::multi_thread::worker::Context::run_task</text></g><g><title>tailcall`core::ops::function::FnOnce::call_once{{vtable.shim}} (52,417 samples, 99.98%)</title><rect x="0.0114%" y="645" width="99.9828%" height="15" fill="rgb(241,163,25)" fg:x="6" fg:w="52417"/><text x="0.2614%" y="655.50">tailcall`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>tailcall`std::sys_common::backtrace::__rust_begin_short_backtrace (52,417 samples, 99.98%)</title><rect x="0.0114%" y="629" width="99.9828%" height="15" fill="rgb(217,214,3)" fg:x="6" fg:w="52417"/><text x="0.2614%" y="639.50">tailcall`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>tailcall`tokio::runtime::task::raw::poll (52,403 samples, 99.96%)</title><rect x="0.0381%" y="613" width="99.9561%" height="15" fill="rgb(240,86,28)" fg:x="20" fg:w="52403"/><text x="0.2881%" y="623.50">tailcall`tokio::runtime::task::raw::poll</text></g><g><title>tailcall`tokio::runtime::task::raw::poll (7 samples, 0.01%)</title><rect x="99.9809%" y="597" width="0.0134%" height="15" fill="rgb(215,47,9)" fg:x="52416" fg:w="7"/><text x="100.2309%" y="607.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (52,419 samples, 99.99%)</title><rect x="0.0114%" y="693" width="99.9866%" height="15" fill="rgb(252,25,45)" fg:x="6" fg:w="52419"/><text x="0.2614%" y="703.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (52,419 samples, 99.99%)</title><rect x="0.0114%" y="677" width="99.9866%" height="15" fill="rgb(251,164,9)" fg:x="6" fg:w="52419"/><text x="0.2614%" y="687.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>tailcall`std::sys::pal::unix::thread::Thread::new::thread_start (52,419 samples, 99.99%)</title><rect x="0.0114%" y="661" width="99.9866%" height="15" fill="rgb(233,194,0)" fg:x="6" fg:w="52419"/><text x="0.2614%" y="671.50">tailcall`std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>all (52,426 samples, 100%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(249,111,24)" fg:x="0" fg:w="52426"/><text x="0.2500%" y="719.50"></text></g></svg></svg>
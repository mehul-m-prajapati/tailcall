<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="486" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="469.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="469.00"> </text><svg id="frames" x="10" width="1180" total_samples="34877"><g><title>dyld`start (5 samples, 0.01%)</title><rect x="0.0000%" y="421" width="0.0143%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="5"/><text x="0.2500%" y="431.50"></text></g><g><title>tailcall`main (5 samples, 0.01%)</title><rect x="0.0000%" y="405" width="0.0143%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="5"/><text x="0.2500%" y="415.50"></text></g><g><title>tailcall`std::sys_common::backtrace::__rust_begin_short_backtrace (5 samples, 0.01%)</title><rect x="0.0000%" y="389" width="0.0143%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="5"/><text x="0.2500%" y="399.50"></text></g><g><title>tailcall`tailcall::main (5 samples, 0.01%)</title><rect x="0.0000%" y="373" width="0.0143%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="5"/><text x="0.2500%" y="383.50"></text></g><g><title>tailcall`tailcall::cli::tc::run::run::_{{closure}} (5 samples, 0.01%)</title><rect x="0.0000%" y="357" width="0.0143%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="5"/><text x="0.2500%" y="367.50"></text></g><g><title>tailcall`tokio::runtime::scheduler::multi_thread::worker::Context::run_task (7 samples, 0.02%)</title><rect x="0.0201%" y="341" width="0.0201%" height="15" fill="rgb(232,128,0)" fg:x="7" fg:w="7"/><text x="0.2701%" y="351.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (14 samples, 0.04%)</title><rect x="0.2753%" y="325" width="0.0401%" height="15" fill="rgb(207,160,47)" fg:x="96" fg:w="14"/><text x="0.5253%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (29 samples, 0.08%)</title><rect x="0.3441%" y="293" width="0.0831%" height="15" fill="rgb(228,23,34)" fg:x="120" fg:w="29"/><text x="0.5941%" y="303.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (36 samples, 0.10%)</title><rect x="0.3297%" y="309" width="0.1032%" height="15" fill="rgb(218,30,26)" fg:x="115" fg:w="36"/><text x="0.5797%" y="319.50"></text></g><g><title>tailcall`std::sys::pal::unix::time::Timespec::now (38 samples, 0.11%)</title><rect x="0.3297%" y="325" width="0.1090%" height="15" fill="rgb(220,122,19)" fg:x="115" fg:w="38"/><text x="0.5797%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (19 samples, 0.05%)</title><rect x="0.5190%" y="293" width="0.0545%" height="15" fill="rgb(250,228,42)" fg:x="181" fg:w="19"/><text x="0.7690%" y="303.50"></text></g><g><title>tailcall`parking_lot::condvar::Condvar::notify_one_slow (21 samples, 0.06%)</title><rect x="0.5161%" y="309" width="0.0602%" height="15" fill="rgb(240,193,28)" fg:x="180" fg:w="21"/><text x="0.7661%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (236 samples, 0.68%)</title><rect x="0.5906%" y="293" width="0.6767%" height="15" fill="rgb(216,20,37)" fg:x="206" fg:w="236"/><text x="0.8406%" y="303.50"></text></g><g><title>tailcall`parking_lot::condvar::Condvar::wait_until_internal (252 samples, 0.72%)</title><rect x="0.5763%" y="309" width="0.7225%" height="15" fill="rgb(206,188,39)" fg:x="201" fg:w="252"/><text x="0.8263%" y="319.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (11 samples, 0.03%)</title><rect x="1.2673%" y="293" width="0.0315%" height="15" fill="rgb(217,207,13)" fg:x="442" fg:w="11"/><text x="1.5173%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`kevent (537 samples, 1.54%)</title><rect x="1.3304%" y="293" width="1.5397%" height="15" fill="rgb(231,73,38)" fg:x="464" fg:w="537"/><text x="1.5804%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (20 samples, 0.06%)</title><rect x="2.8758%" y="261" width="0.0573%" height="15" fill="rgb(225,20,46)" fg:x="1003" fg:w="20"/><text x="3.1258%" y="271.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (23 samples, 0.07%)</title><rect x="2.8701%" y="277" width="0.0659%" height="15" fill="rgb(210,31,41)" fg:x="1001" fg:w="23"/><text x="3.1201%" y="287.50"></text></g><g><title>tailcall`std::sys::pal::unix::time::Timespec::now (24 samples, 0.07%)</title><rect x="2.8701%" y="293" width="0.0688%" height="15" fill="rgb(221,200,47)" fg:x="1001" fg:w="24"/><text x="3.1201%" y="303.50"></text></g><g><title>tailcall`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (5 samples, 0.01%)</title><rect x="3.0909%" y="261" width="0.0143%" height="15" fill="rgb(226,26,5)" fg:x="1078" fg:w="5"/><text x="3.3409%" y="271.50"></text></g><g><title>tailcall`tokio::runtime::io::scheduled_io::ScheduledIo::wake (57 samples, 0.16%)</title><rect x="3.0048%" y="277" width="0.1634%" height="15" fill="rgb(249,33,26)" fg:x="1048" fg:w="57"/><text x="3.2548%" y="287.50"></text></g><g><title>tailcall`tokio::runtime::task::waker::wake_by_val (20 samples, 0.06%)</title><rect x="3.1109%" y="261" width="0.0573%" height="15" fill="rgb(235,183,28)" fg:x="1085" fg:w="20"/><text x="3.3609%" y="271.50"></text></g><g><title>tailcall`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (14 samples, 0.04%)</title><rect x="3.1281%" y="245" width="0.0401%" height="15" fill="rgb(221,5,38)" fg:x="1091" fg:w="14"/><text x="3.3781%" y="255.50"></text></g><g><title>tailcall`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task::_{{closure}} (9 samples, 0.03%)</title><rect x="3.1425%" y="229" width="0.0258%" height="15" fill="rgb(247,18,42)" fg:x="1096" fg:w="9"/><text x="3.3925%" y="239.50"></text></g><g><title>tailcall`tokio::runtime::io::driver::Driver::turn (82 samples, 0.24%)</title><rect x="2.9389%" y="293" width="0.2351%" height="15" fill="rgb(241,131,45)" fg:x="1025" fg:w="82"/><text x="3.1889%" y="303.50"></text></g><g><title>tailcall`tokio::runtime::io::scheduled_io::ScheduledIo::wake (7 samples, 0.02%)</title><rect x="3.1740%" y="293" width="0.0201%" height="15" fill="rgb(249,31,29)" fg:x="1107" fg:w="7"/><text x="3.4240%" y="303.50"></text></g><g><title>tailcall`tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time::_{{closure}} (45 samples, 0.13%)</title><rect x="3.1941%" y="293" width="0.1290%" height="15" fill="rgb(225,111,53)" fg:x="1114" fg:w="45"/><text x="3.4441%" y="303.50"></text></g><g><title>tailcall`tokio::runtime::time::wheel::Wheel::next_expiration (13 samples, 0.04%)</title><rect x="3.2858%" y="277" width="0.0373%" height="15" fill="rgb(238,160,17)" fg:x="1146" fg:w="13"/><text x="3.5358%" y="287.50"></text></g><g><title>tailcall`tokio::runtime::time::Driver::park_internal (716 samples, 2.05%)</title><rect x="1.3046%" y="309" width="2.0529%" height="15" fill="rgb(214,148,48)" fg:x="455" fg:w="716"/><text x="1.5546%" y="319.50">t..</text></g><g><title>tailcall`tokio::runtime::time::wheel::Wheel::next_expiration (12 samples, 0.03%)</title><rect x="3.3231%" y="293" width="0.0344%" height="15" fill="rgb(232,36,49)" fg:x="1159" fg:w="12"/><text x="3.5731%" y="303.50"></text></g><g><title>tailcall`tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (1,019 samples, 2.92%)</title><rect x="0.4416%" y="325" width="2.9217%" height="15" fill="rgb(209,103,24)" fg:x="154" fg:w="1019"/><text x="0.6916%" y="335.50">ta..</text></g><g><title>libdyld.dylib`tlv_get_addr (9 samples, 0.03%)</title><rect x="3.4980%" y="309" width="0.0258%" height="15" fill="rgb(229,88,8)" fg:x="1220" fg:w="9"/><text x="3.7480%" y="319.50"></text></g><g><title>tailcall`&lt;hyper::server::server::new_svc::NewSvcTask&lt;I,N,S,E,W&gt; as core::future::future::Future&gt;::poll (10 samples, 0.03%)</title><rect x="3.5295%" y="309" width="0.0287%" height="15" fill="rgb(213,181,19)" fg:x="1231" fg:w="10"/><text x="3.7795%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (66 samples, 0.19%)</title><rect x="3.5754%" y="293" width="0.1892%" height="15" fill="rgb(254,191,54)" fg:x="1247" fg:w="66"/><text x="3.8254%" y="303.50"></text></g><g><title>tailcall`parking_lot::condvar::Condvar::notify_one_slow (77 samples, 0.22%)</title><rect x="3.5582%" y="309" width="0.2208%" height="15" fill="rgb(241,83,37)" fg:x="1241" fg:w="77"/><text x="3.8082%" y="319.50"></text></g><g><title>tailcall`&lt;hyper::server::conn::upgrades::UpgradeableConnection&lt;I,S,E&gt; as core::future::future::Future&gt;::poll (5 samples, 0.01%)</title><rect x="3.8765%" y="293" width="0.0143%" height="15" fill="rgb(233,36,39)" fg:x="1352" fg:w="5"/><text x="4.1265%" y="303.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (7 samples, 0.02%)</title><rect x="3.9281%" y="277" width="0.0201%" height="15" fill="rgb(226,3,54)" fg:x="1370" fg:w="7"/><text x="4.1781%" y="287.50"></text></g><g><title>tailcall`&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10 samples, 0.03%)</title><rect x="3.9482%" y="277" width="0.0287%" height="15" fill="rgb(245,192,40)" fg:x="1377" fg:w="10"/><text x="4.1982%" y="287.50"></text></g><g><title>tailcall`&lt;hyper::proto::h1::dispatch::Server&lt;S,hyper::body::body::Body&gt; as hyper::proto::h1::dispatch::Dispatch&gt;::recv_msg (4 samples, 0.01%)</title><rect x="3.9768%" y="277" width="0.0115%" height="15" fill="rgb(238,167,29)" fg:x="1387" fg:w="4"/><text x="4.2268%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (526 samples, 1.51%)</title><rect x="4.7080%" y="261" width="1.5082%" height="15" fill="rgb(232,182,51)" fg:x="1642" fg:w="526"/><text x="4.9580%" y="271.50"></text></g><g><title>tailcall`&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (13 samples, 0.04%)</title><rect x="6.2161%" y="261" width="0.0373%" height="15" fill="rgb(231,60,39)" fg:x="2168" fg:w="13"/><text x="6.4661%" y="271.50"></text></g><g><title>tailcall`&lt;hyper::proto::h1::dispatch::Server&lt;S,hyper::body::body::Body&gt; as hyper::proto::h1::dispatch::Dispatch&gt;::recv_msg (152 samples, 0.44%)</title><rect x="6.2620%" y="261" width="0.4358%" height="15" fill="rgb(208,69,12)" fg:x="2184" fg:w="152"/><text x="6.5120%" y="271.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;http::header::map::HeaderMap&gt; (77 samples, 0.22%)</title><rect x="6.4770%" y="245" width="0.2208%" height="15" fill="rgb(235,93,37)" fg:x="2259" fg:w="77"/><text x="6.7270%" y="255.50"></text></g><g><title>tailcall`&lt;hyper::proto::h1::io::WriteBuf&lt;B&gt; as bytes::buf::buf_impl::Buf&gt;::advance (18 samples, 0.05%)</title><rect x="6.6978%" y="261" width="0.0516%" height="15" fill="rgb(213,116,39)" fg:x="2336" fg:w="18"/><text x="6.9478%" y="271.50"></text></g><g><title>tailcall`DYLD-STUB$$memcpy (4 samples, 0.01%)</title><rect x="6.7638%" y="261" width="0.0115%" height="15" fill="rgb(222,207,29)" fg:x="2359" fg:w="4"/><text x="7.0138%" y="271.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;hyper::body::body::Body&gt; (4 samples, 0.01%)</title><rect x="6.7810%" y="261" width="0.0115%" height="15" fill="rgb(206,96,30)" fg:x="2365" fg:w="4"/><text x="7.0310%" y="271.50"></text></g><g><title>tailcall`futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::poll_unparked (4 samples, 0.01%)</title><rect x="6.8068%" y="261" width="0.0115%" height="15" fill="rgb(218,138,4)" fg:x="2374" fg:w="4"/><text x="7.0568%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_init (6 samples, 0.02%)</title><rect x="6.8670%" y="245" width="0.0172%" height="15" fill="rgb(250,191,14)" fg:x="2395" fg:w="6"/><text x="7.1170%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (6 samples, 0.02%)</title><rect x="6.8842%" y="245" width="0.0172%" height="15" fill="rgb(239,60,40)" fg:x="2401" fg:w="6"/><text x="7.1342%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (5 samples, 0.01%)</title><rect x="6.9014%" y="245" width="0.0143%" height="15" fill="rgb(206,27,48)" fg:x="2407" fg:w="5"/><text x="7.1514%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutexattr_init (12 samples, 0.03%)</title><rect x="6.9186%" y="245" width="0.0344%" height="15" fill="rgb(225,35,8)" fg:x="2413" fg:w="12"/><text x="7.1686%" y="255.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (8 samples, 0.02%)</title><rect x="6.9759%" y="229" width="0.0229%" height="15" fill="rgb(250,213,24)" fg:x="2433" fg:w="8"/><text x="7.2259%" y="239.50"></text></g><g><title>tailcall`_mi_malloc_generic (8 samples, 0.02%)</title><rect x="6.9759%" y="213" width="0.0229%" height="15" fill="rgb(247,123,22)" fg:x="2433" fg:w="8"/><text x="7.2259%" y="223.50"></text></g><g><title>tailcall`_mi_free_delayed_block (7 samples, 0.02%)</title><rect x="6.9788%" y="197" width="0.0201%" height="15" fill="rgb(231,138,38)" fg:x="2434" fg:w="7"/><text x="7.2288%" y="207.50"></text></g><g><title>tailcall`_mi_page_free (4 samples, 0.01%)</title><rect x="6.9874%" y="181" width="0.0115%" height="15" fill="rgb(231,145,46)" fg:x="2437" fg:w="4"/><text x="7.2374%" y="191.50"></text></g><g><title>tailcall`mi_segment_page_clear (4 samples, 0.01%)</title><rect x="6.9874%" y="165" width="0.0115%" height="15" fill="rgb(251,118,11)" fg:x="2437" fg:w="4"/><text x="7.2374%" y="175.50"></text></g><g><title>tailcall`mi_segment_span_free_coalesce (4 samples, 0.01%)</title><rect x="6.9874%" y="149" width="0.0115%" height="15" fill="rgb(217,147,25)" fg:x="2437" fg:w="4"/><text x="7.2374%" y="159.50"></text></g><g><title>tailcall`&lt;std::sys::sync::mutex::pthread::AllocatedMutex as std::sys_common::lazy_box::LazyInit&gt;::init (18 samples, 0.05%)</title><rect x="6.9616%" y="245" width="0.0516%" height="15" fill="rgb(247,81,37)" fg:x="2428" fg:w="18"/><text x="7.2116%" y="255.50"></text></g><g><title>tailcall`mi_malloc_aligned (5 samples, 0.01%)</title><rect x="6.9989%" y="229" width="0.0143%" height="15" fill="rgb(209,12,38)" fg:x="2441" fg:w="5"/><text x="7.2489%" y="239.50"></text></g><g><title>tailcall`futures_channel::mpsc::Sender&lt;T&gt;::try_send (85 samples, 0.24%)</title><rect x="6.8182%" y="261" width="0.2437%" height="15" fill="rgb(227,1,9)" fg:x="2378" fg:w="85"/><text x="7.0682%" y="271.50"></text></g><g><title>tailcall`mi_malloc_aligned (10 samples, 0.03%)</title><rect x="7.0333%" y="245" width="0.0287%" height="15" fill="rgb(248,47,43)" fg:x="2453" fg:w="10"/><text x="7.2833%" y="255.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (10 samples, 0.03%)</title><rect x="7.1193%" y="245" width="0.0287%" height="15" fill="rgb(221,10,30)" fg:x="2483" fg:w="10"/><text x="7.3693%" y="255.50"></text></g><g><title>tailcall`_mi_free_delayed_block (10 samples, 0.03%)</title><rect x="7.1709%" y="213" width="0.0287%" height="15" fill="rgb(210,229,1)" fg:x="2501" fg:w="10"/><text x="7.4209%" y="223.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (19 samples, 0.05%)</title><rect x="7.1508%" y="245" width="0.0545%" height="15" fill="rgb(222,148,37)" fg:x="2494" fg:w="19"/><text x="7.4008%" y="255.50"></text></g><g><title>tailcall`_mi_malloc_generic (17 samples, 0.05%)</title><rect x="7.1566%" y="229" width="0.0487%" height="15" fill="rgb(234,67,33)" fg:x="2496" fg:w="17"/><text x="7.4066%" y="239.50"></text></g><g><title>tailcall`hyper::body::body::Body::new_channel (77 samples, 0.22%)</title><rect x="7.0620%" y="261" width="0.2208%" height="15" fill="rgb(247,98,35)" fg:x="2463" fg:w="77"/><text x="7.3120%" y="271.50"></text></g><g><title>tailcall`mi_malloc_aligned (27 samples, 0.08%)</title><rect x="7.2053%" y="245" width="0.0774%" height="15" fill="rgb(247,138,52)" fg:x="2513" fg:w="27"/><text x="7.4553%" y="255.50"></text></g><g><title>tailcall`hyper::body::body::Sender::poll_ready (14 samples, 0.04%)</title><rect x="7.2827%" y="261" width="0.0401%" height="15" fill="rgb(213,79,30)" fg:x="2540" fg:w="14"/><text x="7.5327%" y="271.50"></text></g><g><title>tailcall`DYLD-STUB$$clock_gettime (9 samples, 0.03%)</title><rect x="7.3315%" y="245" width="0.0258%" height="15" fill="rgb(246,177,23)" fg:x="2557" fg:w="9"/><text x="7.5815%" y="255.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$__commpage_gettimeofday (6 samples, 0.02%)</title><rect x="7.3688%" y="213" width="0.0172%" height="15" fill="rgb(230,62,27)" fg:x="2570" fg:w="6"/><text x="7.6188%" y="223.50"></text></g><g><title>libsystem_c.dylib`gettimeofday (148 samples, 0.42%)</title><rect x="7.3860%" y="213" width="0.4243%" height="15" fill="rgb(216,154,8)" fg:x="2576" fg:w="148"/><text x="7.6360%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (136 samples, 0.39%)</title><rect x="7.4204%" y="197" width="0.3899%" height="15" fill="rgb(244,35,45)" fg:x="2588" fg:w="136"/><text x="7.6704%" y="207.50"></text></g><g><title>tailcall`hyper::common::date::CachedDate::check (171 samples, 0.49%)</title><rect x="7.3229%" y="261" width="0.4903%" height="15" fill="rgb(251,115,12)" fg:x="2554" fg:w="171"/><text x="7.5729%" y="271.50"></text></g><g><title>tailcall`std::sys::pal::unix::time::Timespec::now (159 samples, 0.46%)</title><rect x="7.3573%" y="245" width="0.4559%" height="15" fill="rgb(240,54,50)" fg:x="2566" fg:w="159"/><text x="7.6073%" y="255.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (159 samples, 0.46%)</title><rect x="7.3573%" y="229" width="0.4559%" height="15" fill="rgb(233,84,52)" fg:x="2566" fg:w="159"/><text x="7.6073%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (4 samples, 0.01%)</title><rect x="7.8361%" y="245" width="0.0115%" height="15" fill="rgb(207,117,47)" fg:x="2733" fg:w="4"/><text x="8.0861%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (28 samples, 0.08%)</title><rect x="7.8476%" y="245" width="0.0803%" height="15" fill="rgb(249,43,39)" fg:x="2737" fg:w="28"/><text x="8.0976%" y="255.50"></text></g><g><title>tailcall`_mi_page_retire (4 samples, 0.01%)</title><rect x="7.9307%" y="245" width="0.0115%" height="15" fill="rgb(209,38,44)" fg:x="2766" fg:w="4"/><text x="8.1807%" y="255.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;std::collections::hash::map::HashMap&lt;core::any::TypeId,alloc::boxed::Box&lt;dyn core::any::Any+core::marker::Sync+core::marker::Send&gt;,core::hash::BuildHasherDefault&lt;http::extensions::IdHasher&gt;&gt;&gt;&gt;&gt; (5 samples, 0.01%)</title><rect x="7.9451%" y="245" width="0.0143%" height="15" fill="rgb(236,212,23)" fg:x="2771" fg:w="5"/><text x="8.1951%" y="255.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;http::header::map::Drain&lt;http::header::value::HeaderValue&gt;&gt; (5 samples, 0.01%)</title><rect x="7.9594%" y="245" width="0.0143%" height="15" fill="rgb(242,79,21)" fg:x="2776" fg:w="5"/><text x="8.2094%" y="255.50"></text></g><g><title>tailcall`http::header::name::HeaderName::as_str (21 samples, 0.06%)</title><rect x="7.9737%" y="245" width="0.0602%" height="15" fill="rgb(211,96,35)" fg:x="2781" fg:w="21"/><text x="8.2237%" y="255.50"></text></g><g><title>tailcall`hyper::proto::h1::role::encode_headers (86 samples, 0.25%)</title><rect x="8.0339%" y="245" width="0.2466%" height="15" fill="rgb(253,215,40)" fg:x="2802" fg:w="86"/><text x="8.2839%" y="255.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;http::header::map::Drain&lt;http::header::value::HeaderValue&gt;&gt; (5 samples, 0.01%)</title><rect x="8.2662%" y="229" width="0.0143%" height="15" fill="rgb(211,81,21)" fg:x="2883" fg:w="5"/><text x="8.5162%" y="239.50"></text></g><g><title>tailcall`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::encode_head (169 samples, 0.48%)</title><rect x="7.8132%" y="261" width="0.4846%" height="15" fill="rgb(208,190,38)" fg:x="2725" fg:w="169"/><text x="8.0632%" y="271.50"></text></g><g><title>tailcall`mi_free (6 samples, 0.02%)</title><rect x="8.2805%" y="245" width="0.0172%" height="15" fill="rgb(235,213,38)" fg:x="2888" fg:w="6"/><text x="8.5305%" y="255.50"></text></g><g><title>tailcall`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::maybe_notify (6 samples, 0.02%)</title><rect x="8.2977%" y="261" width="0.0172%" height="15" fill="rgb(237,122,38)" fg:x="2894" fg:w="6"/><text x="8.5477%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`writev (9,230 samples, 26.46%)</title><rect x="8.4296%" y="245" width="26.4644%" height="15" fill="rgb(244,218,35)" fg:x="2940" fg:w="9230"/><text x="8.6796%" y="255.50">libsystem_kernel.dylib`writev</text></g><g><title>tailcall`&lt;hyper::common::buf::BufList&lt;T&gt; as bytes::buf::buf_impl::Buf&gt;::chunks_vectored (4 samples, 0.01%)</title><rect x="34.8941%" y="245" width="0.0115%" height="15" fill="rgb(240,68,47)" fg:x="12170" fg:w="4"/><text x="35.1441%" y="255.50"></text></g><g><title>tailcall`&lt;hyper::proto::h1::io::WriteBuf&lt;B&gt; as bytes::buf::buf_impl::Buf&gt;::advance (38 samples, 0.11%)</title><rect x="34.9084%" y="245" width="0.1090%" height="15" fill="rgb(210,16,53)" fg:x="12175" fg:w="38"/><text x="35.1584%" y="255.50"></text></g><g><title>tailcall`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (38 samples, 0.11%)</title><rect x="35.0173%" y="245" width="0.1090%" height="15" fill="rgb(235,124,12)" fg:x="12213" fg:w="38"/><text x="35.2673%" y="255.50"></text></g><g><title>tailcall`tokio::runtime::io::registration::Registration::poll_ready (9 samples, 0.03%)</title><rect x="35.1005%" y="229" width="0.0258%" height="15" fill="rgb(224,169,11)" fg:x="12242" fg:w="9"/><text x="35.3505%" y="239.50"></text></g><g><title>tailcall`_mi_page_retire (21 samples, 0.06%)</title><rect x="35.1292%" y="245" width="0.0602%" height="15" fill="rgb(250,166,2)" fg:x="12252" fg:w="21"/><text x="35.3792%" y="255.50"></text></g><g><title>tailcall`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::maybe_notify (4 samples, 0.01%)</title><rect x="35.1922%" y="245" width="0.0115%" height="15" fill="rgb(242,216,29)" fg:x="12274" fg:w="4"/><text x="35.4422%" y="255.50"></text></g><g><title>tailcall`hyper::proto::h1::conn::State::try_keep_alive (10 samples, 0.03%)</title><rect x="35.2037%" y="245" width="0.0287%" height="15" fill="rgb(230,116,27)" fg:x="12278" fg:w="10"/><text x="35.4537%" y="255.50"></text></g><g><title>tailcall`mi_free (9 samples, 0.03%)</title><rect x="35.2324%" y="245" width="0.0258%" height="15" fill="rgb(228,99,48)" fg:x="12288" fg:w="9"/><text x="35.4824%" y="255.50"></text></g><g><title>tailcall`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_flush (9,408 samples, 26.97%)</title><rect x="8.3149%" y="261" width="26.9748%" height="15" fill="rgb(253,11,6)" fg:x="2900" fg:w="9408"/><text x="8.5649%" y="271.50">tailcall`hyper::proto::h1::conn::Conn&lt;I,B,T..</text></g><g><title>tailcall`tokio::runtime::io::registration::Registration::poll_ready (11 samples, 0.03%)</title><rect x="35.2582%" y="245" width="0.0315%" height="15" fill="rgb(247,143,39)" fg:x="12297" fg:w="11"/><text x="35.5082%" y="255.50"></text></g><g><title>tailcall`&lt;hyper::proto::h1::io::Buffered&lt;T,B&gt; as hyper::proto::h1::io::MemRead&gt;::read_mem (19 samples, 0.05%)</title><rect x="35.5162%" y="229" width="0.0545%" height="15" fill="rgb(236,97,10)" fg:x="12387" fg:w="19"/><text x="35.7662%" y="239.50"></text></g><g><title>tailcall`bytes::bytes_mut::BytesMut::split_to (7 samples, 0.02%)</title><rect x="35.5506%" y="213" width="0.0201%" height="15" fill="rgb(233,208,19)" fg:x="12399" fg:w="7"/><text x="35.8006%" y="223.50"></text></g><g><title>tailcall`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (99 samples, 0.28%)</title><rect x="35.2897%" y="261" width="0.2839%" height="15" fill="rgb(216,164,2)" fg:x="12308" fg:w="99"/><text x="35.5397%" y="271.50"></text></g><g><title>tailcall`hyper::proto::h1::decode::Decoder::decode (45 samples, 0.13%)</title><rect x="35.4446%" y="245" width="0.1290%" height="15" fill="rgb(220,129,5)" fg:x="12362" fg:w="45"/><text x="35.6946%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (8 samples, 0.02%)</title><rect x="35.8087%" y="245" width="0.0229%" height="15" fill="rgb(242,17,10)" fg:x="12489" fg:w="8"/><text x="36.0587%" y="255.50"></text></g><g><title>tailcall`bytes::bytes::Bytes::slice (4 samples, 0.01%)</title><rect x="35.8431%" y="245" width="0.0115%" height="15" fill="rgb(242,107,0)" fg:x="12501" fg:w="4"/><text x="36.0931%" y="255.50"></text></g><g><title>tailcall`http::header::map::HeaderMap&lt;T&gt;::try_append2 (19 samples, 0.05%)</title><rect x="35.8603%" y="245" width="0.0545%" height="15" fill="rgb(251,28,31)" fg:x="12507" fg:w="19"/><text x="36.1103%" y="255.50"></text></g><g><title>tailcall`http::header::name::HeaderName::from_bytes (28 samples, 0.08%)</title><rect x="35.9205%" y="245" width="0.0803%" height="15" fill="rgb(233,223,10)" fg:x="12528" fg:w="28"/><text x="36.1705%" y="255.50"></text></g><g><title>tailcall`http::method::Method::from_bytes (4 samples, 0.01%)</title><rect x="36.0008%" y="245" width="0.0115%" height="15" fill="rgb(215,21,27)" fg:x="12556" fg:w="4"/><text x="36.2508%" y="255.50"></text></g><g><title>tailcall`httparse::parse_version (7 samples, 0.02%)</title><rect x="36.0266%" y="245" width="0.0201%" height="15" fill="rgb(232,23,21)" fg:x="12565" fg:w="7"/><text x="36.2766%" y="255.50"></text></g><g><title>tailcall`hyper::headers::connection_close (22 samples, 0.06%)</title><rect x="36.0467%" y="245" width="0.0631%" height="15" fill="rgb(244,5,23)" fg:x="12572" fg:w="22"/><text x="36.2967%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (3,484 samples, 9.99%)</title><rect x="36.2789%" y="229" width="9.9894%" height="15" fill="rgb(226,81,46)" fg:x="12653" fg:w="3484"/><text x="36.5289%" y="239.50">libsystem_kern..</text></g><g><title>libdyld.dylib`tlv_get_addr (4 samples, 0.01%)</title><rect x="46.2970%" y="213" width="0.0115%" height="15" fill="rgb(247,70,30)" fg:x="16147" fg:w="4"/><text x="46.5470%" y="223.50"></text></g><g><title>tailcall`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (52 samples, 0.15%)</title><rect x="46.2683%" y="229" width="0.1491%" height="15" fill="rgb(212,68,19)" fg:x="16137" fg:w="52"/><text x="46.5183%" y="239.50"></text></g><g><title>tailcall`tokio::runtime::io::registration::Registration::poll_ready (38 samples, 0.11%)</title><rect x="46.3085%" y="213" width="0.1090%" height="15" fill="rgb(240,187,13)" fg:x="16151" fg:w="38"/><text x="46.5585%" y="223.50"></text></g><g><title>tailcall`hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (3,600 samples, 10.32%)</title><rect x="36.1098%" y="245" width="10.3220%" height="15" fill="rgb(223,113,26)" fg:x="12594" fg:w="3600"/><text x="36.3598%" y="255.50">tailcall`hyper:..</text></g><g><title>tailcall`tokio::runtime::io::registration::Registration::poll_ready (4 samples, 0.01%)</title><rect x="46.4203%" y="229" width="0.0115%" height="15" fill="rgb(206,192,2)" fg:x="16190" fg:w="4"/><text x="46.6703%" y="239.50"></text></g><g><title>tailcall`&lt;http::method::Inner as core::clone::Clone&gt;::clone (6 samples, 0.02%)</title><rect x="47.0138%" y="229" width="0.0172%" height="15" fill="rgb(241,108,4)" fg:x="16397" fg:w="6"/><text x="47.2638%" y="239.50"></text></g><g><title>tailcall`bytes::bytes::Bytes::slice (19 samples, 0.05%)</title><rect x="47.0310%" y="229" width="0.0545%" height="15" fill="rgb(247,173,49)" fg:x="16403" fg:w="19"/><text x="47.2810%" y="239.50"></text></g><g><title>tailcall`bytes::bytes_mut::BytesMut::split_to (6 samples, 0.02%)</title><rect x="47.0855%" y="229" width="0.0172%" height="15" fill="rgb(224,114,35)" fg:x="16422" fg:w="6"/><text x="47.3355%" y="239.50"></text></g><g><title>tailcall`mi_malloc_aligned (4 samples, 0.01%)</title><rect x="47.0912%" y="213" width="0.0115%" height="15" fill="rgb(245,159,27)" fg:x="16424" fg:w="4"/><text x="47.3412%" y="223.50"></text></g><g><title>tailcall`bytes::bytes_mut::shared_v_clone (14 samples, 0.04%)</title><rect x="47.1027%" y="229" width="0.0401%" height="15" fill="rgb(245,172,44)" fg:x="16428" fg:w="14"/><text x="47.3527%" y="239.50"></text></g><g><title>tailcall`core::str::_&lt;impl str&gt;::trim_matches (6 samples, 0.02%)</title><rect x="47.1486%" y="229" width="0.0172%" height="15" fill="rgb(236,23,11)" fg:x="16444" fg:w="6"/><text x="47.3986%" y="239.50"></text></g><g><title>tailcall`http::header::map::HeaderMap&lt;T&gt;::try_reserve_one (8 samples, 0.02%)</title><rect x="47.3062%" y="213" width="0.0229%" height="15" fill="rgb(205,117,38)" fg:x="16499" fg:w="8"/><text x="47.5562%" y="223.50"></text></g><g><title>tailcall`http::header::map::HeaderMap&lt;T&gt;::try_append2 (80 samples, 0.23%)</title><rect x="47.1715%" y="229" width="0.2294%" height="15" fill="rgb(237,72,25)" fg:x="16452" fg:w="80"/><text x="47.4215%" y="239.50"></text></g><g><title>tailcall`http::header::map::hash_elem_using (25 samples, 0.07%)</title><rect x="47.3292%" y="213" width="0.0717%" height="15" fill="rgb(244,70,9)" fg:x="16507" fg:w="25"/><text x="47.5792%" y="223.50"></text></g><g><title>tailcall`http::header::map::HeaderMap&lt;T&gt;::try_reserve (5 samples, 0.01%)</title><rect x="47.4009%" y="229" width="0.0143%" height="15" fill="rgb(217,125,39)" fg:x="16532" fg:w="5"/><text x="47.6509%" y="239.50"></text></g><g><title>tailcall`http::header::map::HeaderMap&lt;T&gt;::try_reserve_one (12 samples, 0.03%)</title><rect x="47.4152%" y="229" width="0.0344%" height="15" fill="rgb(235,36,10)" fg:x="16537" fg:w="12"/><text x="47.6652%" y="239.50"></text></g><g><title>tailcall`http::header::map::hash_elem_using (5 samples, 0.01%)</title><rect x="47.4496%" y="229" width="0.0143%" height="15" fill="rgb(251,123,47)" fg:x="16549" fg:w="5"/><text x="47.6996%" y="239.50"></text></g><g><title>tailcall`http::header::name::HeaderName::from_bytes (86 samples, 0.25%)</title><rect x="47.4639%" y="229" width="0.2466%" height="15" fill="rgb(221,13,13)" fg:x="16554" fg:w="86"/><text x="47.7139%" y="239.50"></text></g><g><title>tailcall`http::header::name::StandardHeader::from_bytes (64 samples, 0.18%)</title><rect x="47.7105%" y="229" width="0.1835%" height="15" fill="rgb(238,131,9)" fg:x="16640" fg:w="64"/><text x="47.9605%" y="239.50"></text></g><g><title>tailcall`http::method::Method::from_bytes (4 samples, 0.01%)</title><rect x="47.8940%" y="229" width="0.0115%" height="15" fill="rgb(211,50,8)" fg:x="16704" fg:w="4"/><text x="48.1440%" y="239.50"></text></g><g><title>tailcall`http::uri::Uri::from_shared (36 samples, 0.10%)</title><rect x="47.9055%" y="229" width="0.1032%" height="15" fill="rgb(245,182,24)" fg:x="16708" fg:w="36"/><text x="48.1555%" y="239.50"></text></g><g><title>tailcall`http::uri::path::PathAndQuery::from_shared (32 samples, 0.09%)</title><rect x="47.9170%" y="213" width="0.0918%" height="15" fill="rgb(242,14,37)" fg:x="16712" fg:w="32"/><text x="48.1670%" y="223.50"></text></g><g><title>tailcall`http::uri::path::PathAndQuery::from_shared (9 samples, 0.03%)</title><rect x="48.0087%" y="229" width="0.0258%" height="15" fill="rgb(246,228,12)" fg:x="16744" fg:w="9"/><text x="48.2587%" y="239.50"></text></g><g><title>tailcall`httparse::parse_headers_iter_uninit (171 samples, 0.49%)</title><rect x="48.0345%" y="229" width="0.4903%" height="15" fill="rgb(213,55,15)" fg:x="16753" fg:w="171"/><text x="48.2845%" y="239.50"></text></g><g><title>tailcall`hyper::headers::connection_close (41 samples, 0.12%)</title><rect x="48.5277%" y="229" width="0.1176%" height="15" fill="rgb(209,9,3)" fg:x="16925" fg:w="41"/><text x="48.7777%" y="239.50"></text></g><g><title>tailcall`core::str::iter::SplitInternal&lt;P&gt;::next (38 samples, 0.11%)</title><rect x="48.5363%" y="213" width="0.1090%" height="15" fill="rgb(230,59,30)" fg:x="16928" fg:w="38"/><text x="48.7863%" y="223.50"></text></g><g><title>tailcall`hyper::proto::h1::role::record_header_indices (6 samples, 0.02%)</title><rect x="48.6452%" y="229" width="0.0172%" height="15" fill="rgb(209,121,21)" fg:x="16966" fg:w="6"/><text x="48.8952%" y="239.50"></text></g><g><title>tailcall`hyper::proto::h1::role::parse_headers (783 samples, 2.25%)</title><rect x="46.4317%" y="245" width="2.2450%" height="15" fill="rgb(220,109,13)" fg:x="16194" fg:w="783"/><text x="46.6817%" y="255.50">t..</text></g><g><title>tailcall`mi_malloc_aligned (5 samples, 0.01%)</title><rect x="48.6624%" y="229" width="0.0143%" height="15" fill="rgb(232,18,1)" fg:x="16972" fg:w="5"/><text x="48.9124%" y="239.50"></text></g><g><title>tailcall`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_head (4,571 samples, 13.11%)</title><rect x="35.5736%" y="261" width="13.1061%" height="15" fill="rgb(215,41,42)" fg:x="12407" fg:w="4571"/><text x="35.8236%" y="271.50">tailcall`hyper::prot..</text></g><g><title>tailcall`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (4 samples, 0.01%)</title><rect x="48.6796%" y="229" width="0.0115%" height="15" fill="rgb(224,123,36)" fg:x="16978" fg:w="4"/><text x="48.9296%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (6 samples, 0.02%)</title><rect x="48.7227%" y="197" width="0.0172%" height="15" fill="rgb(240,125,3)" fg:x="16993" fg:w="6"/><text x="48.9727%" y="207.50"></text></g><g><title>tailcall`tokio::runtime::io::registration::Registration::poll_ready (17 samples, 0.05%)</title><rect x="48.7399%" y="197" width="0.0487%" height="15" fill="rgb(205,98,50)" fg:x="16999" fg:w="17"/><text x="48.9899%" y="207.50"></text></g><g><title>tailcall`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (28 samples, 0.08%)</title><rect x="48.7141%" y="213" width="0.0803%" height="15" fill="rgb(205,185,37)" fg:x="16990" fg:w="28"/><text x="48.9641%" y="223.50"></text></g><g><title>tailcall`_mi_free_delayed_block (4 samples, 0.01%)</title><rect x="48.8373%" y="181" width="0.0115%" height="15" fill="rgb(238,207,15)" fg:x="17033" fg:w="4"/><text x="49.0873%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (12 samples, 0.03%)</title><rect x="49.0294%" y="53" width="0.0344%" height="15" fill="rgb(213,199,42)" fg:x="17100" fg:w="12"/><text x="49.2794%" y="63.50"></text></g><g><title>tailcall`_mi_page_free (16 samples, 0.05%)</title><rect x="49.0208%" y="149" width="0.0459%" height="15" fill="rgb(235,201,11)" fg:x="17097" fg:w="16"/><text x="49.2708%" y="159.50"></text></g><g><title>tailcall`mi_segment_page_clear (16 samples, 0.05%)</title><rect x="49.0208%" y="133" width="0.0459%" height="15" fill="rgb(207,46,11)" fg:x="17097" fg:w="16"/><text x="49.2708%" y="143.50"></text></g><g><title>tailcall`mi_segment_span_free_coalesce (16 samples, 0.05%)</title><rect x="49.0208%" y="117" width="0.0459%" height="15" fill="rgb(241,35,35)" fg:x="17097" fg:w="16"/><text x="49.2708%" y="127.50"></text></g><g><title>tailcall`mi_segment_span_free (16 samples, 0.05%)</title><rect x="49.0208%" y="101" width="0.0459%" height="15" fill="rgb(243,32,47)" fg:x="17097" fg:w="16"/><text x="49.2708%" y="111.50"></text></g><g><title>tailcall`mi_segment_try_purge (13 samples, 0.04%)</title><rect x="49.0294%" y="85" width="0.0373%" height="15" fill="rgb(247,202,23)" fg:x="17100" fg:w="13"/><text x="49.2794%" y="95.50"></text></g><g><title>tailcall`mi_segment_purge (13 samples, 0.04%)</title><rect x="49.0294%" y="69" width="0.0373%" height="15" fill="rgb(219,102,11)" fg:x="17100" fg:w="13"/><text x="49.2794%" y="79.50"></text></g><g><title>tailcall`_mi_free_delayed_block (64 samples, 0.18%)</title><rect x="48.8890%" y="165" width="0.1835%" height="15" fill="rgb(243,110,44)" fg:x="17051" fg:w="64"/><text x="49.1390%" y="175.50"></text></g><g><title>tailcall`_mi_page_try_use_delayed_free (4 samples, 0.01%)</title><rect x="49.0725%" y="165" width="0.0115%" height="15" fill="rgb(222,74,54)" fg:x="17115" fg:w="4"/><text x="49.3225%" y="175.50"></text></g><g><title>tailcall`mi_segment_span_allocate (4 samples, 0.01%)</title><rect x="49.2617%" y="117" width="0.0115%" height="15" fill="rgb(216,99,12)" fg:x="17181" fg:w="4"/><text x="49.5117%" y="127.50"></text></g><g><title>tailcall`mi_page_fresh_alloc (8 samples, 0.02%)</title><rect x="49.2588%" y="149" width="0.0229%" height="15" fill="rgb(226,22,26)" fg:x="17180" fg:w="8"/><text x="49.5088%" y="159.50"></text></g><g><title>tailcall`mi_segments_page_alloc (8 samples, 0.02%)</title><rect x="49.2588%" y="133" width="0.0229%" height="15" fill="rgb(217,163,10)" fg:x="17180" fg:w="8"/><text x="49.5088%" y="143.50"></text></g><g><title>tailcall`mi_find_page (70 samples, 0.20%)</title><rect x="49.0839%" y="165" width="0.2007%" height="15" fill="rgb(213,25,53)" fg:x="17119" fg:w="70"/><text x="49.3339%" y="175.50"></text></g><g><title>tailcall`mi_page_free_list_extend (4 samples, 0.01%)</title><rect x="49.2846%" y="165" width="0.0115%" height="15" fill="rgb(252,105,26)" fg:x="17189" fg:w="4"/><text x="49.5346%" y="175.50"></text></g><g><title>tailcall`mi_page_queue_enqueue_from (10 samples, 0.03%)</title><rect x="49.2961%" y="165" width="0.0287%" height="15" fill="rgb(220,39,43)" fg:x="17193" fg:w="10"/><text x="49.5461%" y="175.50"></text></g><g><title>tailcall`_mi_malloc_generic (167 samples, 0.48%)</title><rect x="48.8488%" y="181" width="0.4788%" height="15" fill="rgb(229,68,48)" fg:x="17037" fg:w="167"/><text x="49.0988%" y="191.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (183 samples, 0.52%)</title><rect x="48.8201%" y="197" width="0.5247%" height="15" fill="rgb(252,8,32)" fg:x="17027" fg:w="183"/><text x="49.0701%" y="207.50"></text></g><g><title>tailcall`mi_find_page (6 samples, 0.02%)</title><rect x="49.3276%" y="181" width="0.0172%" height="15" fill="rgb(223,20,43)" fg:x="17204" fg:w="6"/><text x="49.5776%" y="191.50"></text></g><g><title>tailcall`bytes::bytes_mut::BytesMut::reserve_inner (194 samples, 0.56%)</title><rect x="48.7943%" y="213" width="0.5562%" height="15" fill="rgb(229,81,49)" fg:x="17018" fg:w="194"/><text x="49.0443%" y="223.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (5 samples, 0.01%)</title><rect x="49.3506%" y="213" width="0.0143%" height="15" fill="rgb(236,28,36)" fg:x="17212" fg:w="5"/><text x="49.6006%" y="223.50"></text></g><g><title>tailcall`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::force_io_read (245 samples, 0.70%)</title><rect x="48.6796%" y="245" width="0.7025%" height="15" fill="rgb(249,185,26)" fg:x="16978" fg:w="245"/><text x="48.9296%" y="255.50"></text></g><g><title>tailcall`hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (239 samples, 0.69%)</title><rect x="48.6968%" y="229" width="0.6853%" height="15" fill="rgb(249,174,33)" fg:x="16984" fg:w="239"/><text x="48.9468%" y="239.50"></text></g><g><title>tailcall`tokio::runtime::io::registration::Registration::poll_ready (6 samples, 0.02%)</title><rect x="49.3649%" y="213" width="0.0172%" height="15" fill="rgb(233,201,37)" fg:x="17217" fg:w="6"/><text x="49.6149%" y="223.50"></text></g><g><title>tailcall`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_keep_alive (249 samples, 0.71%)</title><rect x="48.6796%" y="261" width="0.7139%" height="15" fill="rgb(221,78,26)" fg:x="16978" fg:w="249"/><text x="48.9296%" y="271.50"></text></g><g><title>tailcall`hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (4 samples, 0.01%)</title><rect x="49.3821%" y="245" width="0.0115%" height="15" fill="rgb(250,127,30)" fg:x="17223" fg:w="4"/><text x="49.6321%" y="255.50"></text></g><g><title>tailcall`hyper::proto::h1::decode::Decoder::decode (4 samples, 0.01%)</title><rect x="49.4022%" y="261" width="0.0115%" height="15" fill="rgb(230,49,44)" fg:x="17230" fg:w="4"/><text x="49.6522%" y="271.50"></text></g><g><title>tailcall`hyper::proto::h1::encode::Encoder::danger_full_buf (9 samples, 0.03%)</title><rect x="49.4137%" y="261" width="0.0258%" height="15" fill="rgb(229,67,23)" fg:x="17234" fg:w="9"/><text x="49.6637%" y="271.50"></text></g><g><title>tailcall`hyper::proto::h1::io::WriteBuf&lt;B&gt;::buffer (7 samples, 0.02%)</title><rect x="49.4194%" y="245" width="0.0201%" height="15" fill="rgb(249,83,47)" fg:x="17236" fg:w="7"/><text x="49.6694%" y="255.50"></text></g><g><title>tailcall`hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (6 samples, 0.02%)</title><rect x="49.4395%" y="261" width="0.0172%" height="15" fill="rgb(215,43,3)" fg:x="17243" fg:w="6"/><text x="49.6895%" y="271.50"></text></g><g><title>tailcall`hyper::proto::h1::io::WriteBuf&lt;B&gt;::buffer (4 samples, 0.01%)</title><rect x="49.4567%" y="261" width="0.0115%" height="15" fill="rgb(238,154,13)" fg:x="17249" fg:w="4"/><text x="49.7067%" y="271.50"></text></g><g><title>tailcall`tailcall::core::http::request_handler::handle_request::_{{closure}} (42 samples, 0.12%)</title><rect x="49.4911%" y="261" width="0.1204%" height="15" fill="rgb(219,56,2)" fg:x="17261" fg:w="42"/><text x="49.7411%" y="271.50"></text></g><g><title>tailcall`tailcall::core::http::request_handler::handle_request::_{{closure}}::_{{closure}} (6 samples, 0.02%)</title><rect x="49.6115%" y="261" width="0.0172%" height="15" fill="rgb(233,0,4)" fg:x="17303" fg:w="6"/><text x="49.8615%" y="271.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (14 samples, 0.04%)</title><rect x="49.6287%" y="245" width="0.0401%" height="15" fill="rgb(235,30,7)" fg:x="17309" fg:w="14"/><text x="49.8787%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (23 samples, 0.07%)</title><rect x="49.6688%" y="245" width="0.0659%" height="15" fill="rgb(250,79,13)" fg:x="17323" fg:w="23"/><text x="49.9188%" y="255.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (5 samples, 0.01%)</title><rect x="49.7463%" y="229" width="0.0143%" height="15" fill="rgb(211,146,34)" fg:x="17350" fg:w="5"/><text x="49.9963%" y="239.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (14 samples, 0.04%)</title><rect x="49.7606%" y="229" width="0.0401%" height="15" fill="rgb(228,22,38)" fg:x="17355" fg:w="14"/><text x="50.0106%" y="239.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (9 samples, 0.03%)</title><rect x="49.7749%" y="213" width="0.0258%" height="15" fill="rgb(235,168,5)" fg:x="17360" fg:w="9"/><text x="50.0249%" y="223.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::enter (6 samples, 0.02%)</title><rect x="49.8007%" y="229" width="0.0172%" height="15" fill="rgb(221,155,16)" fg:x="17369" fg:w="6"/><text x="50.0507%" y="239.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::span (106 samples, 0.30%)</title><rect x="49.9097%" y="213" width="0.3039%" height="15" fill="rgb(215,215,53)" fg:x="17407" fg:w="106"/><text x="50.1597%" y="223.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (35 samples, 0.10%)</title><rect x="50.1133%" y="197" width="0.1004%" height="15" fill="rgb(223,4,10)" fg:x="17478" fg:w="35"/><text x="50.3633%" y="207.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::is_enabled_inner (141 samples, 0.40%)</title><rect x="49.8179%" y="229" width="0.4043%" height="15" fill="rgb(234,103,6)" fg:x="17375" fg:w="141"/><text x="50.0679%" y="239.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::span (7 samples, 0.02%)</title><rect x="50.2222%" y="229" width="0.0201%" height="15" fill="rgb(227,97,0)" fg:x="17516" fg:w="7"/><text x="50.4722%" y="239.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::enter (174 samples, 0.50%)</title><rect x="49.7463%" y="245" width="0.4989%" height="15" fill="rgb(234,150,53)" fg:x="17350" fg:w="174"/><text x="49.9963%" y="255.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (4 samples, 0.01%)</title><rect x="50.2652%" y="229" width="0.0115%" height="15" fill="rgb(228,201,54)" fg:x="17531" fg:w="4"/><text x="50.5152%" y="239.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (26 samples, 0.07%)</title><rect x="50.3168%" y="213" width="0.0745%" height="15" fill="rgb(222,22,37)" fg:x="17549" fg:w="26"/><text x="50.5668%" y="223.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (18 samples, 0.05%)</title><rect x="50.3398%" y="197" width="0.0516%" height="15" fill="rgb(237,53,32)" fg:x="17557" fg:w="18"/><text x="50.5898%" y="207.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (13 samples, 0.04%)</title><rect x="50.3541%" y="181" width="0.0373%" height="15" fill="rgb(233,25,53)" fg:x="17562" fg:w="13"/><text x="50.6041%" y="191.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (43 samples, 0.12%)</title><rect x="50.2767%" y="229" width="0.1233%" height="15" fill="rgb(210,40,34)" fg:x="17535" fg:w="43"/><text x="50.5267%" y="239.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::is_enabled_inner (22 samples, 0.06%)</title><rect x="50.4028%" y="229" width="0.0631%" height="15" fill="rgb(241,220,44)" fg:x="17579" fg:w="22"/><text x="50.6528%" y="239.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::span (19 samples, 0.05%)</title><rect x="50.4114%" y="213" width="0.0545%" height="15" fill="rgb(235,28,35)" fg:x="17582" fg:w="19"/><text x="50.6614%" y="223.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (19 samples, 0.05%)</title><rect x="50.4114%" y="197" width="0.0545%" height="15" fill="rgb(210,56,17)" fg:x="17582" fg:w="19"/><text x="50.6614%" y="207.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::exit (83 samples, 0.24%)</title><rect x="50.2451%" y="245" width="0.2380%" height="15" fill="rgb(224,130,29)" fg:x="17524" fg:w="83"/><text x="50.4951%" y="255.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::span (6 samples, 0.02%)</title><rect x="50.4659%" y="229" width="0.0172%" height="15" fill="rgb(235,212,8)" fg:x="17601" fg:w="6"/><text x="50.7159%" y="239.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::new_span (4 samples, 0.01%)</title><rect x="50.4831%" y="245" width="0.0115%" height="15" fill="rgb(223,33,50)" fg:x="17607" fg:w="4"/><text x="50.7331%" y="255.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (9 samples, 0.03%)</title><rect x="50.5061%" y="229" width="0.0258%" height="15" fill="rgb(219,149,13)" fg:x="17615" fg:w="9"/><text x="50.7561%" y="239.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::CloseGuard as core::ops::drop::Drop&gt;::drop (25 samples, 0.07%)</title><rect x="50.5319%" y="229" width="0.0717%" height="15" fill="rgb(250,156,29)" fg:x="17624" fg:w="25"/><text x="50.7819%" y="239.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (16 samples, 0.05%)</title><rect x="50.6064%" y="229" width="0.0459%" height="15" fill="rgb(216,193,19)" fg:x="17650" fg:w="16"/><text x="50.8564%" y="239.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (11 samples, 0.03%)</title><rect x="50.6208%" y="213" width="0.0315%" height="15" fill="rgb(216,135,14)" fg:x="17655" fg:w="11"/><text x="50.8708%" y="223.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::span (21 samples, 0.06%)</title><rect x="50.6810%" y="213" width="0.0602%" height="15" fill="rgb(241,47,5)" fg:x="17676" fg:w="21"/><text x="50.9310%" y="223.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (19 samples, 0.05%)</title><rect x="50.6867%" y="197" width="0.0545%" height="15" fill="rgb(233,42,35)" fg:x="17678" fg:w="19"/><text x="50.9367%" y="207.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::is_enabled_inner (33 samples, 0.09%)</title><rect x="50.6523%" y="229" width="0.0946%" height="15" fill="rgb(231,13,6)" fg:x="17666" fg:w="33"/><text x="50.9023%" y="239.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::span (4 samples, 0.01%)</title><rect x="50.7469%" y="229" width="0.0115%" height="15" fill="rgb(207,181,40)" fg:x="17699" fg:w="4"/><text x="50.9969%" y="239.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (93 samples, 0.27%)</title><rect x="50.4946%" y="245" width="0.2667%" height="15" fill="rgb(254,173,49)" fg:x="17611" fg:w="93"/><text x="50.7446%" y="255.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::enter (4 samples, 0.01%)</title><rect x="50.7670%" y="245" width="0.0115%" height="15" fill="rgb(221,1,38)" fg:x="17706" fg:w="4"/><text x="51.0170%" y="255.50"></text></g><g><title>tailcall`DYLD-STUB$$memcpy (17 samples, 0.05%)</title><rect x="50.7871%" y="245" width="0.0487%" height="15" fill="rgb(206,124,46)" fg:x="17713" fg:w="17"/><text x="51.0371%" y="255.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;tailcall::core::http::request_handler::handle_request&lt;tailcall::core::async_graphql_hyper::GraphQLRequest&gt;::{{closure}}::{{closure}}::{{closure}}&gt; (4 samples, 0.01%)</title><rect x="50.8358%" y="245" width="0.0115%" height="15" fill="rgb(249,21,11)" fg:x="17730" fg:w="4"/><text x="51.0858%" y="255.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (9 samples, 0.03%)</title><rect x="50.8817%" y="213" width="0.0258%" height="15" fill="rgb(222,201,40)" fg:x="17746" fg:w="9"/><text x="51.1317%" y="223.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (4 samples, 0.01%)</title><rect x="50.8960%" y="197" width="0.0115%" height="15" fill="rgb(235,61,29)" fg:x="17751" fg:w="4"/><text x="51.1460%" y="207.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::enter (4 samples, 0.01%)</title><rect x="50.9075%" y="213" width="0.0115%" height="15" fill="rgb(219,207,3)" fg:x="17755" fg:w="4"/><text x="51.1575%" y="223.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::span (12 samples, 0.03%)</title><rect x="50.9476%" y="197" width="0.0344%" height="15" fill="rgb(222,56,46)" fg:x="17769" fg:w="12"/><text x="51.1976%" y="207.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (9 samples, 0.03%)</title><rect x="50.9562%" y="181" width="0.0258%" height="15" fill="rgb(239,76,54)" fg:x="17772" fg:w="9"/><text x="51.2062%" y="191.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::is_enabled_inner (26 samples, 0.07%)</title><rect x="50.9189%" y="213" width="0.0745%" height="15" fill="rgb(231,124,27)" fg:x="17759" fg:w="26"/><text x="51.1689%" y="223.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (4 samples, 0.01%)</title><rect x="50.9820%" y="197" width="0.0115%" height="15" fill="rgb(249,195,6)" fg:x="17781" fg:w="4"/><text x="51.2320%" y="207.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::enter (50 samples, 0.14%)</title><rect x="50.8731%" y="229" width="0.1434%" height="15" fill="rgb(237,174,47)" fg:x="17743" fg:w="50"/><text x="51.1231%" y="239.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::span (8 samples, 0.02%)</title><rect x="50.9935%" y="213" width="0.0229%" height="15" fill="rgb(206,201,31)" fg:x="17785" fg:w="8"/><text x="51.2435%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (8 samples, 0.02%)</title><rect x="51.0222%" y="213" width="0.0229%" height="15" fill="rgb(231,57,52)" fg:x="17795" fg:w="8"/><text x="51.2722%" y="223.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (21 samples, 0.06%)</title><rect x="51.0824%" y="197" width="0.0602%" height="15" fill="rgb(248,177,22)" fg:x="17816" fg:w="21"/><text x="51.3324%" y="207.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (15 samples, 0.04%)</title><rect x="51.0996%" y="181" width="0.0430%" height="15" fill="rgb(215,211,37)" fg:x="17822" fg:w="15"/><text x="51.3496%" y="191.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (9 samples, 0.03%)</title><rect x="51.1168%" y="165" width="0.0258%" height="15" fill="rgb(241,128,51)" fg:x="17828" fg:w="9"/><text x="51.3668%" y="175.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (34 samples, 0.10%)</title><rect x="51.0480%" y="213" width="0.0975%" height="15" fill="rgb(227,165,31)" fg:x="17804" fg:w="34"/><text x="51.2980%" y="223.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::span (25 samples, 0.07%)</title><rect x="51.1713%" y="197" width="0.0717%" height="15" fill="rgb(228,167,24)" fg:x="17847" fg:w="25"/><text x="51.4213%" y="207.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (16 samples, 0.05%)</title><rect x="51.1971%" y="181" width="0.0459%" height="15" fill="rgb(228,143,12)" fg:x="17856" fg:w="16"/><text x="51.4471%" y="191.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::is_enabled_inner (35 samples, 0.10%)</title><rect x="51.1455%" y="213" width="0.1004%" height="15" fill="rgb(249,149,8)" fg:x="17838" fg:w="35"/><text x="51.3955%" y="223.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::exit (89 samples, 0.26%)</title><rect x="51.0164%" y="229" width="0.2552%" height="15" fill="rgb(243,35,44)" fg:x="17793" fg:w="89"/><text x="51.2664%" y="239.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::span (9 samples, 0.03%)</title><rect x="51.2458%" y="213" width="0.0258%" height="15" fill="rgb(246,89,9)" fg:x="17873" fg:w="9"/><text x="51.4958%" y="223.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::enter (7 samples, 0.02%)</title><rect x="51.2716%" y="229" width="0.0201%" height="15" fill="rgb(233,213,13)" fg:x="17882" fg:w="7"/><text x="51.5216%" y="239.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;tracing::instrument::Instrumented&lt;tailcall::core::http::request_handler::handle_request&lt;tailcall::core::async_graphql_hyper::GraphQLRequest&gt;::{{closure}}::{{closure}}&gt;&gt; (160 samples, 0.46%)</title><rect x="50.8501%" y="245" width="0.4588%" height="15" fill="rgb(233,141,41)" fg:x="17735" fg:w="160"/><text x="51.1001%" y="255.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::is_enabled_inner (5 samples, 0.01%)</title><rect x="51.2945%" y="229" width="0.0143%" height="15" fill="rgb(239,167,4)" fg:x="17890" fg:w="5"/><text x="51.5445%" y="239.50"></text></g><g><title>tailcall`http::header::map::hash_elem_using (6 samples, 0.02%)</title><rect x="51.3089%" y="245" width="0.0172%" height="15" fill="rgb(209,217,16)" fg:x="17895" fg:w="6"/><text x="51.5589%" y="255.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (12 samples, 0.03%)</title><rect x="51.5010%" y="229" width="0.0344%" height="15" fill="rgb(219,88,35)" fg:x="17962" fg:w="12"/><text x="51.7510%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (12 samples, 0.03%)</title><rect x="51.5440%" y="229" width="0.0344%" height="15" fill="rgb(220,193,23)" fg:x="17977" fg:w="12"/><text x="51.7940%" y="239.50"></text></g><g><title>tailcall`&lt;tracing::span::Span as tracing_opentelemetry::span_ext::OpenTelemetrySpanExt&gt;::set_attribute (6 samples, 0.02%)</title><rect x="51.5784%" y="229" width="0.0172%" height="15" fill="rgb(230,90,52)" fg:x="17989" fg:w="6"/><text x="51.8284%" y="239.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::downcast_raw (16 samples, 0.05%)</title><rect x="51.6013%" y="229" width="0.0459%" height="15" fill="rgb(252,106,19)" fg:x="17997" fg:w="16"/><text x="51.8513%" y="239.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::CloseGuard as core::ops::drop::Drop&gt;::drop (4 samples, 0.01%)</title><rect x="51.6702%" y="213" width="0.0115%" height="15" fill="rgb(206,74,20)" fg:x="18021" fg:w="4"/><text x="51.9202%" y="223.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (4 samples, 0.01%)</title><rect x="51.6816%" y="213" width="0.0115%" height="15" fill="rgb(230,138,44)" fg:x="18025" fg:w="4"/><text x="51.9316%" y="223.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (18 samples, 0.05%)</title><rect x="51.6472%" y="229" width="0.0516%" height="15" fill="rgb(235,182,43)" fg:x="18013" fg:w="18"/><text x="51.8972%" y="239.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::CloseGuard as core::ops::drop::Drop&gt;::drop (5 samples, 0.01%)</title><rect x="51.6988%" y="229" width="0.0143%" height="15" fill="rgb(242,16,51)" fg:x="18031" fg:w="5"/><text x="51.9488%" y="239.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;tailcall::core::http::request_handler::handle_request&lt;tailcall::core::async_graphql_hyper::GraphQLRequest&gt;::{{closure}}::{{closure}}::{{closure}}&gt; (5 samples, 0.01%)</title><rect x="51.7476%" y="229" width="0.0143%" height="15" fill="rgb(248,9,4)" fg:x="18048" fg:w="5"/><text x="51.9976%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (87 samples, 0.25%)</title><rect x="51.8852%" y="213" width="0.2494%" height="15" fill="rgb(210,31,22)" fg:x="18096" fg:w="87"/><text x="52.1352%" y="223.50"></text></g><g><title>tailcall`DYLD-STUB$$memcpy (9 samples, 0.03%)</title><rect x="52.1490%" y="213" width="0.0258%" height="15" fill="rgb(239,54,39)" fg:x="18188" fg:w="9"/><text x="52.3990%" y="223.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;tailcall::core::http::request_handler::graphql_request&lt;tailcall::core::async_graphql_hyper::GraphQLRequest&gt;::{{closure}}&gt; (5 samples, 0.01%)</title><rect x="52.1748%" y="213" width="0.0143%" height="15" fill="rgb(230,99,41)" fg:x="18197" fg:w="5"/><text x="52.4248%" y="223.50"></text></g><g><title>tailcall`tailcall::core::http::request_handler::graphql_request::_{{closure}} (85 samples, 0.24%)</title><rect x="52.1891%" y="213" width="0.2437%" height="15" fill="rgb(253,106,12)" fg:x="18202" fg:w="85"/><text x="52.4391%" y="223.50"></text></g><g><title>tailcall`tailcall::core::http::request_handler::graphql_request::_{{closure}}::_{{closure}} (5 samples, 0.01%)</title><rect x="52.4328%" y="213" width="0.0143%" height="15" fill="rgb(213,46,41)" fg:x="18287" fg:w="5"/><text x="52.6828%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (21 samples, 0.06%)</title><rect x="52.4472%" y="197" width="0.0602%" height="15" fill="rgb(215,133,35)" fg:x="18292" fg:w="21"/><text x="52.6972%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (211 samples, 0.60%)</title><rect x="52.5074%" y="197" width="0.6050%" height="15" fill="rgb(213,28,5)" fg:x="18313" fg:w="211"/><text x="52.7574%" y="207.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as core::fmt::Display&gt;::fmt (29 samples, 0.08%)</title><rect x="53.1124%" y="197" width="0.0831%" height="15" fill="rgb(215,77,49)" fg:x="18524" fg:w="29"/><text x="53.3624%" y="207.50"></text></g><g><title>tailcall`&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (6 samples, 0.02%)</title><rect x="53.2070%" y="197" width="0.0172%" height="15" fill="rgb(248,100,22)" fg:x="18557" fg:w="6"/><text x="53.4570%" y="207.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (6 samples, 0.02%)</title><rect x="53.2500%" y="181" width="0.0172%" height="15" fill="rgb(208,67,9)" fg:x="18572" fg:w="6"/><text x="53.5000%" y="191.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (24 samples, 0.07%)</title><rect x="53.2672%" y="181" width="0.0688%" height="15" fill="rgb(219,133,21)" fg:x="18578" fg:w="24"/><text x="53.5172%" y="191.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (18 samples, 0.05%)</title><rect x="53.2844%" y="165" width="0.0516%" height="15" fill="rgb(246,46,29)" fg:x="18584" fg:w="18"/><text x="53.5344%" y="175.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::enter (12 samples, 0.03%)</title><rect x="53.3360%" y="181" width="0.0344%" height="15" fill="rgb(246,185,52)" fg:x="18602" fg:w="12"/><text x="53.5860%" y="191.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::span (48 samples, 0.14%)</title><rect x="53.4077%" y="165" width="0.1376%" height="15" fill="rgb(252,136,11)" fg:x="18627" fg:w="48"/><text x="53.6577%" y="175.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (41 samples, 0.12%)</title><rect x="53.4278%" y="149" width="0.1176%" height="15" fill="rgb(219,138,53)" fg:x="18634" fg:w="41"/><text x="53.6778%" y="159.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::is_enabled_inner (64 samples, 0.18%)</title><rect x="53.3704%" y="181" width="0.1835%" height="15" fill="rgb(211,51,23)" fg:x="18614" fg:w="64"/><text x="53.6204%" y="191.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::span (8 samples, 0.02%)</title><rect x="53.5539%" y="181" width="0.0229%" height="15" fill="rgb(247,221,28)" fg:x="18678" fg:w="8"/><text x="53.8039%" y="191.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::enter (121 samples, 0.35%)</title><rect x="53.2328%" y="197" width="0.3469%" height="15" fill="rgb(251,222,45)" fg:x="18566" fg:w="121"/><text x="53.4828%" y="207.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (21 samples, 0.06%)</title><rect x="53.6227%" y="181" width="0.0602%" height="15" fill="rgb(217,162,53)" fg:x="18702" fg:w="21"/><text x="53.8727%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (23 samples, 0.07%)</title><rect x="53.6829%" y="181" width="0.0659%" height="15" fill="rgb(229,93,14)" fg:x="18723" fg:w="23"/><text x="53.9329%" y="191.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (11 samples, 0.03%)</title><rect x="53.7489%" y="181" width="0.0315%" height="15" fill="rgb(209,67,49)" fg:x="18746" fg:w="11"/><text x="53.9989%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (28 samples, 0.08%)</title><rect x="54.0557%" y="165" width="0.0803%" height="15" fill="rgb(213,87,29)" fg:x="18853" fg:w="28"/><text x="54.3057%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (9 samples, 0.03%)</title><rect x="54.1646%" y="149" width="0.0258%" height="15" fill="rgb(205,151,52)" fg:x="18891" fg:w="9"/><text x="54.4146%" y="159.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::CloseGuard as core::ops::drop::Drop&gt;::drop (9 samples, 0.03%)</title><rect x="54.1904%" y="149" width="0.0258%" height="15" fill="rgb(253,215,39)" fg:x="18900" fg:w="9"/><text x="54.4404%" y="159.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (117 samples, 0.34%)</title><rect x="54.2162%" y="149" width="0.3355%" height="15" fill="rgb(221,220,41)" fg:x="18909" fg:w="117"/><text x="54.4662%" y="159.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (18 samples, 0.05%)</title><rect x="54.5001%" y="133" width="0.0516%" height="15" fill="rgb(218,133,21)" fg:x="19008" fg:w="18"/><text x="54.7501%" y="143.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (147 samples, 0.42%)</title><rect x="54.1360%" y="165" width="0.4215%" height="15" fill="rgb(221,193,43)" fg:x="18881" fg:w="147"/><text x="54.3860%" y="175.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::CloseGuard as core::ops::drop::Drop&gt;::drop (5 samples, 0.01%)</title><rect x="54.5574%" y="165" width="0.0143%" height="15" fill="rgb(240,128,52)" fg:x="19028" fg:w="5"/><text x="54.8074%" y="175.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (279 samples, 0.80%)</title><rect x="53.7804%" y="181" width="0.8000%" height="15" fill="rgb(253,114,12)" fg:x="18757" fg:w="279"/><text x="54.0304%" y="191.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::span (47 samples, 0.13%)</title><rect x="54.6492%" y="165" width="0.1348%" height="15" fill="rgb(215,223,47)" fg:x="19060" fg:w="47"/><text x="54.8992%" y="175.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (37 samples, 0.11%)</title><rect x="54.6779%" y="149" width="0.1061%" height="15" fill="rgb(248,225,23)" fg:x="19070" fg:w="37"/><text x="54.9279%" y="159.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::is_enabled_inner (72 samples, 0.21%)</title><rect x="54.5832%" y="181" width="0.2064%" height="15" fill="rgb(250,108,0)" fg:x="19037" fg:w="72"/><text x="54.8332%" y="191.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::exit (433 samples, 1.24%)</title><rect x="53.5797%" y="197" width="1.2415%" height="15" fill="rgb(228,208,7)" fg:x="18687" fg:w="433"/><text x="53.8297%" y="207.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::span (11 samples, 0.03%)</title><rect x="54.7897%" y="181" width="0.0315%" height="15" fill="rgb(244,45,10)" fg:x="19109" fg:w="11"/><text x="55.0397%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (10 samples, 0.03%)</title><rect x="54.9044%" y="165" width="0.0287%" height="15" fill="rgb(207,125,25)" fg:x="19149" fg:w="10"/><text x="55.1544%" y="175.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (17 samples, 0.05%)</title><rect x="55.0019%" y="133" width="0.0487%" height="15" fill="rgb(210,195,18)" fg:x="19183" fg:w="17"/><text x="55.2519%" y="143.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (12 samples, 0.03%)</title><rect x="55.0162%" y="117" width="0.0344%" height="15" fill="rgb(249,80,12)" fg:x="19188" fg:w="12"/><text x="55.2662%" y="127.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (22 samples, 0.06%)</title><rect x="54.9904%" y="149" width="0.0631%" height="15" fill="rgb(221,65,9)" fg:x="19179" fg:w="22"/><text x="55.2404%" y="159.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::CloseGuard as core::ops::drop::Drop&gt;::drop (78 samples, 0.22%)</title><rect x="54.8442%" y="181" width="0.2236%" height="15" fill="rgb(235,49,36)" fg:x="19128" fg:w="78"/><text x="55.0942%" y="191.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::DataInner as sharded_slab::clear::Clear&gt;::clear (46 samples, 0.13%)</title><rect x="54.9359%" y="165" width="0.1319%" height="15" fill="rgb(225,32,20)" fg:x="19160" fg:w="46"/><text x="55.1859%" y="175.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (11 samples, 0.03%)</title><rect x="55.0707%" y="181" width="0.0315%" height="15" fill="rgb(215,141,46)" fg:x="19207" fg:w="11"/><text x="55.3207%" y="191.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (8 samples, 0.02%)</title><rect x="55.0793%" y="165" width="0.0229%" height="15" fill="rgb(250,160,47)" fg:x="19210" fg:w="8"/><text x="55.3293%" y="175.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::span (8 samples, 0.02%)</title><rect x="55.1194%" y="165" width="0.0229%" height="15" fill="rgb(216,222,40)" fg:x="19224" fg:w="8"/><text x="55.3694%" y="175.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (8 samples, 0.02%)</title><rect x="55.1194%" y="149" width="0.0229%" height="15" fill="rgb(234,217,39)" fg:x="19224" fg:w="8"/><text x="55.3694%" y="159.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::is_enabled_inner (19 samples, 0.05%)</title><rect x="55.1022%" y="181" width="0.0545%" height="15" fill="rgb(207,178,40)" fg:x="19218" fg:w="19"/><text x="55.3522%" y="191.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (5 samples, 0.01%)</title><rect x="55.1424%" y="165" width="0.0143%" height="15" fill="rgb(221,136,13)" fg:x="19232" fg:w="5"/><text x="55.3924%" y="175.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (123 samples, 0.35%)</title><rect x="54.8241%" y="197" width="0.3527%" height="15" fill="rgb(249,199,10)" fg:x="19121" fg:w="123"/><text x="55.0741%" y="207.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::span (7 samples, 0.02%)</title><rect x="55.1567%" y="181" width="0.0201%" height="15" fill="rgb(249,222,13)" fg:x="19237" fg:w="7"/><text x="55.4067%" y="191.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::CloseGuard as core::ops::drop::Drop&gt;::drop (4 samples, 0.01%)</title><rect x="55.1768%" y="197" width="0.0115%" height="15" fill="rgb(244,185,38)" fg:x="19244" fg:w="4"/><text x="55.4268%" y="207.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (4 samples, 0.01%)</title><rect x="55.2026%" y="197" width="0.0115%" height="15" fill="rgb(236,202,9)" fg:x="19253" fg:w="4"/><text x="55.4526%" y="207.50"></text></g><g><title>tailcall`DYLD-STUB$$memcpy (15 samples, 0.04%)</title><rect x="55.2198%" y="197" width="0.0430%" height="15" fill="rgb(250,229,37)" fg:x="19259" fg:w="15"/><text x="55.4698%" y="207.50"></text></g><g><title>tailcall`_mi_page_retire (7 samples, 0.02%)</title><rect x="55.2628%" y="197" width="0.0201%" height="15" fill="rgb(206,174,23)" fg:x="19274" fg:w="7"/><text x="55.5128%" y="207.50"></text></g><g><title>tailcall`mi_free (38 samples, 0.11%)</title><rect x="55.2943%" y="197" width="0.1090%" height="15" fill="rgb(211,33,43)" fg:x="19285" fg:w="38"/><text x="55.5443%" y="207.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (6 samples, 0.02%)</title><rect x="55.4033%" y="197" width="0.0172%" height="15" fill="rgb(245,58,50)" fg:x="19323" fg:w="6"/><text x="55.6533%" y="207.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (4 samples, 0.01%)</title><rect x="57.7487%" y="181" width="0.0115%" height="15" fill="rgb(244,68,36)" fg:x="20141" fg:w="4"/><text x="57.9987%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2,914 samples, 8.36%)</title><rect x="57.7601%" y="181" width="8.3551%" height="15" fill="rgb(232,229,15)" fg:x="20145" fg:w="2914"/><text x="58.0101%" y="191.50">libsystem_pl..</text></g><g><title>tailcall`&lt;serde_json::number::Number as core::fmt::Display&gt;::fmt (9 samples, 0.03%)</title><rect x="66.1754%" y="165" width="0.0258%" height="15" fill="rgb(254,30,23)" fg:x="23080" fg:w="9"/><text x="66.4254%" y="175.50"></text></g><g><title>tailcall`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (7 samples, 0.02%)</title><rect x="66.2987%" y="149" width="0.0201%" height="15" fill="rgb(235,160,14)" fg:x="23123" fg:w="7"/><text x="66.5487%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (21 samples, 0.06%)</title><rect x="66.5252%" y="133" width="0.0602%" height="15" fill="rgb(212,155,44)" fg:x="23202" fg:w="21"/><text x="66.7752%" y="143.50"></text></g><g><title>tailcall`alloc::raw_vec::finish_grow (34 samples, 0.10%)</title><rect x="66.6485%" y="101" width="0.0975%" height="15" fill="rgb(226,2,50)" fg:x="23245" fg:w="34"/><text x="66.8985%" y="111.50"></text></g><g><title>tailcall`mi_malloc_aligned (17 samples, 0.05%)</title><rect x="66.6973%" y="85" width="0.0487%" height="15" fill="rgb(234,177,6)" fg:x="23262" fg:w="17"/><text x="66.9473%" y="95.50"></text></g><g><title>tailcall`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (44 samples, 0.13%)</title><rect x="66.6227%" y="117" width="0.1262%" height="15" fill="rgb(217,24,9)" fg:x="23236" fg:w="44"/><text x="66.8727%" y="127.50"></text></g><g><title>tailcall`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (67 samples, 0.19%)</title><rect x="66.5854%" y="133" width="0.1921%" height="15" fill="rgb(220,13,46)" fg:x="23223" fg:w="67"/><text x="66.8354%" y="143.50"></text></g><g><title>tailcall`alloc::raw_vec::finish_grow (10 samples, 0.03%)</title><rect x="66.7489%" y="117" width="0.0287%" height="15" fill="rgb(239,221,27)" fg:x="23280" fg:w="10"/><text x="66.9989%" y="127.50"></text></g><g><title>tailcall`DYLD-STUB$$memcpy (8 samples, 0.02%)</title><rect x="66.7775%" y="133" width="0.0229%" height="15" fill="rgb(222,198,25)" fg:x="23290" fg:w="8"/><text x="67.0275%" y="143.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as core::fmt::Display&gt;::fmt (252 samples, 0.72%)</title><rect x="66.1152%" y="181" width="0.7225%" height="15" fill="rgb(211,99,13)" fg:x="23059" fg:w="252"/><text x="66.3652%" y="191.50"></text></g><g><title>tailcall`core::fmt::write (222 samples, 0.64%)</title><rect x="66.2012%" y="165" width="0.6365%" height="15" fill="rgb(232,111,31)" fg:x="23089" fg:w="222"/><text x="66.4512%" y="175.50"></text></g><g><title>tailcall`&lt;serde_json::number::Number as core::fmt::Display&gt;::fmt (181 samples, 0.52%)</title><rect x="66.3188%" y="149" width="0.5190%" height="15" fill="rgb(245,82,37)" fg:x="23130" fg:w="181"/><text x="66.5688%" y="159.50"></text></g><g><title>tailcall`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (13 samples, 0.04%)</title><rect x="66.8005%" y="133" width="0.0373%" height="15" fill="rgb(227,149,46)" fg:x="23298" fg:w="13"/><text x="67.0505%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (14 samples, 0.04%)</title><rect x="66.9467%" y="165" width="0.0401%" height="15" fill="rgb(218,36,50)" fg:x="23349" fg:w="14"/><text x="67.1967%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (87 samples, 0.25%)</title><rect x="66.9868%" y="165" width="0.2494%" height="15" fill="rgb(226,80,48)" fg:x="23363" fg:w="87"/><text x="67.2368%" y="175.50"></text></g><g><title>tailcall`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (12 samples, 0.03%)</title><rect x="67.2363%" y="165" width="0.0344%" height="15" fill="rgb(238,224,15)" fg:x="23450" fg:w="12"/><text x="67.4863%" y="175.50"></text></g><g><title>tailcall`&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed::has_next_key (7 samples, 0.02%)</title><rect x="67.2707%" y="165" width="0.0201%" height="15" fill="rgb(241,136,10)" fg:x="23462" fg:w="7"/><text x="67.5207%" y="175.50"></text></g><g><title>tailcall`&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (10 samples, 0.03%)</title><rect x="67.2936%" y="165" width="0.0287%" height="15" fill="rgb(208,32,45)" fg:x="23470" fg:w="10"/><text x="67.5436%" y="175.50"></text></g><g><title>tailcall`DYLD-STUB$$memcmp (4 samples, 0.01%)</title><rect x="67.3223%" y="165" width="0.0115%" height="15" fill="rgb(207,135,9)" fg:x="23480" fg:w="4"/><text x="67.5723%" y="175.50"></text></g><g><title>tailcall`DYLD-STUB$$memcpy (14 samples, 0.04%)</title><rect x="67.3338%" y="165" width="0.0401%" height="15" fill="rgb(206,86,44)" fg:x="23484" fg:w="14"/><text x="67.5838%" y="175.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (4 samples, 0.01%)</title><rect x="67.5144%" y="149" width="0.0115%" height="15" fill="rgb(245,177,15)" fg:x="23547" fg:w="4"/><text x="67.7644%" y="159.50"></text></g><g><title>tailcall`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (62 samples, 0.18%)</title><rect x="67.3825%" y="165" width="0.1778%" height="15" fill="rgb(206,64,50)" fg:x="23501" fg:w="62"/><text x="67.6325%" y="175.50"></text></g><g><title>tailcall`mi_malloc_aligned (12 samples, 0.03%)</title><rect x="67.5259%" y="149" width="0.0344%" height="15" fill="rgb(234,36,40)" fg:x="23551" fg:w="12"/><text x="67.7759%" y="159.50"></text></g><g><title>tailcall`mi_free (11 samples, 0.03%)</title><rect x="67.5603%" y="165" width="0.0315%" height="15" fill="rgb(213,64,8)" fg:x="23563" fg:w="11"/><text x="67.8103%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (6 samples, 0.02%)</title><rect x="67.7581%" y="149" width="0.0172%" height="15" fill="rgb(210,75,36)" fg:x="23632" fg:w="6"/><text x="68.0081%" y="159.50"></text></g><g><title>tailcall`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (50 samples, 0.14%)</title><rect x="67.7753%" y="149" width="0.1434%" height="15" fill="rgb(229,88,21)" fg:x="23638" fg:w="50"/><text x="68.0253%" y="159.50"></text></g><g><title>tailcall`serde_json::de::Deserializer&lt;R&gt;::parse_integer (15 samples, 0.04%)</title><rect x="67.8757%" y="133" width="0.0430%" height="15" fill="rgb(252,204,47)" fg:x="23673" fg:w="15"/><text x="68.1257%" y="143.50"></text></g><g><title>tailcall`&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed::has_next_key (27 samples, 0.08%)</title><rect x="67.9187%" y="149" width="0.0774%" height="15" fill="rgb(208,77,27)" fg:x="23688" fg:w="27"/><text x="68.1687%" y="159.50"></text></g><g><title>tailcall`&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (12 samples, 0.03%)</title><rect x="67.9961%" y="149" width="0.0344%" height="15" fill="rgb(221,76,26)" fg:x="23715" fg:w="12"/><text x="68.2461%" y="159.50"></text></g><g><title>tailcall`&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (78 samples, 0.22%)</title><rect x="68.0305%" y="149" width="0.2236%" height="15" fill="rgb(225,139,18)" fg:x="23727" fg:w="78"/><text x="68.2805%" y="159.50"></text></g><g><title>tailcall`core::str::converts::from_utf8 (52 samples, 0.15%)</title><rect x="68.1051%" y="133" width="0.1491%" height="15" fill="rgb(230,137,11)" fg:x="23753" fg:w="52"/><text x="68.3551%" y="143.50"></text></g><g><title>tailcall`mi_malloc_aligned (35 samples, 0.10%)</title><rect x="68.2599%" y="149" width="0.1004%" height="15" fill="rgb(212,28,1)" fg:x="23807" fg:w="35"/><text x="68.5099%" y="159.50"></text></g><g><title>tailcall`serde::de::MapAccess::next_entry (270 samples, 0.77%)</title><rect x="67.5947%" y="165" width="0.7741%" height="15" fill="rgb(248,164,17)" fg:x="23575" fg:w="270"/><text x="67.8447%" y="175.50"></text></g><g><title>tailcall`&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (16 samples, 0.05%)</title><rect x="68.4176%" y="149" width="0.0459%" height="15" fill="rgb(222,171,42)" fg:x="23862" fg:w="16"/><text x="68.6676%" y="159.50"></text></g><g><title>tailcall`core::str::converts::from_utf8 (8 samples, 0.02%)</title><rect x="68.4405%" y="133" width="0.0229%" height="15" fill="rgb(243,84,45)" fg:x="23870" fg:w="8"/><text x="68.6905%" y="143.50"></text></g><g><title>tailcall`serde::de::impls::_&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (39 samples, 0.11%)</title><rect x="68.3688%" y="165" width="0.1118%" height="15" fill="rgb(252,49,23)" fg:x="23845" fg:w="39"/><text x="68.6188%" y="175.50"></text></g><g><title>tailcall`mi_malloc_aligned (4 samples, 0.01%)</title><rect x="68.4692%" y="149" width="0.0115%" height="15" fill="rgb(215,19,7)" fg:x="23880" fg:w="4"/><text x="68.7192%" y="159.50"></text></g><g><title>tailcall`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (580 samples, 1.66%)</title><rect x="66.8377%" y="181" width="1.6630%" height="15" fill="rgb(238,81,41)" fg:x="23311" fg:w="580"/><text x="67.0877%" y="191.50"></text></g><g><title>tailcall`serde_json::de::Deserializer&lt;R&gt;::end_map (7 samples, 0.02%)</title><rect x="68.4807%" y="165" width="0.0201%" height="15" fill="rgb(210,199,37)" fg:x="23884" fg:w="7"/><text x="68.7307%" y="175.50"></text></g><g><title>tailcall`&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed::has_next_key (22 samples, 0.06%)</title><rect x="68.5007%" y="181" width="0.0631%" height="15" fill="rgb(244,192,49)" fg:x="23891" fg:w="22"/><text x="68.7507%" y="191.50"></text></g><g><title>tailcall`&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (79 samples, 0.23%)</title><rect x="68.5638%" y="181" width="0.2265%" height="15" fill="rgb(226,211,11)" fg:x="23913" fg:w="79"/><text x="68.8138%" y="191.50"></text></g><g><title>tailcall`core::str::converts::from_utf8 (51 samples, 0.15%)</title><rect x="68.6441%" y="165" width="0.1462%" height="15" fill="rgb(236,162,54)" fg:x="23941" fg:w="51"/><text x="68.8941%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (6 samples, 0.02%)</title><rect x="69.8655%" y="165" width="0.0172%" height="15" fill="rgb(220,229,9)" fg:x="24367" fg:w="6"/><text x="70.1155%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (119 samples, 0.34%)</title><rect x="69.8827%" y="165" width="0.3412%" height="15" fill="rgb(250,87,22)" fg:x="24373" fg:w="119"/><text x="70.1327%" y="175.50"></text></g><g><title>tailcall`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (9 samples, 0.03%)</title><rect x="70.2239%" y="165" width="0.0258%" height="15" fill="rgb(239,43,17)" fg:x="24492" fg:w="9"/><text x="70.4739%" y="175.50"></text></g><g><title>tailcall`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.01%)</title><rect x="70.2497%" y="165" width="0.0143%" height="15" fill="rgb(231,177,25)" fg:x="24501" fg:w="5"/><text x="70.4997%" y="175.50"></text></g><g><title>tailcall`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8 samples, 0.02%)</title><rect x="70.2641%" y="165" width="0.0229%" height="15" fill="rgb(219,179,1)" fg:x="24506" fg:w="8"/><text x="70.5141%" y="175.50"></text></g><g><title>tailcall`DYLD-STUB$$memcpy (6 samples, 0.02%)</title><rect x="70.2870%" y="165" width="0.0172%" height="15" fill="rgb(238,219,53)" fg:x="24514" fg:w="6"/><text x="70.5370%" y="175.50"></text></g><g><title>tailcall`_mi_page_retire (12 samples, 0.03%)</title><rect x="70.3128%" y="165" width="0.0344%" height="15" fill="rgb(232,167,36)" fg:x="24523" fg:w="12"/><text x="70.5628%" y="175.50"></text></g><g><title>tailcall`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (22 samples, 0.06%)</title><rect x="70.3472%" y="165" width="0.0631%" height="15" fill="rgb(244,19,51)" fg:x="24535" fg:w="22"/><text x="70.5972%" y="175.50"></text></g><g><title>tailcall`alloc::sync::Arc&lt;T,A&gt;::drop_slow (5 samples, 0.01%)</title><rect x="70.4103%" y="165" width="0.0143%" height="15" fill="rgb(224,6,22)" fg:x="24557" fg:w="5"/><text x="70.6603%" y="175.50"></text></g><g><title>tailcall`core::fmt::Formatter::pad (10 samples, 0.03%)</title><rect x="70.4246%" y="165" width="0.0287%" height="15" fill="rgb(224,145,5)" fg:x="24562" fg:w="10"/><text x="70.6746%" y="175.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;tailcall::core::jit::graphql_executor::JITExecutor::execute::{{closure}}&gt; (5 samples, 0.01%)</title><rect x="70.4820%" y="165" width="0.0143%" height="15" fill="rgb(234,130,49)" fg:x="24582" fg:w="5"/><text x="70.7320%" y="175.50"></text></g><g><title>tailcall`mi_free (22 samples, 0.06%)</title><rect x="70.5021%" y="165" width="0.0631%" height="15" fill="rgb(254,6,2)" fg:x="24589" fg:w="22"/><text x="70.7521%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (231 samples, 0.66%)</title><rect x="71.3966%" y="149" width="0.6623%" height="15" fill="rgb(208,96,46)" fg:x="24901" fg:w="231"/><text x="71.6466%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (13 samples, 0.04%)</title><rect x="72.0590%" y="149" width="0.0373%" height="15" fill="rgb(239,3,39)" fg:x="25132" fg:w="13"/><text x="72.3090%" y="159.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (10 samples, 0.03%)</title><rect x="72.1106%" y="149" width="0.0287%" height="15" fill="rgb(233,210,1)" fg:x="25150" fg:w="10"/><text x="72.3606%" y="159.50"></text></g><g><title>tailcall`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (32 samples, 0.09%)</title><rect x="72.1679%" y="133" width="0.0918%" height="15" fill="rgb(244,137,37)" fg:x="25170" fg:w="32"/><text x="72.4179%" y="143.50"></text></g><g><title>tailcall`alloc::raw_vec::finish_grow (26 samples, 0.07%)</title><rect x="72.1851%" y="117" width="0.0745%" height="15" fill="rgb(240,136,2)" fg:x="25176" fg:w="26"/><text x="72.4351%" y="127.50"></text></g><g><title>tailcall`mi_malloc_aligned (13 samples, 0.04%)</title><rect x="72.2224%" y="101" width="0.0373%" height="15" fill="rgb(239,18,37)" fg:x="25189" fg:w="13"/><text x="72.4724%" y="111.50"></text></g><g><title>tailcall`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (44 samples, 0.13%)</title><rect x="72.1450%" y="149" width="0.1262%" height="15" fill="rgb(218,185,22)" fg:x="25162" fg:w="44"/><text x="72.3950%" y="159.50"></text></g><g><title>tailcall`alloc::raw_vec::finish_grow (4 samples, 0.01%)</title><rect x="72.2597%" y="133" width="0.0115%" height="15" fill="rgb(225,218,4)" fg:x="25202" fg:w="4"/><text x="72.5097%" y="143.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (16 samples, 0.05%)</title><rect x="73.0940%" y="133" width="0.0459%" height="15" fill="rgb(230,182,32)" fg:x="25493" fg:w="16"/><text x="73.3440%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (110 samples, 0.32%)</title><rect x="73.1399%" y="133" width="0.3154%" height="15" fill="rgb(242,56,43)" fg:x="25509" fg:w="110"/><text x="73.3899%" y="143.50"></text></g><g><title>tailcall`&lt;T as alloc::alloc::WriteCloneIntoRaw&gt;::write_clone_into_raw (8 samples, 0.02%)</title><rect x="73.4553%" y="133" width="0.0229%" height="15" fill="rgb(233,99,24)" fg:x="25619" fg:w="8"/><text x="73.7053%" y="143.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (7 samples, 0.02%)</title><rect x="73.5958%" y="117" width="0.0201%" height="15" fill="rgb(234,209,42)" fg:x="25668" fg:w="7"/><text x="73.8458%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (71 samples, 0.20%)</title><rect x="73.6158%" y="117" width="0.2036%" height="15" fill="rgb(227,7,12)" fg:x="25675" fg:w="71"/><text x="73.8658%" y="127.50"></text></g><g><title>tailcall`&lt;T as alloc::alloc::WriteCloneIntoRaw&gt;::write_clone_into_raw (12 samples, 0.03%)</title><rect x="73.8194%" y="117" width="0.0344%" height="15" fill="rgb(245,203,43)" fg:x="25746" fg:w="12"/><text x="74.0694%" y="127.50"></text></g><g><title>tailcall`mi_malloc_aligned (8 samples, 0.02%)</title><rect x="73.8309%" y="101" width="0.0229%" height="15" fill="rgb(238,205,33)" fg:x="25750" fg:w="8"/><text x="74.0809%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1,610 samples, 4.62%)</title><rect x="73.9829%" y="101" width="4.6162%" height="15" fill="rgb(231,56,7)" fg:x="25803" fg:w="1610"/><text x="74.2329%" y="111.50">libsy..</text></g><g><title>tailcall`&lt;T as alloc::alloc::WriteCloneIntoRaw&gt;::write_clone_into_raw (8 samples, 0.02%)</title><rect x="78.5991%" y="101" width="0.0229%" height="15" fill="rgb(244,186,29)" fg:x="27413" fg:w="8"/><text x="78.8491%" y="111.50"></text></g><g><title>tailcall`mi_malloc_aligned (4 samples, 0.01%)</title><rect x="78.6105%" y="85" width="0.0115%" height="15" fill="rgb(234,111,31)" fg:x="27417" fg:w="4"/><text x="78.8605%" y="95.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (112 samples, 0.32%)</title><rect x="81.2025%" y="85" width="0.3211%" height="15" fill="rgb(241,149,10)" fg:x="28321" fg:w="112"/><text x="81.4525%" y="95.50"></text></g><g><title>tailcall`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (49 samples, 0.14%)</title><rect x="81.5236%" y="85" width="0.1405%" height="15" fill="rgb(249,206,44)" fg:x="28433" fg:w="49"/><text x="81.7736%" y="95.50"></text></g><g><title>tailcall`_mi_malloc_generic (5 samples, 0.01%)</title><rect x="81.6641%" y="85" width="0.0143%" height="15" fill="rgb(251,153,30)" fg:x="28482" fg:w="5"/><text x="81.9141%" y="95.50"></text></g><g><title>tailcall`_mi_malloc_generic (22 samples, 0.06%)</title><rect x="81.6871%" y="69" width="0.0631%" height="15" fill="rgb(239,152,38)" fg:x="28490" fg:w="22"/><text x="81.9371%" y="79.50"></text></g><g><title>tailcall`mi_find_page (7 samples, 0.02%)</title><rect x="81.7301%" y="53" width="0.0201%" height="15" fill="rgb(249,139,47)" fg:x="28505" fg:w="7"/><text x="81.9801%" y="63.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (30 samples, 0.09%)</title><rect x="81.6785%" y="85" width="0.0860%" height="15" fill="rgb(244,64,35)" fg:x="28487" fg:w="30"/><text x="81.9285%" y="95.50"></text></g><g><title>tailcall`mi_find_page (5 samples, 0.01%)</title><rect x="81.7502%" y="69" width="0.0143%" height="15" fill="rgb(216,46,15)" fg:x="28512" fg:w="5"/><text x="82.0002%" y="79.50"></text></g><g><title>tailcall`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,583 samples, 4.54%)</title><rect x="78.6220%" y="101" width="4.5388%" height="15" fill="rgb(250,74,19)" fg:x="27421" fg:w="1583"/><text x="78.8720%" y="111.50">tailc..</text></g><g><title>tailcall`mi_malloc_aligned (487 samples, 1.40%)</title><rect x="81.7645%" y="85" width="1.3963%" height="15" fill="rgb(249,42,33)" fg:x="28517" fg:w="487"/><text x="82.0145%" y="95.50"></text></g><g><title>tailcall`DYLD-STUB$$memcpy (170 samples, 0.49%)</title><rect x="83.1608%" y="101" width="0.4874%" height="15" fill="rgb(242,149,17)" fg:x="29004" fg:w="170"/><text x="83.4108%" y="111.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (4 samples, 0.01%)</title><rect x="83.6482%" y="101" width="0.0115%" height="15" fill="rgb(244,29,21)" fg:x="29174" fg:w="4"/><text x="83.8982%" y="111.50"></text></g><g><title>tailcall`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3,461 samples, 9.92%)</title><rect x="73.8538%" y="117" width="9.9234%" height="15" fill="rgb(220,130,37)" fg:x="25758" fg:w="3461"/><text x="74.1038%" y="127.50">tailcall`&lt;allo..</text></g><g><title>tailcall`mi_malloc_aligned (41 samples, 0.12%)</title><rect x="83.6597%" y="101" width="0.1176%" height="15" fill="rgb(211,67,2)" fg:x="29178" fg:w="41"/><text x="83.9097%" y="111.50"></text></g><g><title>tailcall`DYLD-STUB$$memcpy (6 samples, 0.02%)</title><rect x="83.7773%" y="117" width="0.0172%" height="15" fill="rgb(235,68,52)" fg:x="29219" fg:w="6"/><text x="84.0273%" y="127.50"></text></g><g><title>tailcall`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3,619 samples, 10.38%)</title><rect x="73.4782%" y="133" width="10.3765%" height="15" fill="rgb(246,142,3)" fg:x="25627" fg:w="3619"/><text x="73.7282%" y="143.50">tailcall`&lt;alloc..</text></g><g><title>tailcall`mi_malloc_aligned (20 samples, 0.06%)</title><rect x="83.7973%" y="117" width="0.0573%" height="15" fill="rgb(241,25,7)" fg:x="29226" fg:w="20"/><text x="84.0473%" y="127.50"></text></g><g><title>tailcall`&lt;async_graphql_value::Value as core::clone::Clone&gt;::clone (47 samples, 0.13%)</title><rect x="83.8547%" y="133" width="0.1348%" height="15" fill="rgb(242,119,39)" fg:x="29246" fg:w="47"/><text x="84.1047%" y="143.50"></text></g><g><title>tailcall`&lt;tailcall::core::http::request_template::RequestTemplate as core::clone::Clone&gt;::clone (6 samples, 0.02%)</title><rect x="83.9894%" y="133" width="0.0172%" height="15" fill="rgb(241,98,45)" fg:x="29293" fg:w="6"/><text x="84.2394%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (121 samples, 0.35%)</title><rect x="84.0210%" y="117" width="0.3469%" height="15" fill="rgb(254,28,30)" fg:x="29304" fg:w="121"/><text x="84.2710%" y="127.50"></text></g><g><title>tailcall`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (15 samples, 0.04%)</title><rect x="84.3679%" y="117" width="0.0430%" height="15" fill="rgb(241,142,54)" fg:x="29425" fg:w="15"/><text x="84.6179%" y="127.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (30 samples, 0.09%)</title><rect x="84.5858%" y="101" width="0.0860%" height="15" fill="rgb(222,85,15)" fg:x="29501" fg:w="30"/><text x="84.8358%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (72 samples, 0.21%)</title><rect x="84.6718%" y="101" width="0.2064%" height="15" fill="rgb(210,85,47)" fg:x="29531" fg:w="72"/><text x="84.9218%" y="111.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (21 samples, 0.06%)</title><rect x="85.0733%" y="85" width="0.0602%" height="15" fill="rgb(224,206,25)" fg:x="29671" fg:w="21"/><text x="85.3233%" y="95.50"></text></g><g><title>tailcall`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (176 samples, 0.50%)</title><rect x="84.8783%" y="101" width="0.5046%" height="15" fill="rgb(243,201,19)" fg:x="29603" fg:w="176"/><text x="85.1283%" y="111.50"></text></g><g><title>tailcall`mi_malloc_aligned (86 samples, 0.25%)</title><rect x="85.1363%" y="85" width="0.2466%" height="15" fill="rgb(236,59,4)" fg:x="29693" fg:w="86"/><text x="85.3863%" y="95.50"></text></g><g><title>tailcall`&lt;tailcall::core::json::json_schema::JsonSchema as core::clone::Clone&gt;::clone (9 samples, 0.03%)</title><rect x="85.3858%" y="101" width="0.0258%" height="15" fill="rgb(254,179,45)" fg:x="29780" fg:w="9"/><text x="85.6358%" y="111.50"></text></g><g><title>tailcall`DYLD-STUB$$memcpy (7 samples, 0.02%)</title><rect x="85.4116%" y="101" width="0.0201%" height="15" fill="rgb(226,14,10)" fg:x="29789" fg:w="7"/><text x="85.6616%" y="111.50"></text></g><g><title>tailcall`&lt;tailcall::core::http::request_template::RequestTemplate as core::clone::Clone&gt;::clone (468 samples, 1.34%)</title><rect x="84.4195%" y="117" width="1.3419%" height="15" fill="rgb(244,27,41)" fg:x="29443" fg:w="468"/><text x="84.6695%" y="127.50"></text></g><g><title>tailcall`mi_malloc_aligned (113 samples, 0.32%)</title><rect x="85.4374%" y="101" width="0.3240%" height="15" fill="rgb(235,35,32)" fg:x="29798" fg:w="113"/><text x="85.6874%" y="111.50"></text></g><g><title>tailcall`DYLD-STUB$$memcpy (10 samples, 0.03%)</title><rect x="85.7614%" y="117" width="0.0287%" height="15" fill="rgb(218,68,31)" fg:x="29911" fg:w="10"/><text x="86.0114%" y="127.50"></text></g><g><title>tailcall`&lt;tailcall::core::ir::model::IO as core::clone::Clone&gt;::clone (623 samples, 1.79%)</title><rect x="84.0067%" y="133" width="1.7863%" height="15" fill="rgb(207,120,37)" fg:x="29299" fg:w="623"/><text x="84.2567%" y="143.50">t..</text></g><g><title>tailcall`DYLD-STUB$$memcpy (5 samples, 0.01%)</title><rect x="85.7958%" y="133" width="0.0143%" height="15" fill="rgb(227,98,0)" fg:x="29923" fg:w="5"/><text x="86.0458%" y="143.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (4 samples, 0.01%)</title><rect x="85.8101%" y="133" width="0.0115%" height="15" fill="rgb(207,7,3)" fg:x="29928" fg:w="4"/><text x="86.0601%" y="143.50"></text></g><g><title>tailcall`_mi_malloc_generic (4 samples, 0.01%)</title><rect x="85.8101%" y="117" width="0.0115%" height="15" fill="rgb(206,98,19)" fg:x="29928" fg:w="4"/><text x="86.0601%" y="127.50"></text></g><g><title>tailcall`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4,827 samples, 13.84%)</title><rect x="72.2711%" y="149" width="13.8401%" height="15" fill="rgb(217,5,26)" fg:x="25206" fg:w="4827"/><text x="72.5211%" y="159.50">tailcall`&lt;alloc::vec:..</text></g><g><title>tailcall`mi_malloc_aligned (101 samples, 0.29%)</title><rect x="85.8216%" y="133" width="0.2896%" height="15" fill="rgb(235,190,38)" fg:x="29932" fg:w="101"/><text x="86.0716%" y="143.50"></text></g><g><title>tailcall`&lt;async_graphql_value::Value as core::clone::Clone&gt;::clone (19 samples, 0.05%)</title><rect x="86.1112%" y="149" width="0.0545%" height="15" fill="rgb(247,86,24)" fg:x="30033" fg:w="19"/><text x="86.3612%" y="159.50"></text></g><g><title>tailcall`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (224 samples, 0.64%)</title><rect x="86.1657%" y="149" width="0.6423%" height="15" fill="rgb(205,101,16)" fg:x="30052" fg:w="224"/><text x="86.4157%" y="159.50"></text></g><g><title>tailcall`&lt;tailcall::core::ir::model::IO as core::clone::Clone&gt;::clone (4 samples, 0.01%)</title><rect x="86.8079%" y="149" width="0.0115%" height="15" fill="rgb(246,168,33)" fg:x="30276" fg:w="4"/><text x="87.0579%" y="159.50"></text></g><g><title>tailcall`DYLD-STUB$$memcpy (14 samples, 0.04%)</title><rect x="86.8223%" y="149" width="0.0401%" height="15" fill="rgb(231,114,1)" fg:x="30281" fg:w="14"/><text x="87.0723%" y="159.50"></text></g><g><title>tailcall`_mi_page_retire (13 samples, 0.04%)</title><rect x="86.8653%" y="149" width="0.0373%" height="15" fill="rgb(207,184,53)" fg:x="30296" fg:w="13"/><text x="87.1153%" y="159.50"></text></g><g><title>tailcall`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (131 samples, 0.38%)</title><rect x="86.9025%" y="149" width="0.3756%" height="15" fill="rgb(224,95,51)" fg:x="30309" fg:w="131"/><text x="87.1525%" y="159.50"></text></g><g><title>tailcall`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (9 samples, 0.03%)</title><rect x="87.2781%" y="149" width="0.0258%" height="15" fill="rgb(212,188,45)" fg:x="30440" fg:w="9"/><text x="87.5281%" y="159.50"></text></g><g><title>tailcall`core::fmt::Formatter::pad (19 samples, 0.05%)</title><rect x="87.3040%" y="149" width="0.0545%" height="15" fill="rgb(223,154,38)" fg:x="30449" fg:w="19"/><text x="87.5540%" y="159.50"></text></g><g><title>tailcall`core::hash::BuildHasher::hash_one (37 samples, 0.11%)</title><rect x="87.3584%" y="149" width="0.1061%" height="15" fill="rgb(251,22,52)" fg:x="30468" fg:w="37"/><text x="87.6084%" y="159.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (4 samples, 0.01%)</title><rect x="87.4703%" y="149" width="0.0115%" height="15" fill="rgb(229,209,22)" fg:x="30507" fg:w="4"/><text x="87.7203%" y="159.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,async_graphql_value::ConstValue&gt;&gt; (17 samples, 0.05%)</title><rect x="87.4817%" y="149" width="0.0487%" height="15" fill="rgb(234,138,34)" fg:x="30511" fg:w="17"/><text x="87.7317%" y="159.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;tailcall::core::data_loader::dedupe::Dedupe&lt;tailcall::core::async_graphql_hyper::OperationId,core::result::Result&lt;tailcall::core::jit::response::AnyResponse&lt;alloc::vec::Vec&lt;u8&gt;&gt;,tailcall::core::ir::error::Error&gt;&gt;::dedupe&lt;tailcall::core::jit::graphql_executor::JITExecutor::dedupe_and_exec::{{closure}}::{{closure}},core::pin::Pin&lt;alloc::boxed::Box&lt;tailcall::core::jit::graphql_executor::JITExecutor::dedupe_and_exec::{{closure}}::{{closure}}::{{closure}}&gt;&gt;&gt;::{{closure}}&gt; (5 samples, 0.01%)</title><rect x="87.5305%" y="149" width="0.0143%" height="15" fill="rgb(212,95,11)" fg:x="30528" fg:w="5"/><text x="87.7805%" y="159.50"></text></g><g><title>tailcall`_mi_page_retire (7 samples, 0.02%)</title><rect x="87.6796%" y="101" width="0.0201%" height="15" fill="rgb(240,179,47)" fg:x="30580" fg:w="7"/><text x="87.9296%" y="111.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;tailcall::core::jit::model::Directive&lt;async_graphql_value::Value&gt;&gt;&gt; (36 samples, 0.10%)</title><rect x="88.1727%" y="69" width="0.1032%" height="15" fill="rgb(240,163,11)" fg:x="30752" fg:w="36"/><text x="88.4227%" y="79.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;[tailcall::core::jit::model::Field&lt;async_graphql_value::Value&gt;]&gt; (218 samples, 0.63%)</title><rect x="87.7226%" y="85" width="0.6251%" height="15" fill="rgb(236,37,12)" fg:x="30595" fg:w="218"/><text x="87.9726%" y="95.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;tailcall::core::wrapping_type::Type&gt; (25 samples, 0.07%)</title><rect x="88.2759%" y="69" width="0.0717%" height="15" fill="rgb(232,164,16)" fg:x="30788" fg:w="25"/><text x="88.5259%" y="79.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;tailcall::core::jit::model::Directive&lt;async_graphql_value::Value&gt;&gt;&gt; (56 samples, 0.16%)</title><rect x="88.3476%" y="85" width="0.1606%" height="15" fill="rgb(244,205,15)" fg:x="30813" fg:w="56"/><text x="88.5976%" y="95.50"></text></g><g><title>tailcall`mi_free (501 samples, 1.44%)</title><rect x="88.5139%" y="85" width="1.4365%" height="15" fill="rgb(223,117,47)" fg:x="30871" fg:w="501"/><text x="88.7639%" y="95.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;[tailcall::core::jit::model::Field&lt;async_graphql_value::Value&gt;]&gt; (787 samples, 2.26%)</title><rect x="87.6996%" y="101" width="2.2565%" height="15" fill="rgb(244,107,35)" fg:x="30587" fg:w="787"/><text x="87.9496%" y="111.50">t..</text></g><g><title>tailcall`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;tailcall::core::jit::model::Directive&lt;async_graphql_value::Value&gt;&gt;&gt; (8 samples, 0.02%)</title><rect x="89.9561%" y="101" width="0.0229%" height="15" fill="rgb(205,140,8)" fg:x="31374" fg:w="8"/><text x="90.2061%" y="111.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;tailcall::core::wrapping_type::Type&gt; (6 samples, 0.02%)</title><rect x="89.9791%" y="101" width="0.0172%" height="15" fill="rgb(228,84,46)" fg:x="31382" fg:w="6"/><text x="90.2291%" y="111.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;[tailcall::core::jit::model::Field&lt;async_graphql_value::Value&gt;]&gt; (918 samples, 2.63%)</title><rect x="87.6480%" y="117" width="2.6321%" height="15" fill="rgb(254,188,9)" fg:x="30569" fg:w="918"/><text x="87.8980%" y="127.50">ta..</text></g><g><title>tailcall`mi_free (99 samples, 0.28%)</title><rect x="89.9963%" y="101" width="0.2839%" height="15" fill="rgb(206,112,54)" fg:x="31388" fg:w="99"/><text x="90.2463%" y="111.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;tailcall::core::jit::model::Directive&lt;async_graphql_value::Value&gt;&gt;&gt; (4 samples, 0.01%)</title><rect x="90.2801%" y="117" width="0.0115%" height="15" fill="rgb(216,84,49)" fg:x="31487" fg:w="4"/><text x="90.5301%" y="127.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::Value&gt; (23 samples, 0.07%)</title><rect x="90.2916%" y="117" width="0.0659%" height="15" fill="rgb(214,194,35)" fg:x="31491" fg:w="23"/><text x="90.5416%" y="127.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;tailcall::core::endpoint::Endpoint&gt; (4 samples, 0.01%)</title><rect x="90.3575%" y="117" width="0.0115%" height="15" fill="rgb(249,28,3)" fg:x="31514" fg:w="4"/><text x="90.6075%" y="127.50"></text></g><g><title>tailcall`_mi_page_retire (5 samples, 0.01%)</title><rect x="90.4292%" y="101" width="0.0143%" height="15" fill="rgb(222,56,52)" fg:x="31539" fg:w="5"/><text x="90.6792%" y="111.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;tailcall::core::endpoint::Endpoint&gt; (21 samples, 0.06%)</title><rect x="90.4436%" y="101" width="0.0602%" height="15" fill="rgb(245,217,50)" fg:x="31544" fg:w="21"/><text x="90.6936%" y="111.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;tailcall::core::json::json_schema::JsonSchema&gt; (7 samples, 0.02%)</title><rect x="90.4837%" y="85" width="0.0201%" height="15" fill="rgb(213,201,24)" fg:x="31558" fg:w="7"/><text x="90.7337%" y="95.50"></text></g><g><title>tailcall`&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.01%)</title><rect x="90.4923%" y="69" width="0.0115%" height="15" fill="rgb(248,116,28)" fg:x="31561" fg:w="4"/><text x="90.7423%" y="79.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;tailcall::core::http::request_template::Query&gt; (25 samples, 0.07%)</title><rect x="90.5038%" y="101" width="0.0717%" height="15" fill="rgb(219,72,43)" fg:x="31565" fg:w="25"/><text x="90.7538%" y="111.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;tailcall::core::ir::model::IO&gt; (277 samples, 0.79%)</title><rect x="90.3690%" y="117" width="0.7942%" height="15" fill="rgb(209,138,14)" fg:x="31518" fg:w="277"/><text x="90.6190%" y="127.50"></text></g><g><title>tailcall`mi_free (203 samples, 0.58%)</title><rect x="90.5812%" y="101" width="0.5820%" height="15" fill="rgb(222,18,33)" fg:x="31592" fg:w="203"/><text x="90.8312%" y="111.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;tailcall::core::wrapping_type::Type&gt; (8 samples, 0.02%)</title><rect x="91.1690%" y="117" width="0.0229%" height="15" fill="rgb(213,199,7)" fg:x="31797" fg:w="8"/><text x="91.4190%" y="127.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;[tailcall::core::jit::model::Field&lt;async_graphql_value::Value&gt;]&gt; (1,392 samples, 3.99%)</title><rect x="87.5821%" y="133" width="3.9912%" height="15" fill="rgb(250,110,10)" fg:x="30546" fg:w="1392"/><text x="87.8321%" y="143.50">tail..</text></g><g><title>tailcall`mi_free (133 samples, 0.38%)</title><rect x="91.1919%" y="117" width="0.3813%" height="15" fill="rgb(248,123,6)" fg:x="31805" fg:w="133"/><text x="91.4419%" y="127.50"></text></g><g><title>tailcall`mi_free (98 samples, 0.28%)</title><rect x="91.5990%" y="133" width="0.2810%" height="15" fill="rgb(206,91,31)" fg:x="31947" fg:w="98"/><text x="91.8490%" y="143.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;tailcall::core::jit::exec_const::ConstValueExecutor&gt; (1,512 samples, 4.34%)</title><rect x="87.5477%" y="149" width="4.3352%" height="15" fill="rgb(211,154,13)" fg:x="30534" fg:w="1512"/><text x="87.7977%" y="159.50">tailc..</text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (6 samples, 0.02%)</title><rect x="91.9230%" y="133" width="0.0172%" height="15" fill="rgb(225,148,7)" fg:x="32060" fg:w="6"/><text x="92.1730%" y="143.50"></text></g><g><title>tailcall`_mi_malloc_generic (6 samples, 0.02%)</title><rect x="91.9230%" y="117" width="0.0172%" height="15" fill="rgb(220,160,43)" fg:x="32060" fg:w="6"/><text x="92.1730%" y="127.50"></text></g><g><title>tailcall`mi_find_page (5 samples, 0.01%)</title><rect x="91.9259%" y="101" width="0.0143%" height="15" fill="rgb(213,52,39)" fg:x="32061" fg:w="5"/><text x="92.1759%" y="111.50"></text></g><g><title>tailcall`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (24 samples, 0.07%)</title><rect x="91.8886%" y="149" width="0.0688%" height="15" fill="rgb(243,137,7)" fg:x="32048" fg:w="24"/><text x="92.1386%" y="159.50"></text></g><g><title>tailcall`mi_malloc_aligned (6 samples, 0.02%)</title><rect x="91.9402%" y="133" width="0.0172%" height="15" fill="rgb(230,79,13)" fg:x="32066" fg:w="6"/><text x="92.1902%" y="143.50"></text></g><g><title>tailcall`mi_free (28 samples, 0.08%)</title><rect x="91.9575%" y="149" width="0.0803%" height="15" fill="rgb(247,105,23)" fg:x="32072" fg:w="28"/><text x="92.2075%" y="159.50"></text></g><g><title>tailcall`mi_malloc_aligned (4 samples, 0.01%)</title><rect x="92.0406%" y="149" width="0.0115%" height="15" fill="rgb(223,179,41)" fg:x="32101" fg:w="4"/><text x="92.2906%" y="159.50"></text></g><g><title>tailcall`tailcall::core::jit::exec::ExecutorInner&lt;Input,Output,Error,Exec&gt;::execute::_{{closure}} (5 samples, 0.01%)</title><rect x="92.0635%" y="133" width="0.0143%" height="15" fill="rgb(218,9,34)" fg:x="32109" fg:w="5"/><text x="92.3135%" y="143.50"></text></g><g><title>tailcall`&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (5 samples, 0.01%)</title><rect x="92.0635%" y="117" width="0.0143%" height="15" fill="rgb(222,106,8)" fg:x="32109" fg:w="5"/><text x="92.3135%" y="127.50"></text></g><g><title>tailcall`tailcall::core::ir::eval::_&lt;impl tailcall::core::ir::model::IR&gt;::eval::_{{closure}}::_{{closure}} (5 samples, 0.01%)</title><rect x="92.0635%" y="101" width="0.0143%" height="15" fill="rgb(211,220,0)" fg:x="32109" fg:w="5"/><text x="92.3135%" y="111.50"></text></g><g><title>tailcall`tailcall::core::ir::eval_io::eval_io::_{{closure}} (5 samples, 0.01%)</title><rect x="92.0635%" y="85" width="0.0143%" height="15" fill="rgb(229,52,16)" fg:x="32109" fg:w="5"/><text x="92.3135%" y="95.50"></text></g><g><title>tailcall`tailcall::core::ir::eval_io::eval_io_inner::_{{closure}} (4 samples, 0.01%)</title><rect x="92.0664%" y="69" width="0.0115%" height="15" fill="rgb(212,155,18)" fg:x="32110" fg:w="4"/><text x="92.3164%" y="79.50"></text></g><g><title>tailcall`tailcall::core::ir::eval_http::EvalHttp&lt;Context&gt;::execute::_{{closure}} (4 samples, 0.01%)</title><rect x="92.0664%" y="53" width="0.0115%" height="15" fill="rgb(242,21,14)" fg:x="32110" fg:w="4"/><text x="92.3164%" y="63.50"></text></g><g><title>tailcall`tailcall::core::ir::eval_http::execute_raw_request::_{{closure}} (4 samples, 0.01%)</title><rect x="92.0664%" y="37" width="0.0115%" height="15" fill="rgb(222,19,48)" fg:x="32110" fg:w="4"/><text x="92.3164%" y="47.50"></text></g><g><title>tailcall`tailcall::core::jit::graphql_executor::JITExecutor::exec::_{{closure}} (11 samples, 0.03%)</title><rect x="92.0521%" y="149" width="0.0315%" height="15" fill="rgb(232,45,27)" fg:x="32105" fg:w="11"/><text x="92.3021%" y="159.50"></text></g><g><title>tailcall`&lt;tailcall::core::async_graphql_hyper::GraphQLRequest as tailcall::core::async_graphql_hyper::GraphQLRequestLike&gt;::execute_with_jit::_{{closure}} (8,133 samples, 23.32%)</title><rect x="68.7903%" y="181" width="23.3191%" height="15" fill="rgb(249,103,42)" fg:x="23992" fg:w="8133"/><text x="69.0403%" y="191.50">tailcall`&lt;tailcall::core::async_graph..</text></g><g><title>tailcall`tailcall::core::jit::graphql_executor::JITExecutor::execute::_{{closure}} (7,514 samples, 21.54%)</title><rect x="70.5651%" y="165" width="21.5443%" height="15" fill="rgb(246,81,33)" fg:x="24611" fg:w="7514"/><text x="70.8151%" y="175.50">tailcall`tailcall::core::jit::grap..</text></g><g><title>tailcall`tailcall::core::jit::request::Request&lt;async_graphql_value::ConstValue&gt;::create_plan (9 samples, 0.03%)</title><rect x="92.0836%" y="149" width="0.0258%" height="15" fill="rgb(252,33,42)" fg:x="32116" fg:w="9"/><text x="92.3336%" y="159.50"></text></g><g><title>tailcall`&lt;tailcall::core::blueprint::upstream::Upstream as core::clone::Clone&gt;::clone (7 samples, 0.02%)</title><rect x="92.1180%" y="181" width="0.0201%" height="15" fill="rgb(209,212,41)" fg:x="32128" fg:w="7"/><text x="92.3680%" y="191.50"></text></g><g><title>tailcall`DYLD-STUB$$memcpy (11 samples, 0.03%)</title><rect x="92.1381%" y="181" width="0.0315%" height="15" fill="rgb(207,154,6)" fg:x="32135" fg:w="11"/><text x="92.3881%" y="191.50"></text></g><g><title>tailcall`_mi_malloc_generic (8 samples, 0.02%)</title><rect x="92.1696%" y="181" width="0.0229%" height="15" fill="rgb(223,64,47)" fg:x="32146" fg:w="8"/><text x="92.4196%" y="191.50"></text></g><g><title>tailcall`_mi_page_retire (10 samples, 0.03%)</title><rect x="92.1926%" y="181" width="0.0287%" height="15" fill="rgb(211,161,38)" fg:x="32154" fg:w="10"/><text x="92.4426%" y="191.50"></text></g><g><title>tailcall`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (11 samples, 0.03%)</title><rect x="92.2212%" y="181" width="0.0315%" height="15" fill="rgb(219,138,40)" fg:x="32164" fg:w="11"/><text x="92.4712%" y="191.50"></text></g><g><title>tailcall`alloc::sync::Arc&lt;T,A&gt;::drop_slow (16 samples, 0.05%)</title><rect x="92.4563%" y="165" width="0.0459%" height="15" fill="rgb(241,228,46)" fg:x="32246" fg:w="16"/><text x="92.7063%" y="175.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;http::header::map::HeaderMap&gt; (8 samples, 0.02%)</title><rect x="92.5108%" y="165" width="0.0229%" height="15" fill="rgb(223,209,38)" fg:x="32265" fg:w="8"/><text x="92.7608%" y="175.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;tailcall::core::blueprint::server::Server&gt; (22 samples, 0.06%)</title><rect x="92.5338%" y="165" width="0.0631%" height="15" fill="rgb(236,164,45)" fg:x="32273" fg:w="22"/><text x="92.7838%" y="175.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;http::header::map::HeaderMap&gt; (6 samples, 0.02%)</title><rect x="92.5796%" y="149" width="0.0172%" height="15" fill="rgb(231,15,5)" fg:x="32289" fg:w="6"/><text x="92.8296%" y="159.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;tailcall::core::blueprint::upstream::Upstream&gt; (5 samples, 0.01%)</title><rect x="92.5968%" y="165" width="0.0143%" height="15" fill="rgb(252,35,15)" fg:x="32295" fg:w="5"/><text x="92.8468%" y="175.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;tailcall::core::runtime::TargetRuntime&gt; (32 samples, 0.09%)</title><rect x="92.6112%" y="165" width="0.0918%" height="15" fill="rgb(248,181,18)" fg:x="32300" fg:w="32"/><text x="92.8612%" y="175.50"></text></g><g><title>tailcall`alloc::sync::Arc&lt;T,A&gt;::drop_slow (179 samples, 0.51%)</title><rect x="92.2528%" y="181" width="0.5132%" height="15" fill="rgb(233,39,42)" fg:x="32175" fg:w="179"/><text x="92.5028%" y="191.50"></text></g><g><title>tailcall`mi_free (22 samples, 0.06%)</title><rect x="92.7029%" y="165" width="0.0631%" height="15" fill="rgb(238,110,33)" fg:x="32332" fg:w="22"/><text x="92.9529%" y="175.50"></text></g><g><title>tailcall`bytes::bytes_mut::shared_v_drop (8 samples, 0.02%)</title><rect x="92.7717%" y="181" width="0.0229%" height="15" fill="rgb(233,195,10)" fg:x="32356" fg:w="8"/><text x="93.0217%" y="191.50"></text></g><g><title>tailcall`core::fmt::write (7 samples, 0.02%)</title><rect x="92.7947%" y="181" width="0.0201%" height="15" fill="rgb(254,105,3)" fg:x="32364" fg:w="7"/><text x="93.0447%" y="191.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;http::header::map::HeaderMap&gt; (5 samples, 0.01%)</title><rect x="92.8147%" y="181" width="0.0143%" height="15" fill="rgb(221,225,9)" fg:x="32371" fg:w="5"/><text x="93.0647%" y="191.50"></text></g><g><title>tailcall`bytes::bytes_mut::shared_v_drop (14 samples, 0.04%)</title><rect x="92.9036%" y="149" width="0.0401%" height="15" fill="rgb(224,227,45)" fg:x="32402" fg:w="14"/><text x="93.1536%" y="159.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;http::header::map::HeaderMap&gt; (36 samples, 0.10%)</title><rect x="92.8492%" y="165" width="0.1032%" height="15" fill="rgb(229,198,43)" fg:x="32383" fg:w="36"/><text x="93.0992%" y="175.50"></text></g><g><title>tailcall`mi_free (50 samples, 0.14%)</title><rect x="92.9524%" y="165" width="0.1434%" height="15" fill="rgb(206,209,35)" fg:x="32419" fg:w="50"/><text x="93.2024%" y="175.50"></text></g><g><title>tailcall`mi_free_block_delayed_mt (37 samples, 0.11%)</title><rect x="93.0957%" y="165" width="0.1061%" height="15" fill="rgb(245,195,53)" fg:x="32469" fg:w="37"/><text x="93.3457%" y="175.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;http::request::Parts&gt; (135 samples, 0.39%)</title><rect x="92.8291%" y="181" width="0.3871%" height="15" fill="rgb(240,92,26)" fg:x="32376" fg:w="135"/><text x="93.0791%" y="191.50"></text></g><g><title>tailcall`http::header::map::HeaderMap&lt;T&gt;::try_with_capacity (6 samples, 0.02%)</title><rect x="93.2305%" y="181" width="0.0172%" height="15" fill="rgb(207,40,23)" fg:x="32516" fg:w="6"/><text x="93.4805%" y="191.50"></text></g><g><title>tailcall`hyper::body::body::Body::poll_inner (4 samples, 0.01%)</title><rect x="93.2534%" y="181" width="0.0115%" height="15" fill="rgb(223,111,35)" fg:x="32524" fg:w="4"/><text x="93.5034%" y="191.50"></text></g><g><title>tailcall`&lt;hyper::body::body::Body as http_body::Body&gt;::poll_data (7 samples, 0.02%)</title><rect x="93.3337%" y="165" width="0.0201%" height="15" fill="rgb(229,147,28)" fg:x="32552" fg:w="7"/><text x="93.5837%" y="175.50"></text></g><g><title>tailcall`_mi_page_retire (4 samples, 0.01%)</title><rect x="93.3538%" y="165" width="0.0115%" height="15" fill="rgb(211,29,28)" fg:x="32559" fg:w="4"/><text x="93.6038%" y="175.50"></text></g><g><title>tailcall`alloc::sync::Arc&lt;T,A&gt;::drop_slow (4 samples, 0.01%)</title><rect x="93.3997%" y="149" width="0.0115%" height="15" fill="rgb(228,72,33)" fg:x="32575" fg:w="4"/><text x="93.6497%" y="159.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;hyper::body::body::Body&gt; (20 samples, 0.06%)</title><rect x="93.3653%" y="165" width="0.0573%" height="15" fill="rgb(205,214,31)" fg:x="32563" fg:w="20"/><text x="93.6153%" y="175.50"></text></g><g><title>tailcall`tokio::runtime::task::waker::wake_by_val (4 samples, 0.01%)</title><rect x="93.4111%" y="149" width="0.0115%" height="15" fill="rgb(224,111,15)" fg:x="32579" fg:w="4"/><text x="93.6611%" y="159.50"></text></g><g><title>tailcall`futures_channel::mpsc::Receiver&lt;T&gt;::next_message (5 samples, 0.01%)</title><rect x="93.4226%" y="165" width="0.0143%" height="15" fill="rgb(253,21,26)" fg:x="32583" fg:w="5"/><text x="93.6726%" y="175.50"></text></g><g><title>tailcall`_mi_page_retire (7 samples, 0.02%)</title><rect x="93.4828%" y="149" width="0.0201%" height="15" fill="rgb(245,139,43)" fg:x="32604" fg:w="7"/><text x="93.7328%" y="159.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (7 samples, 0.02%)</title><rect x="93.5631%" y="133" width="0.0201%" height="15" fill="rgb(252,170,7)" fg:x="32632" fg:w="7"/><text x="93.8131%" y="143.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (6 samples, 0.02%)</title><rect x="93.5889%" y="133" width="0.0172%" height="15" fill="rgb(231,118,14)" fg:x="32641" fg:w="6"/><text x="93.8389%" y="143.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_destroy (5 samples, 0.01%)</title><rect x="93.6405%" y="117" width="0.0143%" height="15" fill="rgb(238,83,0)" fg:x="32659" fg:w="5"/><text x="93.8905%" y="127.50"></text></g><g><title>tailcall`alloc::sync::Arc&lt;T,A&gt;::drop_slow (17 samples, 0.05%)</title><rect x="93.6118%" y="133" width="0.0487%" height="15" fill="rgb(221,39,39)" fg:x="32649" fg:w="17"/><text x="93.8618%" y="143.50"></text></g><g><title>tailcall`futures_channel::mpsc::queue::Queue&lt;T&gt;::pop_spin (5 samples, 0.01%)</title><rect x="93.6606%" y="133" width="0.0143%" height="15" fill="rgb(222,119,46)" fg:x="32666" fg:w="5"/><text x="93.9106%" y="143.50"></text></g><g><title>tailcall`futures_channel::mpsc::Receiver&lt;T&gt;::next_message (67 samples, 0.19%)</title><rect x="93.5029%" y="149" width="0.1921%" height="15" fill="rgb(222,165,49)" fg:x="32611" fg:w="67"/><text x="93.7529%" y="159.50"></text></g><g><title>tailcall`mi_free (7 samples, 0.02%)</title><rect x="93.6749%" y="133" width="0.0201%" height="15" fill="rgb(219,113,52)" fg:x="32671" fg:w="7"/><text x="93.9249%" y="143.50"></text></g><g><title>tailcall`hyper::body::body::Body::poll_inner (117 samples, 0.34%)</title><rect x="93.4369%" y="165" width="0.3355%" height="15" fill="rgb(214,7,15)" fg:x="32588" fg:w="117"/><text x="93.6869%" y="175.50"></text></g><g><title>tailcall`mi_free (25 samples, 0.07%)</title><rect x="93.7007%" y="149" width="0.0717%" height="15" fill="rgb(235,32,4)" fg:x="32680" fg:w="25"/><text x="93.9507%" y="159.50"></text></g><g><title>tailcall`mi_free (6 samples, 0.02%)</title><rect x="93.7724%" y="165" width="0.0172%" height="15" fill="rgb(238,90,54)" fg:x="32705" fg:w="6"/><text x="94.0224%" y="175.50"></text></g><g><title>tailcall`hyper::body::to_bytes::to_bytes::_{{closure}} (184 samples, 0.53%)</title><rect x="93.2649%" y="181" width="0.5276%" height="15" fill="rgb(213,208,19)" fg:x="32528" fg:w="184"/><text x="93.5149%" y="191.50"></text></g><g><title>tailcall`mi_free (88 samples, 0.25%)</title><rect x="93.7925%" y="181" width="0.2523%" height="15" fill="rgb(233,156,4)" fg:x="32712" fg:w="88"/><text x="94.0425%" y="191.50"></text></g><g><title>tailcall`mi_free_block_delayed_mt (12 samples, 0.03%)</title><rect x="94.0448%" y="181" width="0.0344%" height="15" fill="rgb(207,194,5)" fg:x="32800" fg:w="12"/><text x="94.2948%" y="191.50"></text></g><g><title>tailcall`mi_free_generic_local (5 samples, 0.01%)</title><rect x="94.0792%" y="181" width="0.0143%" height="15" fill="rgb(206,111,30)" fg:x="32812" fg:w="5"/><text x="94.3292%" y="191.50"></text></g><g><title>tailcall`mi_find_page (22 samples, 0.06%)</title><rect x="94.1681%" y="149" width="0.0631%" height="15" fill="rgb(243,70,54)" fg:x="32843" fg:w="22"/><text x="94.4181%" y="159.50"></text></g><g><title>tailcall`_mi_malloc_generic (34 samples, 0.10%)</title><rect x="94.1365%" y="165" width="0.0975%" height="15" fill="rgb(242,28,8)" fg:x="32832" fg:w="34"/><text x="94.3865%" y="175.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (58 samples, 0.17%)</title><rect x="94.0964%" y="181" width="0.1663%" height="15" fill="rgb(219,106,18)" fg:x="32818" fg:w="58"/><text x="94.3464%" y="191.50"></text></g><g><title>tailcall`mi_find_page (10 samples, 0.03%)</title><rect x="94.2340%" y="165" width="0.0287%" height="15" fill="rgb(244,222,10)" fg:x="32866" fg:w="10"/><text x="94.4840%" y="175.50"></text></g><g><title>tailcall`mi_malloc_aligned (10 samples, 0.03%)</title><rect x="94.2627%" y="181" width="0.0287%" height="15" fill="rgb(236,179,52)" fg:x="32876" fg:w="10"/><text x="94.5127%" y="191.50"></text></g><g><title>tailcall`serde::de::MapAccess::next_entry (9 samples, 0.03%)</title><rect x="94.2971%" y="181" width="0.0258%" height="15" fill="rgb(213,23,39)" fg:x="32888" fg:w="9"/><text x="94.5471%" y="191.50"></text></g><g><title>tailcall`&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (399 samples, 1.14%)</title><rect x="94.3860%" y="165" width="1.1440%" height="15" fill="rgb(238,48,10)" fg:x="32919" fg:w="399"/><text x="94.6360%" y="175.50"></text></g><g><title>tailcall`core::str::converts::from_utf8 (79 samples, 0.23%)</title><rect x="95.3035%" y="149" width="0.2265%" height="15" fill="rgb(251,196,23)" fg:x="33239" fg:w="79"/><text x="95.5535%" y="159.50"></text></g><g><title>tailcall`_mi_malloc_generic (16 samples, 0.05%)</title><rect x="95.5443%" y="149" width="0.0459%" height="15" fill="rgb(250,152,24)" fg:x="33323" fg:w="16"/><text x="95.7943%" y="159.50"></text></g><g><title>tailcall`mi_find_page (6 samples, 0.02%)</title><rect x="95.5730%" y="133" width="0.0172%" height="15" fill="rgb(209,150,17)" fg:x="33333" fg:w="6"/><text x="95.8230%" y="143.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (25 samples, 0.07%)</title><rect x="95.5357%" y="165" width="0.0717%" height="15" fill="rgb(234,202,34)" fg:x="33320" fg:w="25"/><text x="95.7857%" y="175.50"></text></g><g><title>tailcall`mi_find_page (6 samples, 0.02%)</title><rect x="95.5902%" y="149" width="0.0172%" height="15" fill="rgb(253,148,53)" fg:x="33339" fg:w="6"/><text x="95.8402%" y="159.50"></text></g><g><title>tailcall`serde::de::impls::_&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (461 samples, 1.32%)</title><rect x="94.3229%" y="181" width="1.3218%" height="15" fill="rgb(218,129,16)" fg:x="32897" fg:w="461"/><text x="94.5729%" y="191.50"></text></g><g><title>tailcall`serde_json::read::SliceRead::skip_to_escape_slow (10 samples, 0.03%)</title><rect x="95.6160%" y="165" width="0.0287%" height="15" fill="rgb(216,85,19)" fg:x="33348" fg:w="10"/><text x="95.8660%" y="175.50"></text></g><g><title>tailcall`serde_json::de::Deserializer&lt;R&gt;::end_map (4 samples, 0.01%)</title><rect x="95.6447%" y="181" width="0.0115%" height="15" fill="rgb(235,228,7)" fg:x="33358" fg:w="4"/><text x="95.8947%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (9 samples, 0.03%)</title><rect x="95.7594%" y="165" width="0.0258%" height="15" fill="rgb(245,175,0)" fg:x="33398" fg:w="9"/><text x="96.0094%" y="175.50"></text></g><g><title>tailcall`http::header::map::HeaderMap&lt;T&gt;::try_append2 (6 samples, 0.02%)</title><rect x="95.7852%" y="165" width="0.0172%" height="15" fill="rgb(208,168,36)" fg:x="33407" fg:w="6"/><text x="96.0352%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (5 samples, 0.01%)</title><rect x="96.0117%" y="149" width="0.0143%" height="15" fill="rgb(246,171,24)" fg:x="33486" fg:w="5"/><text x="96.2617%" y="159.50"></text></g><g><title>tailcall`http::header::map::HeaderMap&lt;T&gt;::try_reserve_one (14 samples, 0.04%)</title><rect x="96.0576%" y="133" width="0.0401%" height="15" fill="rgb(215,142,24)" fg:x="33502" fg:w="14"/><text x="96.3076%" y="143.50"></text></g><g><title>tailcall`mi_malloc_aligned (6 samples, 0.02%)</title><rect x="96.0805%" y="117" width="0.0172%" height="15" fill="rgb(250,187,7)" fg:x="33510" fg:w="6"/><text x="96.3305%" y="127.50"></text></g><g><title>tailcall`http::header::map::HeaderMap&lt;T&gt;::try_append2 (26 samples, 0.07%)</title><rect x="96.0260%" y="149" width="0.0745%" height="15" fill="rgb(228,66,33)" fg:x="33491" fg:w="26"/><text x="96.2760%" y="159.50"></text></g><g><title>tailcall`http::response::Builder::and_then (115 samples, 0.33%)</title><rect x="95.8024%" y="165" width="0.3297%" height="15" fill="rgb(234,215,21)" fg:x="33413" fg:w="115"/><text x="96.0524%" y="175.50"></text></g><g><title>tailcall`mi_malloc_aligned (9 samples, 0.03%)</title><rect x="96.1063%" y="149" width="0.0258%" height="15" fill="rgb(222,191,20)" fg:x="33519" fg:w="9"/><text x="96.3563%" y="159.50"></text></g><g><title>tailcall`_mi_free_delayed_block (8 samples, 0.02%)</title><rect x="96.1895%" y="133" width="0.0229%" height="15" fill="rgb(245,79,54)" fg:x="33548" fg:w="8"/><text x="96.4395%" y="143.50"></text></g><g><title>tailcall`mi_find_page (23 samples, 0.07%)</title><rect x="96.2210%" y="133" width="0.0659%" height="15" fill="rgb(240,10,37)" fg:x="33559" fg:w="23"/><text x="96.4710%" y="143.50"></text></g><g><title>tailcall`_mi_malloc_generic (54 samples, 0.15%)</title><rect x="96.1407%" y="149" width="0.1548%" height="15" fill="rgb(214,192,32)" fg:x="33531" fg:w="54"/><text x="96.3907%" y="159.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (61 samples, 0.17%)</title><rect x="96.1321%" y="165" width="0.1749%" height="15" fill="rgb(209,36,54)" fg:x="33528" fg:w="61"/><text x="96.3821%" y="175.50"></text></g><g><title>tailcall`mi_find_page (4 samples, 0.01%)</title><rect x="96.2956%" y="149" width="0.0115%" height="15" fill="rgb(220,10,11)" fg:x="33585" fg:w="4"/><text x="96.5456%" y="159.50"></text></g><g><title>tailcall`tailcall::core::async_graphql_hyper::GraphQLArcResponse::into_response (230 samples, 0.66%)</title><rect x="95.6562%" y="181" width="0.6595%" height="15" fill="rgb(221,106,17)" fg:x="33362" fg:w="230"/><text x="95.9062%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (6 samples, 0.02%)</title><rect x="97.1442%" y="165" width="0.0172%" height="15" fill="rgb(251,142,44)" fg:x="33881" fg:w="6"/><text x="97.3942%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (31 samples, 0.09%)</title><rect x="97.1615%" y="165" width="0.0889%" height="15" fill="rgb(238,13,15)" fg:x="33887" fg:w="31"/><text x="97.4115%" y="175.50"></text></g><g><title>tailcall`&lt;http::header::map::HeaderMap&lt;T&gt; as core::clone::Clone&gt;::clone (4 samples, 0.01%)</title><rect x="97.2503%" y="165" width="0.0115%" height="15" fill="rgb(208,107,27)" fg:x="33918" fg:w="4"/><text x="97.5003%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (4 samples, 0.01%)</title><rect x="97.3335%" y="149" width="0.0115%" height="15" fill="rgb(205,136,37)" fg:x="33947" fg:w="4"/><text x="97.5835%" y="159.50"></text></g><g><title>tailcall`&lt;http::header::map::HeaderMap&lt;T&gt; as core::clone::Clone&gt;::clone (5 samples, 0.01%)</title><rect x="97.3478%" y="149" width="0.0143%" height="15" fill="rgb(250,205,27)" fg:x="33952" fg:w="5"/><text x="97.5978%" y="159.50"></text></g><g><title>tailcall`&lt;tailcall::core::blueprint::server::Server as core::clone::Clone&gt;::clone (73 samples, 0.21%)</title><rect x="97.2618%" y="165" width="0.2093%" height="15" fill="rgb(210,80,43)" fg:x="33922" fg:w="73"/><text x="97.5118%" y="175.50"></text></g><g><title>tailcall`mi_malloc_aligned (37 samples, 0.11%)</title><rect x="97.3650%" y="149" width="0.1061%" height="15" fill="rgb(247,160,36)" fg:x="33958" fg:w="37"/><text x="97.6150%" y="159.50"></text></g><g><title>tailcall`&lt;tailcall::core::blueprint::upstream::Upstream as core::clone::Clone&gt;::clone (23 samples, 0.07%)</title><rect x="97.4711%" y="165" width="0.0659%" height="15" fill="rgb(234,13,49)" fg:x="33995" fg:w="23"/><text x="97.7211%" y="175.50"></text></g><g><title>tailcall`mi_malloc_aligned (5 samples, 0.01%)</title><rect x="97.5227%" y="149" width="0.0143%" height="15" fill="rgb(234,122,0)" fg:x="34013" fg:w="5"/><text x="97.7727%" y="159.50"></text></g><g><title>tailcall`tailcall::core::http::request_handler::create_request_context (451 samples, 1.29%)</title><rect x="96.3156%" y="181" width="1.2931%" height="15" fill="rgb(207,146,38)" fg:x="33592" fg:w="451"/><text x="96.5656%" y="191.50"></text></g><g><title>tailcall`mi_malloc_aligned (20 samples, 0.06%)</title><rect x="97.5514%" y="165" width="0.0573%" height="15" fill="rgb(207,177,25)" fg:x="34023" fg:w="20"/><text x="97.8014%" y="175.50"></text></g><g><title>tailcall`tailcall::core::http::request_handler::update_response_headers (9 samples, 0.03%)</title><rect x="97.6087%" y="181" width="0.0258%" height="15" fill="rgb(211,178,42)" fg:x="34043" fg:w="9"/><text x="97.8587%" y="191.50"></text></g><g><title>tailcall`tailcall::core::http::request_handler::graphql_request::_{{closure}}::_{{closure}} (14,723 samples, 42.21%)</title><rect x="55.4434%" y="197" width="42.2141%" height="15" fill="rgb(230,69,54)" fg:x="19337" fg:w="14723"/><text x="55.6934%" y="207.50">tailcall`tailcall::core::http::request_handler::graphql_request::_{{c..</text></g><g><title>tailcall`tailcall::core::jit::graphql_executor::JITExecutor::execute::_{{closure}} (8 samples, 0.02%)</title><rect x="97.6345%" y="181" width="0.0229%" height="15" fill="rgb(214,135,41)" fg:x="34052" fg:w="8"/><text x="97.8845%" y="191.50"></text></g><g><title>tailcall`tailcall::core::http::request_handler::update_response_headers (55 samples, 0.16%)</title><rect x="97.6575%" y="197" width="0.1577%" height="15" fill="rgb(237,67,25)" fg:x="34060" fg:w="55"/><text x="97.9075%" y="207.50"></text></g><g><title>tailcall`tracing::__macro_support::__is_enabled (16 samples, 0.05%)</title><rect x="97.8209%" y="197" width="0.0459%" height="15" fill="rgb(222,189,50)" fg:x="34117" fg:w="16"/><text x="98.0709%" y="207.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (12 samples, 0.03%)</title><rect x="97.9012%" y="165" width="0.0344%" height="15" fill="rgb(245,148,34)" fg:x="34145" fg:w="12"/><text x="98.1512%" y="175.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (19 samples, 0.05%)</title><rect x="97.9901%" y="149" width="0.0545%" height="15" fill="rgb(222,29,6)" fg:x="34176" fg:w="19"/><text x="98.2401%" y="159.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (16 samples, 0.05%)</title><rect x="97.9987%" y="133" width="0.0459%" height="15" fill="rgb(221,189,43)" fg:x="34179" fg:w="16"/><text x="98.2487%" y="143.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::current_span (15 samples, 0.04%)</title><rect x="98.0446%" y="149" width="0.0430%" height="15" fill="rgb(207,36,27)" fg:x="34195" fg:w="15"/><text x="98.2946%" y="159.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (6 samples, 0.02%)</title><rect x="98.0704%" y="133" width="0.0172%" height="15" fill="rgb(217,90,24)" fg:x="34204" fg:w="6"/><text x="98.3204%" y="143.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::new_span (71 samples, 0.20%)</title><rect x="97.8926%" y="181" width="0.2036%" height="15" fill="rgb(224,66,35)" fg:x="34142" fg:w="71"/><text x="98.1426%" y="191.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::new_span (54 samples, 0.15%)</title><rect x="97.9413%" y="165" width="0.1548%" height="15" fill="rgb(221,13,50)" fg:x="34159" fg:w="54"/><text x="98.1913%" y="175.50"></text></g><g><title>tailcall`tracing::span::Span::new (83 samples, 0.24%)</title><rect x="97.8668%" y="197" width="0.2380%" height="15" fill="rgb(236,68,49)" fg:x="34133" fg:w="83"/><text x="98.1168%" y="207.50"></text></g><g><title>tailcall`tailcall::core::http::request_handler::graphql_request::_{{closure}} (15,931 samples, 45.68%)</title><rect x="52.4472%" y="213" width="45.6777%" height="15" fill="rgb(229,146,28)" fg:x="18292" fg:w="15931"/><text x="52.6972%" y="223.50">tailcall`tailcall::core::http::request_handler::graphql_request::_{{closure..</text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::is_enabled_inner (7 samples, 0.02%)</title><rect x="98.1048%" y="197" width="0.0201%" height="15" fill="rgb(225,31,38)" fg:x="34216" fg:w="7"/><text x="98.3548%" y="207.50"></text></g><g><title>tailcall`tracing::__macro_support::__is_enabled (4 samples, 0.01%)</title><rect x="98.1248%" y="213" width="0.0115%" height="15" fill="rgb(250,208,3)" fg:x="34223" fg:w="4"/><text x="98.3748%" y="223.50"></text></g><g><title>tailcall`tailcall::core::http::request_handler::handle_request_inner::_{{closure}} (16,169 samples, 46.36%)</title><rect x="51.7791%" y="229" width="46.3601%" height="15" fill="rgb(246,54,23)" fg:x="18059" fg:w="16169"/><text x="52.0291%" y="239.50">tailcall`tailcall::core::http::request_handler::handle_request_inner::_{{clo..</text></g><g><title>libdyld.dylib`tlv_get_addr (9 samples, 0.03%)</title><rect x="98.2711%" y="213" width="0.0258%" height="15" fill="rgb(243,76,11)" fg:x="34274" fg:w="9"/><text x="98.5211%" y="223.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::CloseGuard as core::ops::drop::Drop&gt;::drop (5 samples, 0.01%)</title><rect x="98.3169%" y="197" width="0.0143%" height="15" fill="rgb(245,21,50)" fg:x="34290" fg:w="5"/><text x="98.5669%" y="207.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (11 samples, 0.03%)</title><rect x="98.3313%" y="197" width="0.0315%" height="15" fill="rgb(228,9,43)" fg:x="34295" fg:w="11"/><text x="98.5813%" y="207.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (6 samples, 0.02%)</title><rect x="98.3456%" y="181" width="0.0172%" height="15" fill="rgb(208,100,47)" fg:x="34300" fg:w="6"/><text x="98.5956%" y="191.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (24 samples, 0.07%)</title><rect x="98.2969%" y="213" width="0.0688%" height="15" fill="rgb(232,26,8)" fg:x="34283" fg:w="24"/><text x="98.5469%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (6 samples, 0.02%)</title><rect x="98.3829%" y="197" width="0.0172%" height="15" fill="rgb(216,166,38)" fg:x="34313" fg:w="6"/><text x="98.6329%" y="207.50"></text></g><g><title>tailcall`opentelemetry::propagation::text_map_propagator::TextMapPropagator::extract (73 samples, 0.21%)</title><rect x="98.3743%" y="213" width="0.2093%" height="15" fill="rgb(251,202,51)" fg:x="34310" fg:w="73"/><text x="98.6243%" y="223.50"></text></g><g><title>tailcall`opentelemetry::context::Context::current (63 samples, 0.18%)</title><rect x="98.4030%" y="197" width="0.1806%" height="15" fill="rgb(254,216,34)" fg:x="34320" fg:w="63"/><text x="98.6530%" y="207.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (9 samples, 0.03%)</title><rect x="98.6266%" y="181" width="0.0258%" height="15" fill="rgb(251,32,27)" fg:x="34398" fg:w="9"/><text x="98.8766%" y="191.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::clone_span (11 samples, 0.03%)</title><rect x="98.6266%" y="197" width="0.0315%" height="15" fill="rgb(208,127,28)" fg:x="34398" fg:w="11"/><text x="98.8766%" y="207.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (6 samples, 0.02%)</title><rect x="98.6581%" y="197" width="0.0172%" height="15" fill="rgb(224,137,22)" fg:x="34409" fg:w="6"/><text x="98.9081%" y="207.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::current_span (15 samples, 0.04%)</title><rect x="98.6753%" y="197" width="0.0430%" height="15" fill="rgb(254,70,32)" fg:x="34415" fg:w="15"/><text x="98.9253%" y="207.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (5 samples, 0.01%)</title><rect x="98.7040%" y="181" width="0.0143%" height="15" fill="rgb(229,75,37)" fg:x="34425" fg:w="5"/><text x="98.9540%" y="191.50"></text></g><g><title>tailcall`tailcall::core::http::telemetry::propagate_context (202 samples, 0.58%)</title><rect x="98.1420%" y="229" width="0.5792%" height="15" fill="rgb(252,64,23)" fg:x="34229" fg:w="202"/><text x="98.3920%" y="239.50"></text></g><g><title>tailcall`tracing::span::Span::current (48 samples, 0.14%)</title><rect x="98.5836%" y="213" width="0.1376%" height="15" fill="rgb(232,162,48)" fg:x="34383" fg:w="48"/><text x="98.8336%" y="223.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (14 samples, 0.04%)</title><rect x="99.0251%" y="197" width="0.0401%" height="15" fill="rgb(246,160,12)" fg:x="34537" fg:w="14"/><text x="99.2751%" y="207.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (7 samples, 0.02%)</title><rect x="99.0452%" y="181" width="0.0201%" height="15" fill="rgb(247,166,0)" fg:x="34544" fg:w="7"/><text x="99.2952%" y="191.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::clone_span (21 samples, 0.06%)</title><rect x="99.0223%" y="213" width="0.0602%" height="15" fill="rgb(249,219,21)" fg:x="34536" fg:w="21"/><text x="99.2723%" y="223.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (6 samples, 0.02%)</title><rect x="99.0653%" y="197" width="0.0172%" height="15" fill="rgb(205,209,3)" fg:x="34551" fg:w="6"/><text x="99.3153%" y="207.50"></text></g><g><title>tailcall`tailcall::core::http::request_handler::handle_request::_{{closure}}::_{{closure}} (16,666 samples, 47.79%)</title><rect x="51.3261%" y="245" width="47.7851%" height="15" fill="rgb(243,44,1)" fg:x="17901" fg:w="16666"/><text x="51.5761%" y="255.50">tailcall`tailcall::core::http::request_handler::handle_request::_{{closure}}::..</text></g><g><title>tailcall`tracing::span::Span::current (136 samples, 0.39%)</title><rect x="98.7212%" y="229" width="0.3899%" height="15" fill="rgb(206,159,16)" fg:x="34431" fg:w="136"/><text x="98.9712%" y="239.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::current_span (9 samples, 0.03%)</title><rect x="99.0854%" y="213" width="0.0258%" height="15" fill="rgb(244,77,30)" fg:x="34558" fg:w="9"/><text x="99.3354%" y="223.50"></text></g><g><title>tailcall`tailcall::core::http::request_handler::handle_request_inner::_{{closure}} (4 samples, 0.01%)</title><rect x="99.1112%" y="245" width="0.0115%" height="15" fill="rgb(218,69,12)" fg:x="34567" fg:w="4"/><text x="99.3612%" y="255.50"></text></g><g><title>tailcall`tailcall::core::http::telemetry::RequestCounter::update (12 samples, 0.03%)</title><rect x="99.1255%" y="245" width="0.0344%" height="15" fill="rgb(212,87,7)" fg:x="34572" fg:w="12"/><text x="99.3755%" y="255.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (8 samples, 0.02%)</title><rect x="99.2115%" y="229" width="0.0229%" height="15" fill="rgb(245,114,25)" fg:x="34602" fg:w="8"/><text x="99.4615%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (13 samples, 0.04%)</title><rect x="99.2345%" y="229" width="0.0373%" height="15" fill="rgb(210,61,42)" fg:x="34610" fg:w="13"/><text x="99.4845%" y="239.50"></text></g><g><title>tailcall`tracing::__macro_support::__is_enabled (48 samples, 0.14%)</title><rect x="99.1628%" y="245" width="0.1376%" height="15" fill="rgb(211,52,33)" fg:x="34585" fg:w="48"/><text x="99.4128%" y="255.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::enabled (10 samples, 0.03%)</title><rect x="99.2717%" y="229" width="0.0287%" height="15" fill="rgb(234,58,33)" fg:x="34623" fg:w="10"/><text x="99.5217%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (6 samples, 0.02%)</title><rect x="99.3348%" y="229" width="0.0172%" height="15" fill="rgb(220,115,36)" fg:x="34645" fg:w="6"/><text x="99.5848%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (9 samples, 0.03%)</title><rect x="99.3577%" y="213" width="0.0258%" height="15" fill="rgb(243,153,54)" fg:x="34653" fg:w="9"/><text x="99.6077%" y="223.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::current_span (4 samples, 0.01%)</title><rect x="99.3835%" y="213" width="0.0115%" height="15" fill="rgb(251,47,18)" fg:x="34662" fg:w="4"/><text x="99.6335%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (7 samples, 0.02%)</title><rect x="99.4610%" y="197" width="0.0201%" height="15" fill="rgb(242,102,42)" fg:x="34689" fg:w="7"/><text x="99.7110%" y="207.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::current_span (10 samples, 0.03%)</title><rect x="99.4810%" y="197" width="0.0287%" height="15" fill="rgb(234,31,38)" fg:x="34696" fg:w="10"/><text x="99.7310%" y="207.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::new_span (56 samples, 0.16%)</title><rect x="99.3520%" y="229" width="0.1606%" height="15" fill="rgb(221,117,51)" fg:x="34651" fg:w="56"/><text x="99.6020%" y="239.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::new_span (41 samples, 0.12%)</title><rect x="99.3950%" y="213" width="0.1176%" height="15" fill="rgb(212,20,18)" fg:x="34666" fg:w="41"/><text x="99.6450%" y="223.50"></text></g><g><title>tailcall`tracing::span::Span::new (75 samples, 0.22%)</title><rect x="99.3033%" y="245" width="0.2150%" height="15" fill="rgb(245,133,36)" fg:x="34634" fg:w="75"/><text x="99.5533%" y="255.50"></text></g><g><title>tailcall`tailcall::core::http::request_handler::handle_request::_{{closure}} (17,409 samples, 49.92%)</title><rect x="49.6287%" y="261" width="49.9154%" height="15" fill="rgb(212,6,19)" fg:x="17309" fg:w="17409"/><text x="49.8787%" y="271.50">tailcall`tailcall::core::http::request_handler::handle_request::_{{closure}}</text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::is_enabled_inner (9 samples, 0.03%)</title><rect x="99.5183%" y="245" width="0.0258%" height="15" fill="rgb(218,1,36)" fg:x="34709" fg:w="9"/><text x="99.7683%" y="255.50"></text></g><g><title>tailcall`tokio::runtime::task::waker::clone_waker (5 samples, 0.01%)</title><rect x="99.5441%" y="261" width="0.0143%" height="15" fill="rgb(246,84,54)" fg:x="34718" fg:w="5"/><text x="99.7941%" y="271.50"></text></g><g><title>tailcall`tracing::__macro_support::__is_enabled (5 samples, 0.01%)</title><rect x="99.5584%" y="261" width="0.0143%" height="15" fill="rgb(242,110,6)" fg:x="34723" fg:w="5"/><text x="99.8084%" y="271.50"></text></g><g><title>tailcall`&lt;hyper::server::conn::upgrades::UpgradeableConnection&lt;I,S,E&gt; as core::future::future::Future&gt;::poll (33,344 samples, 95.60%)</title><rect x="3.9883%" y="277" width="95.6046%" height="15" fill="rgb(214,47,5)" fg:x="1391" fg:w="33344"/><text x="4.2383%" y="287.50">tailcall`&lt;hyper::server::conn::upgrades::UpgradeableConnection&lt;I,S,E&gt; as core::future::future::Future&gt;::poll</text></g><g><title>tailcall`tracing::span::Span::new (7 samples, 0.02%)</title><rect x="99.5728%" y="261" width="0.0201%" height="15" fill="rgb(218,159,25)" fg:x="34728" fg:w="7"/><text x="99.8228%" y="271.50"></text></g><g><title>tailcall`core::task::poll::Poll&lt;core::result::Result&lt;T,E&gt;&gt;::map_err (4 samples, 0.01%)</title><rect x="99.5957%" y="277" width="0.0115%" height="15" fill="rgb(215,211,28)" fg:x="34736" fg:w="4"/><text x="99.8457%" y="287.50"></text></g><g><title>tailcall`hyper::body::body::Body::new_channel (7 samples, 0.02%)</title><rect x="99.6101%" y="277" width="0.0201%" height="15" fill="rgb(238,59,32)" fg:x="34741" fg:w="7"/><text x="99.8601%" y="287.50"></text></g><g><title>tailcall`hyper::body::body::Sender::poll_ready (5 samples, 0.01%)</title><rect x="99.6301%" y="277" width="0.0143%" height="15" fill="rgb(226,82,3)" fg:x="34748" fg:w="5"/><text x="99.8801%" y="287.50"></text></g><g><title>tailcall`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_flush (4 samples, 0.01%)</title><rect x="99.6502%" y="277" width="0.0115%" height="15" fill="rgb(240,164,32)" fg:x="34755" fg:w="4"/><text x="99.9002%" y="287.50"></text></g><g><title>tailcall`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_head (6 samples, 0.02%)</title><rect x="99.6703%" y="277" width="0.0172%" height="15" fill="rgb(232,46,7)" fg:x="34762" fg:w="6"/><text x="99.9203%" y="287.50"></text></g><g><title>tailcall`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_keep_alive (4 samples, 0.01%)</title><rect x="99.6875%" y="277" width="0.0115%" height="15" fill="rgb(229,129,53)" fg:x="34768" fg:w="4"/><text x="99.9375%" y="287.50"></text></g><g><title>tailcall`&lt;hyper::server::server::new_svc::NewSvcTask&lt;I,N,S,E,W&gt; as core::future::future::Future&gt;::poll (33,421 samples, 95.83%)</title><rect x="3.8908%" y="293" width="95.8253%" height="15" fill="rgb(234,188,29)" fg:x="1357" fg:w="33421"/><text x="4.1408%" y="303.50">tailcall`&lt;hyper::server::server::new_svc::NewSvcTask&lt;I,N,S,E,W&gt; as core::future::future::Future&gt;::poll</text></g><g><title>tailcall`tailcall::cli::server::http_server::Server::start::_{{closure}} (4 samples, 0.01%)</title><rect x="99.7190%" y="293" width="0.0115%" height="15" fill="rgb(246,141,4)" fg:x="34779" fg:w="4"/><text x="99.9690%" y="303.50"></text></g><g><title>tailcall`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (6 samples, 0.02%)</title><rect x="99.7305%" y="293" width="0.0172%" height="15" fill="rgb(229,23,39)" fg:x="34783" fg:w="6"/><text x="99.9805%" y="303.50"></text></g><g><title>tailcall`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task::_{{closure}} (6 samples, 0.02%)</title><rect x="99.7477%" y="293" width="0.0172%" height="15" fill="rgb(206,12,3)" fg:x="34789" fg:w="6"/><text x="99.9977%" y="303.50"></text></g><g><title>tailcall`tokio::runtime::scheduler::multi_thread::queue::Local&lt;T&gt;::push_back_or_overflow (5 samples, 0.01%)</title><rect x="99.7678%" y="277" width="0.0143%" height="15" fill="rgb(252,226,20)" fg:x="34796" fg:w="5"/><text x="100.0178%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`kevent (10 samples, 0.03%)</title><rect x="99.8108%" y="261" width="0.0287%" height="15" fill="rgb(216,123,35)" fg:x="34811" fg:w="10"/><text x="100.0608%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (27 samples, 0.08%)</title><rect x="99.8423%" y="245" width="0.0774%" height="15" fill="rgb(212,68,40)" fg:x="34822" fg:w="27"/><text x="100.0923%" y="255.50"></text></g><g><title>tailcall`parking_lot::condvar::Condvar::notify_one_slow (29 samples, 0.08%)</title><rect x="99.8394%" y="261" width="0.0831%" height="15" fill="rgb(254,125,32)" fg:x="34821" fg:w="29"/><text x="100.0894%" y="271.50"></text></g><g><title>tailcall`tokio::runtime::scheduler::multi_thread::queue::Local&lt;T&gt;::push_back_or_overflow (5 samples, 0.01%)</title><rect x="99.9255%" y="261" width="0.0143%" height="15" fill="rgb(253,97,22)" fg:x="34851" fg:w="5"/><text x="100.1755%" y="271.50"></text></g><g><title>tailcall`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (64 samples, 0.18%)</title><rect x="99.7649%" y="293" width="0.1835%" height="15" fill="rgb(241,101,14)" fg:x="34795" fg:w="64"/><text x="100.0149%" y="303.50"></text></g><g><title>tailcall`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task::_{{closure}} (57 samples, 0.16%)</title><rect x="99.7850%" y="277" width="0.1634%" height="15" fill="rgb(238,103,29)" fg:x="34802" fg:w="57"/><text x="100.0350%" y="287.50"></text></g><g><title>tailcall`tokio::runtime::scheduler::multi_thread::worker::Context::run_task (33,697 samples, 96.62%)</title><rect x="3.3632%" y="325" width="96.6167%" height="15" fill="rgb(233,195,47)" fg:x="1173" fg:w="33697"/><text x="3.6132%" y="335.50">tailcall`tokio::runtime::scheduler::multi_thread::worker::Context::run_task</text></g><g><title>tailcall`tokio::runtime::task::raw::poll (33,548 samples, 96.19%)</title><rect x="3.7905%" y="309" width="96.1895%" height="15" fill="rgb(246,218,30)" fg:x="1322" fg:w="33548"/><text x="4.0405%" y="319.50">tailcall`tokio::runtime::task::raw::poll</text></g><g><title>tailcall`tokio::runtime::task::state::State::transition_to_idle (11 samples, 0.03%)</title><rect x="99.9484%" y="293" width="0.0315%" height="15" fill="rgb(219,145,47)" fg:x="34859" fg:w="11"/><text x="100.1984%" y="303.50"></text></g><g><title>tailcall`core::ops::function::FnOnce::call_once{{vtable.shim}} (34,870 samples, 99.98%)</title><rect x="0.0143%" y="373" width="99.9799%" height="15" fill="rgb(243,12,26)" fg:x="5" fg:w="34870"/><text x="0.2643%" y="383.50">tailcall`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>tailcall`std::sys_common::backtrace::__rust_begin_short_backtrace (34,870 samples, 99.98%)</title><rect x="0.0143%" y="357" width="99.9799%" height="15" fill="rgb(214,87,16)" fg:x="5" fg:w="34870"/><text x="0.2643%" y="367.50">tailcall`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>tailcall`tokio::runtime::task::raw::poll (34,861 samples, 99.95%)</title><rect x="0.0401%" y="341" width="99.9541%" height="15" fill="rgb(208,99,42)" fg:x="14" fg:w="34861"/><text x="0.2901%" y="351.50">tailcall`tokio::runtime::task::raw::poll</text></g><g><title>tailcall`tokio::runtime::task::raw::poll (5 samples, 0.01%)</title><rect x="99.9799%" y="325" width="0.0143%" height="15" fill="rgb(253,99,2)" fg:x="34870" fg:w="5"/><text x="100.2299%" y="335.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (34,871 samples, 99.98%)</title><rect x="0.0143%" y="421" width="99.9828%" height="15" fill="rgb(220,168,23)" fg:x="5" fg:w="34871"/><text x="0.2643%" y="431.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (34,871 samples, 99.98%)</title><rect x="0.0143%" y="405" width="99.9828%" height="15" fill="rgb(242,38,24)" fg:x="5" fg:w="34871"/><text x="0.2643%" y="415.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>tailcall`std::sys::pal::unix::thread::Thread::new::thread_start (34,871 samples, 99.98%)</title><rect x="0.0143%" y="389" width="99.9828%" height="15" fill="rgb(225,182,9)" fg:x="5" fg:w="34871"/><text x="0.2643%" y="399.50">tailcall`std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>all (34,877 samples, 100%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(243,178,37)" fg:x="0" fg:w="34877"/><text x="0.2500%" y="447.50"></text></g></svg></svg>
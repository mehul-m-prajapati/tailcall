<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="694" onload="init(evt)" viewBox="0 0 1200 694" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="694" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="677.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="677.00"> </text><svg id="frames" x="10" width="1180" total_samples="100711"><g><title>tailcall`std::sys::pal::unix::time::Timespec::now (11 samples, 0.01%)</title><rect x="0.0487%" y="533" width="0.0109%" height="15" fill="rgb(227,0,7)" fg:x="49" fg:w="11"/><text x="0.2987%" y="543.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (11 samples, 0.01%)</title><rect x="0.0487%" y="517" width="0.0109%" height="15" fill="rgb(217,0,24)" fg:x="49" fg:w="11"/><text x="0.2987%" y="527.50"></text></g><g><title>libsystem_kernel.dylib`kevent (118 samples, 0.12%)</title><rect x="0.0755%" y="501" width="0.1172%" height="15" fill="rgb(221,193,54)" fg:x="76" fg:w="118"/><text x="0.3255%" y="511.50"></text></g><g><title>tailcall`tokio::runtime::io::driver::Driver::turn (42 samples, 0.04%)</title><rect x="0.1986%" y="501" width="0.0417%" height="15" fill="rgb(248,212,6)" fg:x="200" fg:w="42"/><text x="0.4486%" y="511.50"></text></g><g><title>tailcall`tokio::runtime::io::scheduled_io::ScheduledIo::wake (30 samples, 0.03%)</title><rect x="0.2105%" y="485" width="0.0298%" height="15" fill="rgb(208,68,35)" fg:x="212" fg:w="30"/><text x="0.4605%" y="495.50"></text></g><g><title>tailcall`tokio::runtime::task::waker::wake_by_val (15 samples, 0.01%)</title><rect x="0.2254%" y="469" width="0.0149%" height="15" fill="rgb(232,128,0)" fg:x="227" fg:w="15"/><text x="0.4754%" y="479.50"></text></g><g><title>tailcall`tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (193 samples, 0.19%)</title><rect x="0.0616%" y="533" width="0.1916%" height="15" fill="rgb(207,160,47)" fg:x="62" fg:w="193"/><text x="0.3116%" y="543.50"></text></g><g><title>tailcall`tokio::runtime::time::Driver::park_internal (182 samples, 0.18%)</title><rect x="0.0725%" y="517" width="0.1807%" height="15" fill="rgb(228,23,34)" fg:x="73" fg:w="182"/><text x="0.3225%" y="527.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;hyper::client::dispatch::Callback&lt;http::request::Request&lt;reqwest::async_impl::body::ImplStream&gt;,http::response::Response&lt;hyper::body::body::Body&gt;&gt;&gt; (20 samples, 0.02%)</title><rect x="0.4627%" y="437" width="0.0199%" height="15" fill="rgb(218,30,26)" fg:x="466" fg:w="20"/><text x="0.7127%" y="447.50"></text></g><g><title>tailcall`&lt;hyper::proto::h1::dispatch::Client&lt;B&gt; as hyper::proto::h1::dispatch::Dispatch&gt;::recv_msg (58 samples, 0.06%)</title><rect x="0.4419%" y="469" width="0.0576%" height="15" fill="rgb(220,122,19)" fg:x="445" fg:w="58"/><text x="0.6919%" y="479.50"></text></g><g><title>tailcall`hyper::client::dispatch::Callback&lt;T,U&gt;::send (42 samples, 0.04%)</title><rect x="0.4577%" y="453" width="0.0417%" height="15" fill="rgb(250,228,42)" fg:x="461" fg:w="42"/><text x="0.7077%" y="463.50"></text></g><g><title>tailcall`_mi_free_delayed_block (24 samples, 0.02%)</title><rect x="0.5233%" y="405" width="0.0238%" height="15" fill="rgb(240,193,28)" fg:x="527" fg:w="24"/><text x="0.7733%" y="415.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (27 samples, 0.03%)</title><rect x="0.5213%" y="437" width="0.0268%" height="15" fill="rgb(216,20,37)" fg:x="525" fg:w="27"/><text x="0.7713%" y="447.50"></text></g><g><title>tailcall`_mi_malloc_generic (27 samples, 0.03%)</title><rect x="0.5213%" y="421" width="0.0268%" height="15" fill="rgb(206,188,39)" fg:x="525" fg:w="27"/><text x="0.7713%" y="431.50"></text></g><g><title>tailcall`bytes::bytes_mut::BytesMut::split_to (29 samples, 0.03%)</title><rect x="0.5213%" y="453" width="0.0288%" height="15" fill="rgb(217,207,13)" fg:x="525" fg:w="29"/><text x="0.7713%" y="463.50"></text></g><g><title>tailcall`http::header::map::HeaderMap&lt;T&gt;::try_append2 (12 samples, 0.01%)</title><rect x="0.5560%" y="453" width="0.0119%" height="15" fill="rgb(231,73,38)" fg:x="560" fg:w="12"/><text x="0.8060%" y="463.50"></text></g><g><title>tailcall`httparse::ParserConfig::parse_response_with_uninit_headers (24 samples, 0.02%)</title><rect x="0.5878%" y="453" width="0.0238%" height="15" fill="rgb(225,20,46)" fg:x="592" fg:w="24"/><text x="0.8378%" y="463.50"></text></g><g><title>tailcall`httparse::parse_headers_iter_uninit (18 samples, 0.02%)</title><rect x="0.5938%" y="437" width="0.0179%" height="15" fill="rgb(210,31,41)" fg:x="598" fg:w="18"/><text x="0.8438%" y="447.50"></text></g><g><title>tailcall`hyper::headers::content_length_parse_all (16 samples, 0.02%)</title><rect x="0.6226%" y="453" width="0.0159%" height="15" fill="rgb(221,200,47)" fg:x="627" fg:w="16"/><text x="0.8726%" y="463.50"></text></g><g><title>tailcall`&lt;hyper::proto::h1::role::Client as hyper::proto::h1::Http1Transaction&gt;::parse (142 samples, 0.14%)</title><rect x="0.4994%" y="469" width="0.1410%" height="15" fill="rgb(226,26,5)" fg:x="503" fg:w="142"/><text x="0.7494%" y="479.50"></text></g><g><title>tailcall`futures_channel::mpsc::Sender&lt;T&gt;::try_send (14 samples, 0.01%)</title><rect x="0.6583%" y="469" width="0.0139%" height="15" fill="rgb(249,33,26)" fg:x="663" fg:w="14"/><text x="0.9083%" y="479.50"></text></g><g><title>tailcall`hyper::body::body::Body::new_channel (18 samples, 0.02%)</title><rect x="0.6821%" y="469" width="0.0179%" height="15" fill="rgb(235,183,28)" fg:x="687" fg:w="18"/><text x="0.9321%" y="479.50"></text></g><g><title>tailcall`core::fmt::write (11 samples, 0.01%)</title><rect x="0.7457%" y="437" width="0.0109%" height="15" fill="rgb(221,5,38)" fg:x="751" fg:w="11"/><text x="0.9957%" y="447.50"></text></g><g><title>tailcall`&lt;hyper::proto::h1::role::Client as hyper::proto::h1::Http1Transaction&gt;::encode (43 samples, 0.04%)</title><rect x="0.7159%" y="453" width="0.0427%" height="15" fill="rgb(247,18,42)" fg:x="721" fg:w="43"/><text x="0.9659%" y="463.50"></text></g><g><title>tailcall`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::encode_head (66 samples, 0.07%)</title><rect x="0.7060%" y="469" width="0.0655%" height="15" fill="rgb(241,131,45)" fg:x="711" fg:w="66"/><text x="0.9560%" y="479.50"></text></g><g><title>tailcall`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (32 samples, 0.03%)</title><rect x="0.7795%" y="437" width="0.0318%" height="15" fill="rgb(249,31,29)" fg:x="785" fg:w="32"/><text x="1.0295%" y="447.50"></text></g><g><title>tailcall`tokio::runtime::io::registration::Registration::poll_ready (19 samples, 0.02%)</title><rect x="0.7924%" y="421" width="0.0189%" height="15" fill="rgb(225,111,53)" fg:x="798" fg:w="19"/><text x="1.0424%" y="431.50"></text></g><g><title>tailcall`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::force_io_read (48 samples, 0.05%)</title><rect x="0.7715%" y="469" width="0.0477%" height="15" fill="rgb(238,160,17)" fg:x="777" fg:w="48"/><text x="1.0215%" y="479.50"></text></g><g><title>tailcall`hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (45 samples, 0.04%)</title><rect x="0.7745%" y="453" width="0.0447%" height="15" fill="rgb(214,148,48)" fg:x="780" fg:w="45"/><text x="1.0245%" y="463.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (642 samples, 0.64%)</title><rect x="0.8331%" y="453" width="0.6375%" height="15" fill="rgb(232,36,49)" fg:x="839" fg:w="642"/><text x="1.0831%" y="463.50"></text></g><g><title>tailcall`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (12 samples, 0.01%)</title><rect x="1.4705%" y="453" width="0.0119%" height="15" fill="rgb(209,103,24)" fg:x="1481" fg:w="12"/><text x="1.7205%" y="463.50"></text></g><g><title>tailcall`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_flush (667 samples, 0.66%)</title><rect x="0.8212%" y="469" width="0.6623%" height="15" fill="rgb(229,88,8)" fg:x="827" fg:w="667"/><text x="1.0712%" y="479.50"></text></g><g><title>tailcall`_mi_free_delayed_block (36 samples, 0.04%)</title><rect x="1.4954%" y="373" width="0.0357%" height="15" fill="rgb(213,181,19)" fg:x="1506" fg:w="36"/><text x="1.7454%" y="383.50"></text></g><g><title>tailcall`_mi_malloc_generic (49 samples, 0.05%)</title><rect x="1.4934%" y="389" width="0.0487%" height="15" fill="rgb(254,191,54)" fg:x="1504" fg:w="49"/><text x="1.7434%" y="399.50"></text></g><g><title>tailcall`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::maybe_notify (57 samples, 0.06%)</title><rect x="1.4864%" y="453" width="0.0566%" height="15" fill="rgb(241,83,37)" fg:x="1497" fg:w="57"/><text x="1.7364%" y="463.50"></text></g><g><title>tailcall`hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (54 samples, 0.05%)</title><rect x="1.4894%" y="437" width="0.0536%" height="15" fill="rgb(233,36,39)" fg:x="1500" fg:w="54"/><text x="1.7394%" y="447.50"></text></g><g><title>tailcall`bytes::bytes_mut::BytesMut::reserve_inner (51 samples, 0.05%)</title><rect x="1.4924%" y="421" width="0.0506%" height="15" fill="rgb(226,3,54)" fg:x="1503" fg:w="51"/><text x="1.7424%" y="431.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (50 samples, 0.05%)</title><rect x="1.4934%" y="405" width="0.0496%" height="15" fill="rgb(245,192,40)" fg:x="1504" fg:w="50"/><text x="1.7434%" y="415.50"></text></g><g><title>tailcall`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (67 samples, 0.07%)</title><rect x="1.4835%" y="469" width="0.0665%" height="15" fill="rgb(238,167,29)" fg:x="1494" fg:w="67"/><text x="1.7335%" y="479.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (2,170 samples, 2.15%)</title><rect x="1.5649%" y="453" width="2.1547%" height="15" fill="rgb(232,182,51)" fg:x="1576" fg:w="2170"/><text x="1.8149%" y="463.50">l..</text></g><g><title>tailcall`hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (2,192 samples, 2.18%)</title><rect x="1.5559%" y="469" width="2.1765%" height="15" fill="rgb(231,60,39)" fg:x="1567" fg:w="2192"/><text x="1.8059%" y="479.50">t..</text></g><g><title>tailcall`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (13 samples, 0.01%)</title><rect x="3.7196%" y="453" width="0.0129%" height="15" fill="rgb(208,69,12)" fg:x="3746" fg:w="13"/><text x="3.9696%" y="463.50"></text></g><g><title>tailcall`tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (40 samples, 0.04%)</title><rect x="3.7374%" y="469" width="0.0397%" height="15" fill="rgb(235,93,37)" fg:x="3764" fg:w="40"/><text x="3.9874%" y="479.50"></text></g><g><title>tailcall`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (29 samples, 0.03%)</title><rect x="3.7483%" y="453" width="0.0288%" height="15" fill="rgb(213,116,39)" fg:x="3775" fg:w="29"/><text x="3.9983%" y="463.50"></text></g><g><title>tailcall`hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop (3,447 samples, 3.42%)</title><rect x="0.3585%" y="485" width="3.4227%" height="15" fill="rgb(222,207,29)" fg:x="361" fg:w="3447"/><text x="0.6085%" y="495.50">tai..</text></g><g><title>tailcall`&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (3,490 samples, 3.47%)</title><rect x="0.3217%" y="501" width="3.4654%" height="15" fill="rgb(206,96,30)" fg:x="324" fg:w="3490"/><text x="0.5717%" y="511.50">tai..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (76 samples, 0.08%)</title><rect x="3.8606%" y="469" width="0.0755%" height="15" fill="rgb(218,138,4)" fg:x="3888" fg:w="76"/><text x="4.1106%" y="479.50"></text></g><g><title>tailcall`&lt;hyper::proto::h1::dispatch::Server&lt;S,hyper::body::body::Body&gt; as hyper::proto::h1::dispatch::Dispatch&gt;::recv_msg (17 samples, 0.02%)</title><rect x="3.9410%" y="469" width="0.0169%" height="15" fill="rgb(250,191,14)" fg:x="3969" fg:w="17"/><text x="4.1910%" y="479.50"></text></g><g><title>tailcall`futures_channel::mpsc::Sender&lt;T&gt;::try_send (20 samples, 0.02%)</title><rect x="3.9678%" y="469" width="0.0199%" height="15" fill="rgb(239,60,40)" fg:x="3996" fg:w="20"/><text x="4.2178%" y="479.50"></text></g><g><title>tailcall`hyper::body::body::Body::new_channel (18 samples, 0.02%)</title><rect x="3.9876%" y="469" width="0.0179%" height="15" fill="rgb(206,27,48)" fg:x="4016" fg:w="18"/><text x="4.2376%" y="479.50"></text></g><g><title>libsystem_c.dylib`gettimeofday (26 samples, 0.03%)</title><rect x="4.0204%" y="421" width="0.0258%" height="15" fill="rgb(225,35,8)" fg:x="4049" fg:w="26"/><text x="4.2704%" y="431.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (25 samples, 0.02%)</title><rect x="4.0214%" y="405" width="0.0248%" height="15" fill="rgb(250,213,24)" fg:x="4050" fg:w="25"/><text x="4.2714%" y="415.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (33 samples, 0.03%)</title><rect x="4.0174%" y="437" width="0.0328%" height="15" fill="rgb(247,123,22)" fg:x="4046" fg:w="33"/><text x="4.2674%" y="447.50"></text></g><g><title>tailcall`hyper::common::date::CachedDate::check (38 samples, 0.04%)</title><rect x="4.0135%" y="469" width="0.0377%" height="15" fill="rgb(231,138,38)" fg:x="4042" fg:w="38"/><text x="4.2635%" y="479.50"></text></g><g><title>tailcall`std::sys::pal::unix::time::Timespec::now (34 samples, 0.03%)</title><rect x="4.0174%" y="453" width="0.0338%" height="15" fill="rgb(231,145,46)" fg:x="4046" fg:w="34"/><text x="4.2674%" y="463.50"></text></g><g><title>tailcall`hyper::proto::h1::role::encode_headers (18 samples, 0.02%)</title><rect x="4.0651%" y="453" width="0.0179%" height="15" fill="rgb(251,118,11)" fg:x="4094" fg:w="18"/><text x="4.3151%" y="463.50"></text></g><g><title>tailcall`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::encode_head (34 samples, 0.03%)</title><rect x="4.0512%" y="469" width="0.0338%" height="15" fill="rgb(217,147,25)" fg:x="4080" fg:w="34"/><text x="4.3012%" y="479.50"></text></g><g><title>libsystem_kernel.dylib`writev (1,764 samples, 1.75%)</title><rect x="4.1068%" y="453" width="1.7515%" height="15" fill="rgb(247,81,37)" fg:x="4136" fg:w="1764"/><text x="4.3568%" y="463.50"></text></g><g><title>tailcall`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_flush (1,814 samples, 1.80%)</title><rect x="4.0850%" y="469" width="1.8012%" height="15" fill="rgb(209,12,38)" fg:x="4114" fg:w="1814"/><text x="4.3350%" y="479.50">t..</text></g><g><title>tailcall`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (15 samples, 0.01%)</title><rect x="5.8861%" y="469" width="0.0149%" height="15" fill="rgb(227,1,9)" fg:x="5928" fg:w="15"/><text x="6.1361%" y="479.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (683 samples, 0.68%)</title><rect x="5.9398%" y="437" width="0.6782%" height="15" fill="rgb(248,47,43)" fg:x="5982" fg:w="683"/><text x="6.1898%" y="447.50"></text></g><g><title>tailcall`hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (699 samples, 0.69%)</title><rect x="5.9308%" y="453" width="0.6941%" height="15" fill="rgb(221,10,30)" fg:x="5973" fg:w="699"/><text x="6.1808%" y="463.50"></text></g><g><title>tailcall`bytes::bytes_mut::BytesMut::split_to (14 samples, 0.01%)</title><rect x="6.6696%" y="437" width="0.0139%" height="15" fill="rgb(210,229,1)" fg:x="6717" fg:w="14"/><text x="6.9196%" y="447.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (11 samples, 0.01%)</title><rect x="6.6726%" y="421" width="0.0109%" height="15" fill="rgb(222,148,37)" fg:x="6720" fg:w="11"/><text x="6.9226%" y="431.50"></text></g><g><title>tailcall`http::header::name::HeaderName::from_bytes (11 samples, 0.01%)</title><rect x="6.6984%" y="437" width="0.0109%" height="15" fill="rgb(234,67,33)" fg:x="6746" fg:w="11"/><text x="6.9484%" y="447.50"></text></g><g><title>tailcall`http::header::name::StandardHeader::from_bytes (20 samples, 0.02%)</title><rect x="6.7093%" y="437" width="0.0199%" height="15" fill="rgb(247,98,35)" fg:x="6757" fg:w="20"/><text x="6.9593%" y="447.50"></text></g><g><title>tailcall`httparse::parse_headers_iter_uninit (15 samples, 0.01%)</title><rect x="6.7381%" y="437" width="0.0149%" height="15" fill="rgb(247,138,52)" fg:x="6786" fg:w="15"/><text x="6.9881%" y="447.50"></text></g><g><title>tailcall`hyper::proto::h1::role::parse_headers (136 samples, 0.14%)</title><rect x="6.6249%" y="453" width="0.1350%" height="15" fill="rgb(213,79,30)" fg:x="6672" fg:w="136"/><text x="6.8749%" y="463.50"></text></g><g><title>tailcall`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_head (867 samples, 0.86%)</title><rect x="5.9010%" y="469" width="0.8609%" height="15" fill="rgb(246,177,23)" fg:x="5943" fg:w="867"/><text x="6.1510%" y="479.50"></text></g><g><title>tailcall`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (19 samples, 0.02%)</title><rect x="6.7689%" y="421" width="0.0189%" height="15" fill="rgb(230,62,27)" fg:x="6817" fg:w="19"/><text x="7.0189%" y="431.50"></text></g><g><title>tailcall`_mi_free_delayed_block (23 samples, 0.02%)</title><rect x="6.7937%" y="373" width="0.0228%" height="15" fill="rgb(216,154,8)" fg:x="6842" fg:w="23"/><text x="7.0437%" y="383.50"></text></g><g><title>tailcall`_mi_malloc_generic (34 samples, 0.03%)</title><rect x="6.7887%" y="389" width="0.0338%" height="15" fill="rgb(244,35,45)" fg:x="6837" fg:w="34"/><text x="7.0387%" y="399.50"></text></g><g><title>tailcall`bytes::bytes_mut::BytesMut::reserve_inner (36 samples, 0.04%)</title><rect x="6.7877%" y="421" width="0.0357%" height="15" fill="rgb(251,115,12)" fg:x="6836" fg:w="36"/><text x="7.0377%" y="431.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (36 samples, 0.04%)</title><rect x="6.7877%" y="405" width="0.0357%" height="15" fill="rgb(240,54,50)" fg:x="6836" fg:w="36"/><text x="7.0377%" y="415.50"></text></g><g><title>tailcall`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::force_io_read (64 samples, 0.06%)</title><rect x="6.7619%" y="453" width="0.0635%" height="15" fill="rgb(233,84,52)" fg:x="6810" fg:w="64"/><text x="7.0119%" y="463.50"></text></g><g><title>tailcall`hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (60 samples, 0.06%)</title><rect x="6.7659%" y="437" width="0.0596%" height="15" fill="rgb(207,117,47)" fg:x="6814" fg:w="60"/><text x="7.0159%" y="447.50"></text></g><g><title>tailcall`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_keep_alive (66 samples, 0.07%)</title><rect x="6.7619%" y="469" width="0.0655%" height="15" fill="rgb(249,43,39)" fg:x="6810" fg:w="66"/><text x="7.0119%" y="479.50"></text></g><g><title>tailcall`tailcall::core::http::request_handler::handle_request::_{{closure}} (15 samples, 0.01%)</title><rect x="6.8374%" y="469" width="0.0149%" height="15" fill="rgb(209,38,44)" fg:x="6886" fg:w="15"/><text x="7.0874%" y="479.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (22 samples, 0.02%)</title><rect x="6.8751%" y="437" width="0.0218%" height="15" fill="rgb(236,212,23)" fg:x="6924" fg:w="22"/><text x="7.1251%" y="447.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::enter (14 samples, 0.01%)</title><rect x="6.8970%" y="437" width="0.0139%" height="15" fill="rgb(242,79,21)" fg:x="6946" fg:w="14"/><text x="7.1470%" y="447.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::is_enabled_inner (43 samples, 0.04%)</title><rect x="6.9109%" y="437" width="0.0427%" height="15" fill="rgb(211,96,35)" fg:x="6960" fg:w="43"/><text x="7.1609%" y="447.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::span (28 samples, 0.03%)</title><rect x="6.9258%" y="421" width="0.0278%" height="15" fill="rgb(253,215,40)" fg:x="6975" fg:w="28"/><text x="7.1758%" y="431.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (24 samples, 0.02%)</title><rect x="6.9297%" y="405" width="0.0238%" height="15" fill="rgb(211,81,21)" fg:x="6979" fg:w="24"/><text x="7.1797%" y="415.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::enter (93 samples, 0.09%)</title><rect x="6.8662%" y="453" width="0.0923%" height="15" fill="rgb(208,190,38)" fg:x="6915" fg:w="93"/><text x="7.1162%" y="463.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (14 samples, 0.01%)</title><rect x="6.9635%" y="437" width="0.0139%" height="15" fill="rgb(235,213,38)" fg:x="7013" fg:w="14"/><text x="7.2135%" y="447.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::exit (32 samples, 0.03%)</title><rect x="6.9585%" y="453" width="0.0318%" height="15" fill="rgb(237,122,38)" fg:x="7008" fg:w="32"/><text x="7.2085%" y="463.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::is_enabled_inner (13 samples, 0.01%)</title><rect x="6.9774%" y="437" width="0.0129%" height="15" fill="rgb(244,218,35)" fg:x="7027" fg:w="13"/><text x="7.2274%" y="447.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (15 samples, 0.01%)</title><rect x="6.9903%" y="453" width="0.0149%" height="15" fill="rgb(240,68,47)" fg:x="7040" fg:w="15"/><text x="7.2403%" y="463.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;tracing::instrument::Instrumented&lt;tailcall::core::http::request_handler::handle_request&lt;tailcall::core::async_graphql_hyper::GraphQLRequest&gt;::{{closure}}::{{closure}}&gt;&gt; (19 samples, 0.02%)</title><rect x="7.0112%" y="453" width="0.0189%" height="15" fill="rgb(210,16,53)" fg:x="7061" fg:w="19"/><text x="7.2612%" y="463.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (22 samples, 0.02%)</title><rect x="7.0975%" y="421" width="0.0218%" height="15" fill="rgb(235,124,12)" fg:x="7148" fg:w="22"/><text x="7.3475%" y="431.50"></text></g><g><title>tailcall`tailcall::core::http::request_handler::graphql_request::_{{closure}} (18 samples, 0.02%)</title><rect x="7.1293%" y="421" width="0.0179%" height="15" fill="rgb(224,169,11)" fg:x="7180" fg:w="18"/><text x="7.3793%" y="431.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (43 samples, 0.04%)</title><rect x="7.1531%" y="405" width="0.0427%" height="15" fill="rgb(250,166,2)" fg:x="7204" fg:w="43"/><text x="7.4031%" y="415.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (21 samples, 0.02%)</title><rect x="7.2087%" y="389" width="0.0209%" height="15" fill="rgb(242,216,29)" fg:x="7260" fg:w="21"/><text x="7.4587%" y="399.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (11 samples, 0.01%)</title><rect x="7.2187%" y="373" width="0.0109%" height="15" fill="rgb(230,116,27)" fg:x="7270" fg:w="11"/><text x="7.4687%" y="383.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::enter (16 samples, 0.02%)</title><rect x="7.2296%" y="389" width="0.0159%" height="15" fill="rgb(228,99,48)" fg:x="7281" fg:w="16"/><text x="7.4796%" y="399.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::span (20 samples, 0.02%)</title><rect x="7.2554%" y="373" width="0.0199%" height="15" fill="rgb(253,11,6)" fg:x="7307" fg:w="20"/><text x="7.5054%" y="383.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (17 samples, 0.02%)</title><rect x="7.2584%" y="357" width="0.0169%" height="15" fill="rgb(247,143,39)" fg:x="7310" fg:w="17"/><text x="7.5084%" y="367.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::is_enabled_inner (33 samples, 0.03%)</title><rect x="7.2455%" y="389" width="0.0328%" height="15" fill="rgb(236,97,10)" fg:x="7297" fg:w="33"/><text x="7.4955%" y="399.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::enter (76 samples, 0.08%)</title><rect x="7.2068%" y="405" width="0.0755%" height="15" fill="rgb(233,208,19)" fg:x="7258" fg:w="76"/><text x="7.4568%" y="415.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (11 samples, 0.01%)</title><rect x="7.3279%" y="357" width="0.0109%" height="15" fill="rgb(216,164,2)" fg:x="7380" fg:w="11"/><text x="7.5779%" y="367.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (44 samples, 0.04%)</title><rect x="7.2961%" y="389" width="0.0437%" height="15" fill="rgb(220,129,5)" fg:x="7348" fg:w="44"/><text x="7.5461%" y="399.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (20 samples, 0.02%)</title><rect x="7.3200%" y="373" width="0.0199%" height="15" fill="rgb(242,17,10)" fg:x="7372" fg:w="20"/><text x="7.5700%" y="383.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::span (13 samples, 0.01%)</title><rect x="7.3488%" y="373" width="0.0129%" height="15" fill="rgb(242,107,0)" fg:x="7401" fg:w="13"/><text x="7.5988%" y="383.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::is_enabled_inner (22 samples, 0.02%)</title><rect x="7.3418%" y="389" width="0.0218%" height="15" fill="rgb(251,28,31)" fg:x="7394" fg:w="22"/><text x="7.5918%" y="399.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::exit (85 samples, 0.08%)</title><rect x="7.2822%" y="405" width="0.0844%" height="15" fill="rgb(233,223,10)" fg:x="7334" fg:w="85"/><text x="7.5322%" y="415.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (22 samples, 0.02%)</title><rect x="7.3676%" y="405" width="0.0218%" height="15" fill="rgb(215,21,27)" fg:x="7420" fg:w="22"/><text x="7.6176%" y="415.50"></text></g><g><title>tailcall`mi_free_block_delayed_mt (16 samples, 0.02%)</title><rect x="7.4053%" y="405" width="0.0159%" height="15" fill="rgb(232,23,21)" fg:x="7458" fg:w="16"/><text x="7.6553%" y="415.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (350 samples, 0.35%)</title><rect x="7.5573%" y="389" width="0.3475%" height="15" fill="rgb(244,5,23)" fg:x="7611" fg:w="350"/><text x="7.8073%" y="399.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as core::fmt::Display&gt;::fmt (31 samples, 0.03%)</title><rect x="7.9048%" y="389" width="0.0308%" height="15" fill="rgb(226,81,46)" fg:x="7961" fg:w="31"/><text x="8.1548%" y="399.50"></text></g><g><title>tailcall`core::fmt::write (24 samples, 0.02%)</title><rect x="7.9117%" y="373" width="0.0238%" height="15" fill="rgb(247,70,30)" fg:x="7968" fg:w="24"/><text x="8.1617%" y="383.50"></text></g><g><title>tailcall`&lt;serde_json::number::Number as core::fmt::Display&gt;::fmt (21 samples, 0.02%)</title><rect x="7.9147%" y="357" width="0.0209%" height="15" fill="rgb(212,68,19)" fg:x="7971" fg:w="21"/><text x="8.1647%" y="367.50"></text></g><g><title>tailcall`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (16 samples, 0.02%)</title><rect x="7.9852%" y="357" width="0.0159%" height="15" fill="rgb(240,187,13)" fg:x="8042" fg:w="16"/><text x="8.2352%" y="367.50"></text></g><g><title>tailcall`serde::de::MapAccess::next_entry (51 samples, 0.05%)</title><rect x="7.9743%" y="373" width="0.0506%" height="15" fill="rgb(223,113,26)" fg:x="8031" fg:w="51"/><text x="8.2243%" y="383.50"></text></g><g><title>tailcall`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (98 samples, 0.10%)</title><rect x="7.9356%" y="389" width="0.0973%" height="15" fill="rgb(206,192,2)" fg:x="7992" fg:w="98"/><text x="8.1856%" y="399.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (52 samples, 0.05%)</title><rect x="8.1858%" y="357" width="0.0516%" height="15" fill="rgb(241,108,4)" fg:x="8244" fg:w="52"/><text x="8.4358%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (16 samples, 0.02%)</title><rect x="8.2851%" y="341" width="0.0159%" height="15" fill="rgb(247,173,49)" fg:x="8344" fg:w="16"/><text x="8.5351%" y="351.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (239 samples, 0.24%)</title><rect x="8.3447%" y="309" width="0.2373%" height="15" fill="rgb(224,114,35)" fg:x="8404" fg:w="239"/><text x="8.5947%" y="319.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (30 samples, 0.03%)</title><rect x="8.7498%" y="293" width="0.0298%" height="15" fill="rgb(245,159,27)" fg:x="8812" fg:w="30"/><text x="8.9998%" y="303.50"></text></g><g><title>tailcall`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (18 samples, 0.02%)</title><rect x="8.7796%" y="293" width="0.0179%" height="15" fill="rgb(245,172,44)" fg:x="8842" fg:w="18"/><text x="9.0296%" y="303.50"></text></g><g><title>tailcall`mi_find_page (13 samples, 0.01%)</title><rect x="8.8024%" y="261" width="0.0129%" height="15" fill="rgb(236,23,11)" fg:x="8865" fg:w="13"/><text x="9.0524%" y="271.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (22 samples, 0.02%)</title><rect x="8.7975%" y="293" width="0.0218%" height="15" fill="rgb(205,117,38)" fg:x="8860" fg:w="22"/><text x="9.0475%" y="303.50"></text></g><g><title>tailcall`_mi_malloc_generic (22 samples, 0.02%)</title><rect x="8.7975%" y="277" width="0.0218%" height="15" fill="rgb(237,72,25)" fg:x="8860" fg:w="22"/><text x="9.0475%" y="287.50"></text></g><g><title>tailcall`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (320 samples, 0.32%)</title><rect x="8.5840%" y="309" width="0.3177%" height="15" fill="rgb(244,70,9)" fg:x="8645" fg:w="320"/><text x="8.8340%" y="319.50"></text></g><g><title>tailcall`mi_malloc_aligned (83 samples, 0.08%)</title><rect x="8.8193%" y="293" width="0.0824%" height="15" fill="rgb(217,125,39)" fg:x="8882" fg:w="83"/><text x="9.0693%" y="303.50"></text></g><g><title>tailcall`DYLD-STUB$$memcpy (11 samples, 0.01%)</title><rect x="8.9017%" y="309" width="0.0109%" height="15" fill="rgb(235,36,10)" fg:x="8965" fg:w="11"/><text x="9.1517%" y="319.50"></text></g><g><title>tailcall`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (599 samples, 0.59%)</title><rect x="8.3268%" y="325" width="0.5948%" height="15" fill="rgb(251,123,47)" fg:x="8386" fg:w="599"/><text x="8.5768%" y="335.50"></text></g><g><title>tailcall`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (629 samples, 0.62%)</title><rect x="8.3040%" y="341" width="0.6246%" height="15" fill="rgb(221,13,13)" fg:x="8363" fg:w="629"/><text x="8.5540%" y="351.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (25 samples, 0.02%)</title><rect x="8.9424%" y="325" width="0.0248%" height="15" fill="rgb(238,131,9)" fg:x="9006" fg:w="25"/><text x="9.1924%" y="335.50"></text></g><g><title>tailcall`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (30 samples, 0.03%)</title><rect x="9.0030%" y="309" width="0.0298%" height="15" fill="rgb(211,50,8)" fg:x="9067" fg:w="30"/><text x="9.2530%" y="319.50"></text></g><g><title>tailcall`&lt;tailcall::core::http::request_template::RequestTemplate as core::clone::Clone&gt;::clone (88 samples, 0.09%)</title><rect x="8.9712%" y="325" width="0.0874%" height="15" fill="rgb(245,182,24)" fg:x="9035" fg:w="88"/><text x="9.2212%" y="335.50"></text></g><g><title>tailcall`mi_malloc_aligned (20 samples, 0.02%)</title><rect x="9.0387%" y="309" width="0.0199%" height="15" fill="rgb(242,14,37)" fg:x="9103" fg:w="20"/><text x="9.2887%" y="319.50"></text></g><g><title>tailcall`&lt;tailcall::core::ir::model::IO as core::clone::Clone&gt;::clone (122 samples, 0.12%)</title><rect x="8.9384%" y="341" width="0.1211%" height="15" fill="rgb(246,228,12)" fg:x="9002" fg:w="122"/><text x="9.1884%" y="351.50"></text></g><g><title>tailcall`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (833 samples, 0.83%)</title><rect x="8.2474%" y="357" width="0.8271%" height="15" fill="rgb(213,55,15)" fg:x="8306" fg:w="833"/><text x="8.4974%" y="367.50"></text></g><g><title>tailcall`mi_malloc_aligned (11 samples, 0.01%)</title><rect x="9.0636%" y="341" width="0.0109%" height="15" fill="rgb(209,9,3)" fg:x="9128" fg:w="11"/><text x="9.3136%" y="351.50"></text></g><g><title>tailcall`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (24 samples, 0.02%)</title><rect x="9.0765%" y="357" width="0.0238%" height="15" fill="rgb(230,59,30)" fg:x="9141" fg:w="24"/><text x="9.3265%" y="367.50"></text></g><g><title>tailcall`mi_free (19 samples, 0.02%)</title><rect x="9.1360%" y="357" width="0.0189%" height="15" fill="rgb(209,121,21)" fg:x="9201" fg:w="19"/><text x="9.3860%" y="367.50"></text></g><g><title>tailcall`mi_free_block_delayed_mt (23 samples, 0.02%)</title><rect x="9.1549%" y="357" width="0.0228%" height="15" fill="rgb(220,109,13)" fg:x="9220" fg:w="23"/><text x="9.4049%" y="367.50"></text></g><g><title>tailcall`mi_free_block_mt (20 samples, 0.02%)</title><rect x="9.1777%" y="357" width="0.0199%" height="15" fill="rgb(232,18,1)" fg:x="9243" fg:w="20"/><text x="9.4277%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (21 samples, 0.02%)</title><rect x="9.3227%" y="341" width="0.0209%" height="15" fill="rgb(215,41,42)" fg:x="9389" fg:w="21"/><text x="9.5727%" y="351.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as core::clone::Clone&gt;::clone (12 samples, 0.01%)</title><rect x="9.3495%" y="341" width="0.0119%" height="15" fill="rgb(224,123,36)" fg:x="9416" fg:w="12"/><text x="9.5995%" y="351.50"></text></g><g><title>tailcall`&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (16 samples, 0.02%)</title><rect x="9.4170%" y="261" width="0.0159%" height="15" fill="rgb(240,125,3)" fg:x="9484" fg:w="16"/><text x="9.6670%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (19 samples, 0.02%)</title><rect x="9.4548%" y="229" width="0.0189%" height="15" fill="rgb(205,98,50)" fg:x="9522" fg:w="19"/><text x="9.7048%" y="239.50"></text></g><g><title>tailcall`&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (35 samples, 0.03%)</title><rect x="9.4736%" y="229" width="0.0348%" height="15" fill="rgb(205,185,37)" fg:x="9541" fg:w="35"/><text x="9.7236%" y="239.50"></text></g><g><title>tailcall`&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (237 samples, 0.24%)</title><rect x="9.5461%" y="213" width="0.2353%" height="15" fill="rgb(238,207,15)" fg:x="9614" fg:w="237"/><text x="9.7961%" y="223.50"></text></g><g><title>tailcall`&lt;serde_json::number::Number as serde::ser::Serialize&gt;::serialize (171 samples, 0.17%)</title><rect x="9.7815%" y="213" width="0.1698%" height="15" fill="rgb(213,199,42)" fg:x="9851" fg:w="171"/><text x="10.0315%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (701 samples, 0.70%)</title><rect x="10.2998%" y="197" width="0.6961%" height="15" fill="rgb(235,201,11)" fg:x="10373" fg:w="701"/><text x="10.5498%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (418 samples, 0.42%)</title><rect x="16.6298%" y="149" width="0.4150%" height="15" fill="rgb(207,46,11)" fg:x="16748" fg:w="418"/><text x="16.8798%" y="159.50"></text></g><g><title>tailcall`_mi_free_delayed_block (87 samples, 0.09%)</title><rect x="17.0667%" y="117" width="0.0864%" height="15" fill="rgb(241,35,35)" fg:x="17188" fg:w="87"/><text x="17.3167%" y="127.50"></text></g><g><title>tailcall`mi_find_page (49 samples, 0.05%)</title><rect x="17.1550%" y="117" width="0.0487%" height="15" fill="rgb(243,32,47)" fg:x="17277" fg:w="49"/><text x="17.4050%" y="127.50"></text></g><g><title>tailcall`mi_page_fresh_alloc (21 samples, 0.02%)</title><rect x="17.1828%" y="101" width="0.0209%" height="15" fill="rgb(247,202,23)" fg:x="17305" fg:w="21"/><text x="17.4328%" y="111.50"></text></g><g><title>tailcall`mi_segments_page_alloc (21 samples, 0.02%)</title><rect x="17.1828%" y="85" width="0.0209%" height="15" fill="rgb(219,102,11)" fg:x="17305" fg:w="21"/><text x="17.4328%" y="95.50"></text></g><g><title>tailcall`mi_segment_try_purge (13 samples, 0.01%)</title><rect x="17.1908%" y="69" width="0.0129%" height="15" fill="rgb(243,110,44)" fg:x="17313" fg:w="13"/><text x="17.4408%" y="79.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (11 samples, 0.01%)</title><rect x="17.1928%" y="53" width="0.0109%" height="15" fill="rgb(222,74,54)" fg:x="17315" fg:w="11"/><text x="17.4428%" y="63.50"></text></g><g><title>tailcall`_mi_malloc_generic (145 samples, 0.14%)</title><rect x="17.0627%" y="133" width="0.1440%" height="15" fill="rgb(216,99,12)" fg:x="17184" fg:w="145"/><text x="17.3127%" y="143.50"></text></g><g><title>tailcall`_mi_heap_realloc_zero (164 samples, 0.16%)</title><rect x="17.0458%" y="149" width="0.1628%" height="15" fill="rgb(226,22,26)" fg:x="17167" fg:w="164"/><text x="17.2958%" y="159.50"></text></g><g><title>tailcall`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (619 samples, 0.61%)</title><rect x="16.6020%" y="181" width="0.6146%" height="15" fill="rgb(217,163,10)" fg:x="16720" fg:w="619"/><text x="16.8520%" y="191.50"></text></g><g><title>tailcall`alloc::raw_vec::finish_grow (593 samples, 0.59%)</title><rect x="16.6278%" y="165" width="0.5888%" height="15" fill="rgb(213,25,53)" fg:x="16746" fg:w="593"/><text x="16.8778%" y="175.50"></text></g><g><title>tailcall`&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (6,267 samples, 6.22%)</title><rect x="10.9958%" y="197" width="6.2228%" height="15" fill="rgb(252,105,26)" fg:x="11074" fg:w="6267"/><text x="11.2458%" y="207.50">tailcall..</text></g><g><title>tailcall`ryu::pretty::format64 (1,554 samples, 1.54%)</title><rect x="17.4797%" y="181" width="1.5430%" height="15" fill="rgb(220,39,43)" fg:x="17604" fg:w="1554"/><text x="17.7297%" y="191.50"></text></g><g><title>tailcall`&lt;serde_json::number::Number as serde::ser::Serialize&gt;::serialize (1,880 samples, 1.87%)</title><rect x="17.2186%" y="197" width="1.8667%" height="15" fill="rgb(229,68,48)" fg:x="17341" fg:w="1880"/><text x="17.4686%" y="207.50">t..</text></g><g><title>tailcall`ryu::pretty::mantissa::write_mantissa_long (63 samples, 0.06%)</title><rect x="19.0227%" y="181" width="0.0626%" height="15" fill="rgb(252,8,32)" fg:x="19158" fg:w="63"/><text x="19.2727%" y="191.50"></text></g><g><title>tailcall`DYLD-STUB$$memcpy (137 samples, 0.14%)</title><rect x="19.0853%" y="197" width="0.1360%" height="15" fill="rgb(223,20,43)" fg:x="19221" fg:w="137"/><text x="19.3353%" y="207.50"></text></g><g><title>tailcall`async_graphql_value::value_serde::_&lt;impl serde::ser::Serialize for async_graphql_value::ConstValue&gt;::serialize (400 samples, 0.40%)</title><rect x="19.2253%" y="197" width="0.3972%" height="15" fill="rgb(229,81,49)" fg:x="19362" fg:w="400"/><text x="19.4753%" y="207.50"></text></g><g><title>tailcall`async_graphql::response::_::_&lt;impl serde::ser::Serialize for async_graphql::response::Response&gt;::serialize (10,340 samples, 10.27%)</title><rect x="9.3743%" y="325" width="10.2670%" height="15" fill="rgb(236,28,36)" fg:x="9441" fg:w="10340"/><text x="9.6243%" y="335.50">tailcall`async_..</text></g><g><title>tailcall`async_graphql_value::value_serde::_&lt;impl serde::ser::Serialize for async_graphql_value::ConstValue&gt;::serialize (10,331 samples, 10.26%)</title><rect x="9.3833%" y="309" width="10.2581%" height="15" fill="rgb(249,185,26)" fg:x="9450" fg:w="10331"/><text x="9.6333%" y="319.50">tailcall`async_..</text></g><g><title>tailcall`async_graphql_value::value_serde::_&lt;impl serde::ser::Serialize for async_graphql_value::ConstValue&gt;::serialize (10,313 samples, 10.24%)</title><rect x="9.4012%" y="293" width="10.2402%" height="15" fill="rgb(249,174,33)" fg:x="9468" fg:w="10313"/><text x="9.6512%" y="303.50">tailcall`async_..</text></g><g><title>tailcall`async_graphql_value::value_serde::_&lt;impl serde::ser::Serialize for async_graphql_value::ConstValue&gt;::serialize (10,304 samples, 10.23%)</title><rect x="9.4101%" y="277" width="10.2313%" height="15" fill="rgb(233,201,37)" fg:x="9477" fg:w="10304"/><text x="9.6601%" y="287.50">tailcall`async_..</text></g><g><title>tailcall`async_graphql_value::value_serde::_&lt;impl serde::ser::Serialize for async_graphql_value::ConstValue&gt;::serialize (10,281 samples, 10.21%)</title><rect x="9.4329%" y="261" width="10.2084%" height="15" fill="rgb(221,78,26)" fg:x="9500" fg:w="10281"/><text x="9.6829%" y="271.50">tailcall`async_..</text></g><g><title>tailcall`async_graphql_value::value_serde::_&lt;impl serde::ser::Serialize for async_graphql_value::ConstValue&gt;::serialize (10,267 samples, 10.19%)</title><rect x="9.4468%" y="245" width="10.1945%" height="15" fill="rgb(250,127,30)" fg:x="9514" fg:w="10267"/><text x="9.6968%" y="255.50">tailcall`async_..</text></g><g><title>tailcall`async_graphql_value::value_serde::_&lt;impl serde::ser::Serialize for async_graphql_value::ConstValue&gt;::serialize (10,203 samples, 10.13%)</title><rect x="9.5104%" y="229" width="10.1310%" height="15" fill="rgb(230,49,44)" fg:x="9578" fg:w="10203"/><text x="9.7604%" y="239.50">tailcall`async_..</text></g><g><title>tailcall`async_graphql_value::value_serde::_&lt;impl serde::ser::Serialize for async_graphql_value::ConstValue&gt;::serialize (9,759 samples, 9.69%)</title><rect x="9.9512%" y="213" width="9.6901%" height="15" fill="rgb(229,67,23)" fg:x="10022" fg:w="9759"/><text x="10.2012%" y="223.50">tailcall`async..</text></g><g><title>tailcall`ryu::pretty::format64 (19 samples, 0.02%)</title><rect x="19.6225%" y="197" width="0.0189%" height="15" fill="rgb(249,83,47)" fg:x="19762" fg:w="19"/><text x="19.8725%" y="207.50"></text></g><g><title>tailcall`_mi_page_free (13 samples, 0.01%)</title><rect x="19.6811%" y="213" width="0.0129%" height="15" fill="rgb(215,43,3)" fg:x="19821" fg:w="13"/><text x="19.9311%" y="223.50"></text></g><g><title>tailcall`mi_segment_page_clear (13 samples, 0.01%)</title><rect x="19.6811%" y="197" width="0.0129%" height="15" fill="rgb(238,154,13)" fg:x="19821" fg:w="13"/><text x="19.9311%" y="207.50"></text></g><g><title>tailcall`alloc::sync::Arc&lt;T,A&gt;::drop_slow (263 samples, 0.26%)</title><rect x="19.6950%" y="213" width="0.2611%" height="15" fill="rgb(219,56,2)" fg:x="19835" fg:w="263"/><text x="19.9450%" y="223.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (175 samples, 0.17%)</title><rect x="20.3225%" y="197" width="0.1738%" height="15" fill="rgb(233,0,4)" fg:x="20467" fg:w="175"/><text x="20.5725%" y="207.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (546 samples, 0.54%)</title><rect x="19.9561%" y="213" width="0.5421%" height="15" fill="rgb(235,30,7)" fg:x="20098" fg:w="546"/><text x="20.2061%" y="223.50"></text></g><g><title>tailcall`mi_free (563 samples, 0.56%)</title><rect x="20.4983%" y="213" width="0.5590%" height="15" fill="rgb(250,79,13)" fg:x="20644" fg:w="563"/><text x="20.7483%" y="223.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (1,414 samples, 1.40%)</title><rect x="19.6622%" y="229" width="1.4040%" height="15" fill="rgb(211,146,34)" fg:x="19802" fg:w="1414"/><text x="19.9122%" y="239.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (1,442 samples, 1.43%)</title><rect x="19.6533%" y="245" width="1.4318%" height="15" fill="rgb(228,22,38)" fg:x="19793" fg:w="1442"/><text x="19.9033%" y="255.50"></text></g><g><title>tailcall`mi_free (19 samples, 0.02%)</title><rect x="21.0662%" y="229" width="0.0189%" height="15" fill="rgb(235,168,5)" fg:x="21216" fg:w="19"/><text x="21.3162%" y="239.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (1,454 samples, 1.44%)</title><rect x="19.6493%" y="261" width="1.4437%" height="15" fill="rgb(221,155,16)" fg:x="19789" fg:w="1454"/><text x="19.8993%" y="271.50"></text></g><g><title>tailcall`mi_free (14 samples, 0.01%)</title><rect x="21.0930%" y="261" width="0.0139%" height="15" fill="rgb(215,215,53)" fg:x="21243" fg:w="14"/><text x="21.3430%" y="271.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (1,471 samples, 1.46%)</title><rect x="19.6473%" y="277" width="1.4606%" height="15" fill="rgb(223,4,10)" fg:x="19787" fg:w="1471"/><text x="19.8973%" y="287.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (1,476 samples, 1.47%)</title><rect x="19.6453%" y="293" width="1.4656%" height="15" fill="rgb(234,103,6)" fg:x="19785" fg:w="1476"/><text x="19.8953%" y="303.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (1,479 samples, 1.47%)</title><rect x="19.6443%" y="309" width="1.4686%" height="15" fill="rgb(227,97,0)" fg:x="19784" fg:w="1479"/><text x="19.8943%" y="319.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql::response::Response&gt; (1,483 samples, 1.47%)</title><rect x="19.6423%" y="325" width="1.4725%" height="15" fill="rgb(234,150,53)" fg:x="19782" fg:w="1483"/><text x="19.8923%" y="335.50"></text></g><g><title>tailcall`&lt;tailcall::core::jit::response::AnyResponse&lt;alloc::vec::Vec&lt;u8&gt;&gt; as core::convert::From&lt;async_graphql::response::Response&gt;&gt;::from (11,835 samples, 11.75%)</title><rect x="9.3694%" y="341" width="11.7514%" height="15" fill="rgb(228,201,54)" fg:x="9436" fg:w="11835"/><text x="9.6194%" y="351.50">tailcall`&lt;tailcal..</text></g><g><title>tailcall`alloc::sync::Arc&lt;T,A&gt;::drop_slow (14 samples, 0.01%)</title><rect x="21.1357%" y="341" width="0.0139%" height="15" fill="rgb(222,22,37)" fg:x="21286" fg:w="14"/><text x="21.3857%" y="351.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;[tailcall::core::jit::model::Field&lt;async_graphql_value::ConstValue&gt;]&gt; (79 samples, 0.08%)</title><rect x="21.1754%" y="293" width="0.0784%" height="15" fill="rgb(237,53,32)" fg:x="21326" fg:w="79"/><text x="21.4254%" y="303.50"></text></g><g><title>tailcall`mi_free_block_mt (18 samples, 0.02%)</title><rect x="21.2360%" y="277" width="0.0179%" height="15" fill="rgb(233,25,53)" fg:x="21387" fg:w="18"/><text x="21.4860%" y="287.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;tailcall::core::jit::model::Directive&lt;async_graphql_value::ConstValue&gt;&gt;&gt; (46 samples, 0.05%)</title><rect x="21.2539%" y="293" width="0.0457%" height="15" fill="rgb(210,40,34)" fg:x="21405" fg:w="46"/><text x="21.5039%" y="303.50"></text></g><g><title>tailcall`mi_free (40 samples, 0.04%)</title><rect x="21.3065%" y="293" width="0.0397%" height="15" fill="rgb(241,220,44)" fg:x="21458" fg:w="40"/><text x="21.5565%" y="303.50"></text></g><g><title>tailcall`mi_free_block_delayed_mt (92 samples, 0.09%)</title><rect x="21.3462%" y="293" width="0.0914%" height="15" fill="rgb(235,28,35)" fg:x="21498" fg:w="92"/><text x="21.5962%" y="303.50"></text></g><g><title>tailcall`mi_free_block_mt (180 samples, 0.18%)</title><rect x="21.4376%" y="293" width="0.1787%" height="15" fill="rgb(210,56,17)" fg:x="21590" fg:w="180"/><text x="21.6876%" y="303.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;[tailcall::core::jit::model::Field&lt;async_graphql_value::ConstValue&gt;]&gt; (462 samples, 0.46%)</title><rect x="21.1744%" y="309" width="0.4587%" height="15" fill="rgb(224,130,29)" fg:x="21325" fg:w="462"/><text x="21.4244%" y="319.50"></text></g><g><title>tailcall`mi_free_generic_mt (17 samples, 0.02%)</title><rect x="21.6163%" y="293" width="0.0169%" height="15" fill="rgb(235,212,8)" fg:x="21770" fg:w="17"/><text x="21.8663%" y="303.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;[tailcall::core::jit::model::Field&lt;async_graphql_value::ConstValue&gt;]&gt; (499 samples, 0.50%)</title><rect x="21.1675%" y="325" width="0.4955%" height="15" fill="rgb(223,33,50)" fg:x="21318" fg:w="499"/><text x="21.4175%" y="335.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;tailcall::core::json::json_schema::JsonSchema&gt; (12 samples, 0.01%)</title><rect x="21.6808%" y="293" width="0.0119%" height="15" fill="rgb(219,149,13)" fg:x="21835" fg:w="12"/><text x="21.9308%" y="303.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;tailcall::core::endpoint::Endpoint&gt; (19 samples, 0.02%)</title><rect x="21.6769%" y="309" width="0.0189%" height="15" fill="rgb(250,156,29)" fg:x="21831" fg:w="19"/><text x="21.9269%" y="319.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;tailcall::core::http::request_template::Query&gt; (18 samples, 0.02%)</title><rect x="21.6957%" y="309" width="0.0179%" height="15" fill="rgb(216,193,19)" fg:x="21850" fg:w="18"/><text x="21.9457%" y="319.50"></text></g><g><title>tailcall`mi_free (16 samples, 0.02%)</title><rect x="21.7156%" y="309" width="0.0159%" height="15" fill="rgb(216,135,14)" fg:x="21870" fg:w="16"/><text x="21.9656%" y="319.50"></text></g><g><title>tailcall`mi_free_block_delayed_mt (41 samples, 0.04%)</title><rect x="21.7315%" y="309" width="0.0407%" height="15" fill="rgb(241,47,5)" fg:x="21886" fg:w="41"/><text x="21.9815%" y="319.50"></text></g><g><title>tailcall`mi_free_block_mt (41 samples, 0.04%)</title><rect x="21.7722%" y="309" width="0.0407%" height="15" fill="rgb(233,42,35)" fg:x="21927" fg:w="41"/><text x="22.0222%" y="319.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;tailcall::core::ir::model::IO&gt; (158 samples, 0.16%)</title><rect x="21.6669%" y="325" width="0.1569%" height="15" fill="rgb(231,13,6)" fg:x="21821" fg:w="158"/><text x="21.9169%" y="335.50"></text></g><g><title>tailcall`mi_free_generic_mt (11 samples, 0.01%)</title><rect x="21.8129%" y="309" width="0.0109%" height="15" fill="rgb(207,181,40)" fg:x="21968" fg:w="11"/><text x="22.0629%" y="319.50"></text></g><g><title>tailcall`mi_free (22 samples, 0.02%)</title><rect x="21.8288%" y="325" width="0.0218%" height="15" fill="rgb(254,173,49)" fg:x="21984" fg:w="22"/><text x="22.0788%" y="335.50"></text></g><g><title>tailcall`mi_free_block_delayed_mt (28 samples, 0.03%)</title><rect x="21.8506%" y="325" width="0.0278%" height="15" fill="rgb(221,1,38)" fg:x="22006" fg:w="28"/><text x="22.1006%" y="335.50"></text></g><g><title>tailcall`mi_free_block_mt (11 samples, 0.01%)</title><rect x="21.8784%" y="325" width="0.0109%" height="15" fill="rgb(206,124,46)" fg:x="22034" fg:w="11"/><text x="22.1284%" y="335.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;[tailcall::core::jit::model::Field&lt;async_graphql_value::ConstValue&gt;]&gt; (738 samples, 0.73%)</title><rect x="21.1586%" y="341" width="0.7328%" height="15" fill="rgb(249,21,11)" fg:x="21309" fg:w="738"/><text x="21.4086%" y="351.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,async_graphql_value::ConstValue&gt;&gt; (20 samples, 0.02%)</title><rect x="21.9003%" y="341" width="0.0199%" height="15" fill="rgb(222,201,40)" fg:x="22056" fg:w="20"/><text x="22.1503%" y="351.50"></text></g><g><title>tailcall`_mi_page_free (20 samples, 0.02%)</title><rect x="21.9926%" y="245" width="0.0199%" height="15" fill="rgb(235,61,29)" fg:x="22149" fg:w="20"/><text x="22.2426%" y="255.50"></text></g><g><title>tailcall`mi_segment_page_clear (20 samples, 0.02%)</title><rect x="21.9926%" y="229" width="0.0199%" height="15" fill="rgb(219,207,3)" fg:x="22149" fg:w="20"/><text x="22.2426%" y="239.50"></text></g><g><title>tailcall`mi_segment_span_free_coalesce (20 samples, 0.02%)</title><rect x="21.9926%" y="213" width="0.0199%" height="15" fill="rgb(222,56,46)" fg:x="22149" fg:w="20"/><text x="22.2426%" y="223.50"></text></g><g><title>tailcall`mi_segment_span_free (19 samples, 0.02%)</title><rect x="21.9936%" y="197" width="0.0189%" height="15" fill="rgb(239,76,54)" fg:x="22150" fg:w="19"/><text x="22.2436%" y="207.50"></text></g><g><title>tailcall`alloc::sync::Arc&lt;T,A&gt;::drop_slow (266 samples, 0.26%)</title><rect x="22.0125%" y="245" width="0.2641%" height="15" fill="rgb(231,124,27)" fg:x="22169" fg:w="266"/><text x="22.2625%" y="255.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (561 samples, 0.56%)</title><rect x="22.2766%" y="245" width="0.5570%" height="15" fill="rgb(249,195,6)" fg:x="22435" fg:w="561"/><text x="22.5266%" y="255.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (163 samples, 0.16%)</title><rect x="22.6718%" y="229" width="0.1618%" height="15" fill="rgb(237,174,47)" fg:x="22833" fg:w="163"/><text x="22.9218%" y="239.50"></text></g><g><title>tailcall`mi_free (686 samples, 0.68%)</title><rect x="22.8337%" y="245" width="0.6812%" height="15" fill="rgb(206,201,31)" fg:x="22996" fg:w="686"/><text x="23.0837%" y="255.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (1,568 samples, 1.56%)</title><rect x="21.9668%" y="261" width="1.5569%" height="15" fill="rgb(231,57,52)" fg:x="22123" fg:w="1568"/><text x="22.2168%" y="271.50"></text></g><g><title>tailcall`mi_free (11 samples, 0.01%)</title><rect x="23.5237%" y="261" width="0.0109%" height="15" fill="rgb(248,177,22)" fg:x="23691" fg:w="11"/><text x="23.7737%" y="271.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (1,602 samples, 1.59%)</title><rect x="21.9480%" y="277" width="1.5907%" height="15" fill="rgb(215,211,37)" fg:x="22104" fg:w="1602"/><text x="22.1980%" y="287.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (1,620 samples, 1.61%)</title><rect x="21.9440%" y="293" width="1.6086%" height="15" fill="rgb(241,128,51)" fg:x="22100" fg:w="1620"/><text x="22.1940%" y="303.50"></text></g><g><title>tailcall`mi_free (14 samples, 0.01%)</title><rect x="23.5386%" y="277" width="0.0139%" height="15" fill="rgb(227,165,31)" fg:x="23706" fg:w="14"/><text x="23.7886%" y="287.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (1,635 samples, 1.62%)</title><rect x="21.9410%" y="309" width="1.6235%" height="15" fill="rgb(228,167,24)" fg:x="22097" fg:w="1635"/><text x="22.1910%" y="319.50"></text></g><g><title>tailcall`mi_free (12 samples, 0.01%)</title><rect x="23.5525%" y="293" width="0.0119%" height="15" fill="rgb(228,143,12)" fg:x="23720" fg:w="12"/><text x="23.8025%" y="303.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (1,651 samples, 1.64%)</title><rect x="21.9390%" y="325" width="1.6393%" height="15" fill="rgb(249,149,8)" fg:x="22095" fg:w="1651"/><text x="22.1890%" y="335.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;tailcall::core::jit::store::Store&lt;core::result::Result&lt;async_graphql_value::ConstValue,tailcall::core::jit::model::Positioned&lt;tailcall::core::jit::error::Error&gt;&gt;&gt;&gt; (1,657 samples, 1.65%)</title><rect x="21.9340%" y="341" width="1.6453%" height="15" fill="rgb(243,35,44)" fg:x="22090" fg:w="1657"/><text x="22.1840%" y="351.50"></text></g><g><title>tailcall`mi_free (66 samples, 0.07%)</title><rect x="23.5853%" y="341" width="0.0655%" height="15" fill="rgb(246,89,9)" fg:x="23753" fg:w="66"/><text x="23.8353%" y="351.50"></text></g><g><title>tailcall`mi_free_block_delayed_mt (69 samples, 0.07%)</title><rect x="23.6508%" y="341" width="0.0685%" height="15" fill="rgb(233,213,13)" fg:x="23819" fg:w="69"/><text x="23.9008%" y="351.50"></text></g><g><title>tailcall`mi_free_block_mt (65 samples, 0.06%)</title><rect x="23.7194%" y="341" width="0.0645%" height="15" fill="rgb(233,141,41)" fg:x="23888" fg:w="65"/><text x="23.9694%" y="351.50"></text></g><g><title>tailcall`mi_free_generic_mt (11 samples, 0.01%)</title><rect x="23.7839%" y="341" width="0.0109%" height="15" fill="rgb(239,167,4)" fg:x="23953" fg:w="11"/><text x="24.0339%" y="351.50"></text></g><g><title>tailcall`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (15 samples, 0.01%)</title><rect x="23.8484%" y="309" width="0.0149%" height="15" fill="rgb(209,217,16)" fg:x="24018" fg:w="15"/><text x="24.0984%" y="319.50"></text></g><g><title>tailcall`indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (57 samples, 0.06%)</title><rect x="23.8256%" y="325" width="0.0566%" height="15" fill="rgb(219,88,35)" fg:x="23995" fg:w="57"/><text x="24.0756%" y="335.50"></text></g><g><title>tailcall`indexmap::map::core::RefMut&lt;K,V&gt;::reserve_entries (13 samples, 0.01%)</title><rect x="23.8693%" y="309" width="0.0129%" height="15" fill="rgb(220,193,23)" fg:x="24039" fg:w="13"/><text x="24.1193%" y="319.50"></text></g><g><title>tailcall`tailcall::core::jit::context::Context&lt;Input,Output&gt;::build_args (79 samples, 0.08%)</title><rect x="23.8047%" y="341" width="0.0784%" height="15" fill="rgb(230,90,52)" fg:x="23974" fg:w="79"/><text x="24.0547%" y="351.50"></text></g><g><title>tailcall`tailcall::core::jit::context::RequestContext&lt;Input&gt;::errors (19 samples, 0.02%)</title><rect x="23.8832%" y="341" width="0.0189%" height="15" fill="rgb(252,106,19)" fg:x="24053" fg:w="19"/><text x="24.1332%" y="351.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (55 samples, 0.05%)</title><rect x="23.9279%" y="325" width="0.0546%" height="15" fill="rgb(206,74,20)" fg:x="24098" fg:w="55"/><text x="24.1779%" y="335.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_init (11 samples, 0.01%)</title><rect x="23.9825%" y="325" width="0.0109%" height="15" fill="rgb(230,138,44)" fg:x="24153" fg:w="11"/><text x="24.2325%" y="335.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (25 samples, 0.02%)</title><rect x="24.0222%" y="293" width="0.0248%" height="15" fill="rgb(235,182,43)" fg:x="24193" fg:w="25"/><text x="24.2722%" y="303.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (19 samples, 0.02%)</title><rect x="24.0282%" y="277" width="0.0189%" height="15" fill="rgb(242,16,51)" fg:x="24199" fg:w="19"/><text x="24.2782%" y="287.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::enter (11 samples, 0.01%)</title><rect x="24.0470%" y="293" width="0.0109%" height="15" fill="rgb(248,9,4)" fg:x="24218" fg:w="11"/><text x="24.2970%" y="303.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::span (25 samples, 0.02%)</title><rect x="24.0699%" y="277" width="0.0248%" height="15" fill="rgb(210,31,22)" fg:x="24241" fg:w="25"/><text x="24.3199%" y="287.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (22 samples, 0.02%)</title><rect x="24.0728%" y="261" width="0.0218%" height="15" fill="rgb(239,54,39)" fg:x="24244" fg:w="22"/><text x="24.3228%" y="271.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::enter (82 samples, 0.08%)</title><rect x="24.0172%" y="309" width="0.0814%" height="15" fill="rgb(230,99,41)" fg:x="24188" fg:w="82"/><text x="24.2672%" y="319.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::is_enabled_inner (41 samples, 0.04%)</title><rect x="24.0579%" y="293" width="0.0407%" height="15" fill="rgb(253,106,12)" fg:x="24229" fg:w="41"/><text x="24.3079%" y="303.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (14 samples, 0.01%)</title><rect x="24.1255%" y="261" width="0.0139%" height="15" fill="rgb(213,46,41)" fg:x="24297" fg:w="14"/><text x="24.3755%" y="271.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (22 samples, 0.02%)</title><rect x="24.1185%" y="277" width="0.0218%" height="15" fill="rgb(215,133,35)" fg:x="24290" fg:w="22"/><text x="24.3685%" y="287.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (32 samples, 0.03%)</title><rect x="24.1106%" y="293" width="0.0318%" height="15" fill="rgb(213,28,5)" fg:x="24282" fg:w="32"/><text x="24.3606%" y="303.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::exit (56 samples, 0.06%)</title><rect x="24.0987%" y="309" width="0.0556%" height="15" fill="rgb(215,77,49)" fg:x="24270" fg:w="56"/><text x="24.3487%" y="319.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (18 samples, 0.02%)</title><rect x="24.1553%" y="309" width="0.0179%" height="15" fill="rgb(248,100,22)" fg:x="24327" fg:w="18"/><text x="24.4053%" y="319.50"></text></g><g><title>tailcall`bytes::bytes_mut::shared_v_drop (14 samples, 0.01%)</title><rect x="24.2665%" y="245" width="0.0139%" height="15" fill="rgb(208,67,9)" fg:x="24439" fg:w="14"/><text x="24.5165%" y="255.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;http::header::map::HeaderMap&gt; (27 samples, 0.03%)</title><rect x="24.2665%" y="261" width="0.0268%" height="15" fill="rgb(219,133,21)" fg:x="24439" fg:w="27"/><text x="24.5165%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (18 samples, 0.02%)</title><rect x="24.3439%" y="213" width="0.0179%" height="15" fill="rgb(246,46,29)" fg:x="24517" fg:w="18"/><text x="24.5939%" y="223.50"></text></g><g><title>tailcall`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (15 samples, 0.01%)</title><rect x="24.3648%" y="197" width="0.0149%" height="15" fill="rgb(246,185,52)" fg:x="24538" fg:w="15"/><text x="24.6148%" y="207.50"></text></g><g><title>tailcall`alloc::raw_vec::finish_grow (12 samples, 0.01%)</title><rect x="24.3677%" y="181" width="0.0119%" height="15" fill="rgb(252,136,11)" fg:x="24541" fg:w="12"/><text x="24.6177%" y="191.50"></text></g><g><title>tailcall`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (19 samples, 0.02%)</title><rect x="24.3618%" y="213" width="0.0189%" height="15" fill="rgb(219,138,53)" fg:x="24535" fg:w="19"/><text x="24.6118%" y="223.50"></text></g><g><title>tailcall`alloc::fmt::format::format_inner (53 samples, 0.05%)</title><rect x="24.3310%" y="245" width="0.0526%" height="15" fill="rgb(211,51,23)" fg:x="24504" fg:w="53"/><text x="24.5810%" y="255.50"></text></g><g><title>tailcall`core::fmt::write (44 samples, 0.04%)</title><rect x="24.3399%" y="229" width="0.0437%" height="15" fill="rgb(247,221,28)" fg:x="24513" fg:w="44"/><text x="24.5899%" y="239.50"></text></g><g><title>tailcall`core::fmt::Formatter::pad (11 samples, 0.01%)</title><rect x="24.4204%" y="197" width="0.0109%" height="15" fill="rgb(251,222,45)" fg:x="24594" fg:w="11"/><text x="24.6704%" y="207.50"></text></g><g><title>tailcall`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (24 samples, 0.02%)</title><rect x="24.4462%" y="165" width="0.0238%" height="15" fill="rgb(217,162,53)" fg:x="24620" fg:w="24"/><text x="24.6962%" y="175.50"></text></g><g><title>tailcall`alloc::raw_vec::finish_grow (14 samples, 0.01%)</title><rect x="24.4561%" y="149" width="0.0139%" height="15" fill="rgb(229,93,14)" fg:x="24630" fg:w="14"/><text x="24.7061%" y="159.50"></text></g><g><title>tailcall`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (32 samples, 0.03%)</title><rect x="24.4412%" y="181" width="0.0318%" height="15" fill="rgb(209,67,49)" fg:x="24615" fg:w="32"/><text x="24.6912%" y="191.50"></text></g><g><title>tailcall`alloc::fmt::format::format_inner (66 samples, 0.07%)</title><rect x="24.4124%" y="213" width="0.0655%" height="15" fill="rgb(213,87,29)" fg:x="24586" fg:w="66"/><text x="24.6624%" y="223.50"></text></g><g><title>tailcall`core::fmt::write (47 samples, 0.05%)</title><rect x="24.4313%" y="197" width="0.0467%" height="15" fill="rgb(205,151,52)" fg:x="24605" fg:w="47"/><text x="24.6813%" y="207.50"></text></g><g><title>tailcall`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (13 samples, 0.01%)</title><rect x="24.4938%" y="181" width="0.0129%" height="15" fill="rgb(253,215,39)" fg:x="24668" fg:w="13"/><text x="24.7438%" y="191.50"></text></g><g><title>tailcall`tailcall::core::http::query_encoder::QueryEncoder::encode_const_value (110 samples, 0.11%)</title><rect x="24.3985%" y="229" width="0.1092%" height="15" fill="rgb(221,220,41)" fg:x="24572" fg:w="110"/><text x="24.6485%" y="239.50"></text></g><g><title>tailcall`tailcall::core::http::query_encoder::convert_value (27 samples, 0.03%)</title><rect x="24.4809%" y="213" width="0.0268%" height="15" fill="rgb(218,133,21)" fg:x="24655" fg:w="27"/><text x="24.7309%" y="223.50"></text></g><g><title>tailcall`&lt;serde_json::number::Number as core::fmt::Display&gt;::fmt (22 samples, 0.02%)</title><rect x="24.4859%" y="197" width="0.0218%" height="15" fill="rgb(221,193,43)" fg:x="24660" fg:w="22"/><text x="24.7359%" y="207.50"></text></g><g><title>tailcall`tailcall::core::http::query_encoder::QueryEncoder::encode (123 samples, 0.12%)</title><rect x="24.3896%" y="245" width="0.1221%" height="15" fill="rgb(240,128,52)" fg:x="24563" fg:w="123"/><text x="24.6396%" y="255.50"></text></g><g><title>tailcall`tailcall::core::path::_&lt;impl tailcall::core::ir::eval_context::EvalContext&lt;Ctx&gt;&gt;::to_raw_value (33 samples, 0.03%)</title><rect x="24.5137%" y="245" width="0.0328%" height="15" fill="rgb(253,114,12)" fg:x="24688" fg:w="33"/><text x="24.7637%" y="255.50"></text></g><g><title>tailcall`&lt;core::net::ip_addr::Ipv4Addr as core::fmt::Display&gt;::fmt (15 samples, 0.01%)</title><rect x="24.6130%" y="197" width="0.0149%" height="15" fill="rgb(215,223,47)" fg:x="24788" fg:w="15"/><text x="24.8630%" y="207.50"></text></g><g><title>tailcall`core::fmt::write (14 samples, 0.01%)</title><rect x="24.6140%" y="181" width="0.0139%" height="15" fill="rgb(248,225,23)" fg:x="24789" fg:w="14"/><text x="24.8640%" y="191.50"></text></g><g><title>tailcall`core::fmt::write (23 samples, 0.02%)</title><rect x="24.6090%" y="213" width="0.0228%" height="15" fill="rgb(250,108,0)" fg:x="24784" fg:w="23"/><text x="24.8590%" y="223.50"></text></g><g><title>tailcall`url::host::Host::parse (56 samples, 0.06%)</title><rect x="24.6348%" y="213" width="0.0556%" height="15" fill="rgb(228,208,7)" fg:x="24810" fg:w="56"/><text x="24.8848%" y="223.50"></text></g><g><title>tailcall`url::parser::Parser::parse_path_start (24 samples, 0.02%)</title><rect x="24.6914%" y="213" width="0.0238%" height="15" fill="rgb(244,45,10)" fg:x="24867" fg:w="24"/><text x="24.9414%" y="223.50"></text></g><g><title>tailcall`url::parser::Parser::parse_path (19 samples, 0.02%)</title><rect x="24.6964%" y="197" width="0.0189%" height="15" fill="rgb(207,125,25)" fg:x="24872" fg:w="19"/><text x="24.9464%" y="207.50"></text></g><g><title>tailcall`url::parser::Parser::after_double_slash (150 samples, 0.15%)</title><rect x="24.5683%" y="229" width="0.1489%" height="15" fill="rgb(210,195,18)" fg:x="24743" fg:w="150"/><text x="24.8183%" y="239.50"></text></g><g><title>tailcall`url::ParseOptions::parse (175 samples, 0.17%)</title><rect x="24.5465%" y="245" width="0.1738%" height="15" fill="rgb(249,80,12)" fg:x="24721" fg:w="175"/><text x="24.7965%" y="255.50"></text></g><g><title>tailcall`url::Url::set_query (78 samples, 0.08%)</title><rect x="24.7222%" y="245" width="0.0774%" height="15" fill="rgb(221,65,9)" fg:x="24898" fg:w="78"/><text x="24.9722%" y="255.50"></text></g><g><title>tailcall`url::parser::Parser::parse_query (55 samples, 0.05%)</title><rect x="24.7451%" y="229" width="0.0546%" height="15" fill="rgb(235,49,36)" fg:x="24921" fg:w="55"/><text x="24.9951%" y="239.50"></text></g><g><title>tailcall`tailcall::core::http::request_template::RequestTemplate::create_url (497 samples, 0.49%)</title><rect x="24.3092%" y="261" width="0.4935%" height="15" fill="rgb(225,32,20)" fg:x="24482" fg:w="497"/><text x="24.5592%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (34 samples, 0.03%)</title><rect x="24.8682%" y="229" width="0.0338%" height="15" fill="rgb(215,141,46)" fg:x="25045" fg:w="34"/><text x="25.1182%" y="239.50"></text></g><g><title>tailcall`&lt;tailcall::cli::runtime::http::NativeHttp as tailcall::core::HttpIO&gt;::execute::_{{closure}} (13 samples, 0.01%)</title><rect x="24.9019%" y="229" width="0.0129%" height="15" fill="rgb(250,160,47)" fg:x="25079" fg:w="13"/><text x="25.1519%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (41 samples, 0.04%)</title><rect x="24.9178%" y="213" width="0.0407%" height="15" fill="rgb(216,222,40)" fg:x="25095" fg:w="41"/><text x="25.1678%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (17 samples, 0.02%)</title><rect x="25.0141%" y="197" width="0.0169%" height="15" fill="rgb(234,217,39)" fg:x="25192" fg:w="17"/><text x="25.2641%" y="207.50"></text></g><g><title>tailcall`&lt;http::header::map::HeaderMap&lt;T&gt; as core::clone::Clone&gt;::clone (12 samples, 0.01%)</title><rect x="25.0310%" y="197" width="0.0119%" height="15" fill="rgb(207,178,40)" fg:x="25209" fg:w="12"/><text x="25.2810%" y="207.50"></text></g><g><title>tailcall`futures_channel::mpsc::Receiver&lt;T&gt;::next_message (24 samples, 0.02%)</title><rect x="25.0549%" y="149" width="0.0238%" height="15" fill="rgb(221,136,13)" fg:x="25233" fg:w="24"/><text x="25.3049%" y="159.50"></text></g><g><title>tailcall`&lt;reqwest::async_impl::body::WrapHyper as http_body::Body&gt;::poll_data (38 samples, 0.04%)</title><rect x="25.0479%" y="181" width="0.0377%" height="15" fill="rgb(249,199,10)" fg:x="25226" fg:w="38"/><text x="25.2979%" y="191.50"></text></g><g><title>tailcall`hyper::body::body::Body::poll_inner (35 samples, 0.03%)</title><rect x="25.0509%" y="165" width="0.0348%" height="15" fill="rgb(249,222,13)" fg:x="25229" fg:w="35"/><text x="25.3009%" y="175.50"></text></g><g><title>tailcall`&lt;reqwest::async_impl::body::ImplStream as http_body::Body&gt;::poll_data (50 samples, 0.05%)</title><rect x="25.0429%" y="197" width="0.0496%" height="15" fill="rgb(244,185,38)" fg:x="25221" fg:w="50"/><text x="25.2929%" y="207.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;hyper::body::body::Body&gt; (17 samples, 0.02%)</title><rect x="25.1303%" y="181" width="0.0169%" height="15" fill="rgb(236,202,9)" fg:x="25309" fg:w="17"/><text x="25.3803%" y="191.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;reqwest::async_impl::body::Body&gt; (29 samples, 0.03%)</title><rect x="25.1194%" y="197" width="0.0288%" height="15" fill="rgb(250,229,37)" fg:x="25298" fg:w="29"/><text x="25.3694%" y="207.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;reqwest_middleware::client::ClientWithMiddleware::execute::{{closure}}&gt; (16 samples, 0.02%)</title><rect x="25.1502%" y="197" width="0.0159%" height="15" fill="rgb(206,174,23)" fg:x="25329" fg:w="16"/><text x="25.4002%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (11 samples, 0.01%)</title><rect x="25.2822%" y="165" width="0.0109%" height="15" fill="rgb(211,33,43)" fg:x="25462" fg:w="11"/><text x="25.5322%" y="175.50"></text></g><g><title>tailcall`&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (35 samples, 0.03%)</title><rect x="25.2952%" y="165" width="0.0348%" height="15" fill="rgb(245,58,50)" fg:x="25475" fg:w="35"/><text x="25.5452%" y="175.50"></text></g><g><title>tailcall`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (22 samples, 0.02%)</title><rect x="25.4957%" y="133" width="0.0218%" height="15" fill="rgb(244,68,36)" fg:x="25677" fg:w="22"/><text x="25.7457%" y="143.50"></text></g><g><title>tailcall`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (13 samples, 0.01%)</title><rect x="25.5047%" y="117" width="0.0129%" height="15" fill="rgb(232,229,15)" fg:x="25686" fg:w="13"/><text x="25.7547%" y="127.50"></text></g><g><title>tailcall`&lt;hyper::client::connect::ExtraEnvelope&lt;T&gt; as hyper::client::connect::ExtraInner&gt;::set (25 samples, 0.02%)</title><rect x="25.4947%" y="149" width="0.0248%" height="15" fill="rgb(254,30,23)" fg:x="25676" fg:w="25"/><text x="25.7447%" y="159.50"></text></g><g><title>tailcall`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (12 samples, 0.01%)</title><rect x="25.5563%" y="133" width="0.0119%" height="15" fill="rgb(235,160,14)" fg:x="25738" fg:w="12"/><text x="25.8063%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (11 samples, 0.01%)</title><rect x="25.5821%" y="101" width="0.0109%" height="15" fill="rgb(212,155,44)" fg:x="25764" fg:w="11"/><text x="25.8321%" y="111.50"></text></g><g><title>tailcall`&lt;hyper::client::pool::Checkout&lt;T&gt; as core::future::future::Future&gt;::poll (75 samples, 0.07%)</title><rect x="25.5196%" y="149" width="0.0745%" height="15" fill="rgb(226,2,50)" fg:x="25701" fg:w="75"/><text x="25.7696%" y="159.50"></text></g><g><title>tailcall`std::sys::pal::unix::time::Timespec::now (12 samples, 0.01%)</title><rect x="25.5821%" y="133" width="0.0119%" height="15" fill="rgb(234,177,6)" fg:x="25764" fg:w="12"/><text x="25.8321%" y="143.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (12 samples, 0.01%)</title><rect x="25.5821%" y="117" width="0.0119%" height="15" fill="rgb(217,24,9)" fg:x="25764" fg:w="12"/><text x="25.8321%" y="127.50"></text></g><g><title>tailcall`&lt;tokio::sync::oneshot::Receiver&lt;T&gt; as core::future::future::Future&gt;::poll (42 samples, 0.04%)</title><rect x="25.5970%" y="149" width="0.0417%" height="15" fill="rgb(220,13,46)" fg:x="25779" fg:w="42"/><text x="25.8470%" y="159.50"></text></g><g><title>tailcall`bytes::bytes::shared_drop (20 samples, 0.02%)</title><rect x="25.6536%" y="149" width="0.0199%" height="15" fill="rgb(239,221,27)" fg:x="25836" fg:w="20"/><text x="25.9036%" y="159.50"></text></g><g><title>tailcall`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (24 samples, 0.02%)</title><rect x="25.7281%" y="117" width="0.0238%" height="15" fill="rgb(222,198,25)" fg:x="25911" fg:w="24"/><text x="25.9781%" y="127.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;hyper::client::pool::Pooled&lt;hyper::client::client::PoolClient&lt;reqwest::async_impl::body::ImplStream&gt;&gt;&gt; (93 samples, 0.09%)</title><rect x="25.6854%" y="149" width="0.0923%" height="15" fill="rgb(211,99,13)" fg:x="25868" fg:w="93"/><text x="25.9354%" y="159.50"></text></g><g><title>tailcall`hyper::client::pool::PoolInner&lt;T&gt;::put (77 samples, 0.08%)</title><rect x="25.7013%" y="133" width="0.0765%" height="15" fill="rgb(232,111,31)" fg:x="25884" fg:w="77"/><text x="25.9513%" y="143.50"></text></g><g><title>tailcall`std::sys::pal::unix::time::Timespec::now (17 samples, 0.02%)</title><rect x="25.7608%" y="117" width="0.0169%" height="15" fill="rgb(245,82,37)" fg:x="25944" fg:w="17"/><text x="26.0108%" y="127.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (17 samples, 0.02%)</title><rect x="25.7608%" y="101" width="0.0169%" height="15" fill="rgb(227,149,46)" fg:x="25944" fg:w="17"/><text x="26.0108%" y="111.50"></text></g><g><title>tailcall`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (11 samples, 0.01%)</title><rect x="25.7857%" y="133" width="0.0109%" height="15" fill="rgb(218,36,50)" fg:x="25969" fg:w="11"/><text x="26.0357%" y="143.50"></text></g><g><title>tailcall`http::header::map::VacantEntry&lt;T&gt;::try_insert (13 samples, 0.01%)</title><rect x="25.7847%" y="149" width="0.0129%" height="15" fill="rgb(226,80,48)" fg:x="25968" fg:w="13"/><text x="26.0347%" y="159.50"></text></g><g><title>tailcall`http::uri::authority::Authority::port (18 samples, 0.02%)</title><rect x="25.8006%" y="149" width="0.0179%" height="15" fill="rgb(238,224,15)" fg:x="25984" fg:w="18"/><text x="26.0506%" y="159.50"></text></g><g><title>tailcall`hyper::client::client::Client&lt;C,B&gt;::retryably_send_request::_{{closure}} (531 samples, 0.53%)</title><rect x="25.3418%" y="165" width="0.5273%" height="15" fill="rgb(241,136,10)" fg:x="25522" fg:w="531"/><text x="25.5918%" y="175.50"></text></g><g><title>tailcall`&lt;reqwest::async_impl::client::PendingRequest as core::future::future::Future&gt;::poll (680 samples, 0.68%)</title><rect x="25.2256%" y="181" width="0.6752%" height="15" fill="rgb(208,32,45)" fg:x="25405" fg:w="680"/><text x="25.4756%" y="191.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;reqwest::async_impl::client::Pending&gt; (25 samples, 0.02%)</title><rect x="25.9038%" y="181" width="0.0248%" height="15" fill="rgb(207,135,9)" fg:x="26088" fg:w="25"/><text x="26.1538%" y="191.50"></text></g><g><title>tailcall`hyper::client::client::Client&lt;C,B&gt;::request (30 samples, 0.03%)</title><rect x="26.0299%" y="165" width="0.0298%" height="15" fill="rgb(206,86,44)" fg:x="26215" fg:w="30"/><text x="26.2799%" y="175.50"></text></g><g><title>tailcall`http::uri::Uri::from_shared (46 samples, 0.05%)</title><rect x="26.0716%" y="149" width="0.0457%" height="15" fill="rgb(245,177,15)" fg:x="26257" fg:w="46"/><text x="26.3216%" y="159.50"></text></g><g><title>tailcall`http::uri::path::PathAndQuery::from_shared (20 samples, 0.02%)</title><rect x="26.0974%" y="133" width="0.0199%" height="15" fill="rgb(206,64,50)" fg:x="26283" fg:w="20"/><text x="26.3474%" y="143.50"></text></g><g><title>tailcall`reqwest::into_url::try_uri (55 samples, 0.05%)</title><rect x="26.0637%" y="165" width="0.0546%" height="15" fill="rgb(234,36,40)" fg:x="26249" fg:w="55"/><text x="26.3137%" y="175.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (18 samples, 0.02%)</title><rect x="26.1233%" y="133" width="0.0179%" height="15" fill="rgb(213,64,8)" fg:x="26309" fg:w="18"/><text x="26.3733%" y="143.50"></text></g><g><title>tailcall`reqwest::async_impl::client::Client::execute_request (191 samples, 0.19%)</title><rect x="25.9525%" y="181" width="0.1897%" height="15" fill="rgb(210,75,36)" fg:x="26137" fg:w="191"/><text x="26.2025%" y="191.50"></text></g><g><title>tailcall`tokio::time::sleep::sleep (24 samples, 0.02%)</title><rect x="26.1183%" y="165" width="0.0238%" height="15" fill="rgb(229,88,21)" fg:x="26304" fg:w="24"/><text x="26.3683%" y="175.50"></text></g><g><title>tailcall`std::sys::pal::unix::time::Timespec::now (19 samples, 0.02%)</title><rect x="26.1233%" y="149" width="0.0189%" height="15" fill="rgb(252,204,47)" fg:x="26309" fg:w="19"/><text x="26.3733%" y="159.50"></text></g><g><title>tailcall`reqwest_middleware::middleware::Next::run::_{{closure}} (956 samples, 0.95%)</title><rect x="25.1939%" y="197" width="0.9493%" height="15" fill="rgb(208,77,27)" fg:x="25373" fg:w="956"/><text x="25.4439%" y="207.50"></text></g><g><title>tailcall`tracing::__macro_support::__is_enabled (16 samples, 0.02%)</title><rect x="26.1451%" y="197" width="0.0159%" height="15" fill="rgb(221,76,26)" fg:x="26331" fg:w="16"/><text x="26.3951%" y="207.50"></text></g><g><title>tailcall`&lt;tailcall::cli::runtime::http::NativeHttp as tailcall::core::HttpIO&gt;::execute::_{{closure}}::_{{closure}} (1,223 samples, 1.21%)</title><rect x="24.9595%" y="213" width="1.2144%" height="15" fill="rgb(225,139,18)" fg:x="25137" fg:w="1223"/><text x="25.2095%" y="223.50"></text></g><g><title>tailcall`tracing_core::event::Event::dispatch (13 samples, 0.01%)</title><rect x="26.1610%" y="197" width="0.0129%" height="15" fill="rgb(230,137,11)" fg:x="26347" fg:w="13"/><text x="26.4110%" y="207.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (15 samples, 0.01%)</title><rect x="26.1789%" y="197" width="0.0149%" height="15" fill="rgb(212,28,1)" fg:x="26365" fg:w="15"/><text x="26.4289%" y="207.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::span (24 samples, 0.02%)</title><rect x="26.2007%" y="181" width="0.0238%" height="15" fill="rgb(248,164,17)" fg:x="26387" fg:w="24"/><text x="26.4507%" y="191.50"></text></g><g><title>tailcall`tracing_subscriber::registry::sharded::Registry::get (17 samples, 0.02%)</title><rect x="26.2077%" y="165" width="0.0169%" height="15" fill="rgb(222,171,42)" fg:x="26394" fg:w="17"/><text x="26.4577%" y="175.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::is_enabled_inner (32 samples, 0.03%)</title><rect x="26.1957%" y="197" width="0.0318%" height="15" fill="rgb(243,84,45)" fg:x="26382" fg:w="32"/><text x="26.4457%" y="207.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::enter (57 samples, 0.06%)</title><rect x="26.1739%" y="213" width="0.0566%" height="15" fill="rgb(252,49,23)" fg:x="26360" fg:w="57"/><text x="26.4239%" y="223.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (13 samples, 0.01%)</title><rect x="26.2653%" y="181" width="0.0129%" height="15" fill="rgb(215,19,7)" fg:x="26452" fg:w="13"/><text x="26.5153%" y="191.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (32 samples, 0.03%)</title><rect x="26.2504%" y="197" width="0.0318%" height="15" fill="rgb(238,81,41)" fg:x="26437" fg:w="32"/><text x="26.5004%" y="207.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::exit (64 samples, 0.06%)</title><rect x="26.2305%" y="213" width="0.0635%" height="15" fill="rgb(210,199,37)" fg:x="26417" fg:w="64"/><text x="26.4805%" y="223.50"></text></g><g><title>tailcall`tracing_subscriber::layer::context::Context&lt;S&gt;::is_enabled_inner (12 samples, 0.01%)</title><rect x="26.2821%" y="197" width="0.0119%" height="15" fill="rgb(244,192,49)" fg:x="26469" fg:w="12"/><text x="26.5321%" y="207.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::CloseGuard as core::ops::drop::Drop&gt;::drop (17 samples, 0.02%)</title><rect x="26.2970%" y="197" width="0.0169%" height="15" fill="rgb(226,211,11)" fg:x="26484" fg:w="17"/><text x="26.5470%" y="207.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::DataInner as sharded_slab::clear::Clear&gt;::clear (11 samples, 0.01%)</title><rect x="26.3030%" y="181" width="0.0109%" height="15" fill="rgb(236,162,54)" fg:x="26490" fg:w="11"/><text x="26.5530%" y="191.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (22 samples, 0.02%)</title><rect x="26.2950%" y="213" width="0.0218%" height="15" fill="rgb(220,229,9)" fg:x="26482" fg:w="22"/><text x="26.5450%" y="223.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::exit (15 samples, 0.01%)</title><rect x="26.3506%" y="197" width="0.0149%" height="15" fill="rgb(250,87,22)" fg:x="26538" fg:w="15"/><text x="26.6006%" y="207.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;tracing::instrument::Instrumented&lt;&lt;tailcall::cli::runtime::http::NativeHttp as tailcall::core::HttpIO&gt;::execute::{{closure}}::{{closure}}&gt;&gt; (25 samples, 0.02%)</title><rect x="26.3417%" y="213" width="0.0248%" height="15" fill="rgb(239,43,17)" fg:x="26529" fg:w="25"/><text x="26.5917%" y="223.50"></text></g><g><title>tailcall`mi_free (12 samples, 0.01%)</title><rect x="26.3665%" y="213" width="0.0119%" height="15" fill="rgb(231,177,25)" fg:x="26554" fg:w="12"/><text x="26.6165%" y="223.50"></text></g><g><title>tailcall`&lt;tailcall::cli::runtime::http::NativeHttp as tailcall::core::HttpIO&gt;::execute::_{{closure}} (1,504 samples, 1.49%)</title><rect x="24.9158%" y="229" width="1.4934%" height="15" fill="rgb(219,179,1)" fg:x="25093" fg:w="1504"/><text x="25.1658%" y="239.50"></text></g><g><title>tailcall`tracing::span::Span::new (11 samples, 0.01%)</title><rect x="26.3983%" y="213" width="0.0109%" height="15" fill="rgb(238,219,53)" fg:x="26586" fg:w="11"/><text x="26.6483%" y="223.50"></text></g><g><title>tailcall`&lt;tailcall::cli::runtime::http::NativeHttp as tailcall::core::HttpIO&gt;::execute (12 samples, 0.01%)</title><rect x="26.4092%" y="229" width="0.0119%" height="15" fill="rgb(232,167,36)" fg:x="26597" fg:w="12"/><text x="26.6592%" y="239.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (12 samples, 0.01%)</title><rect x="26.4092%" y="213" width="0.0119%" height="15" fill="rgb(244,19,51)" fg:x="26597" fg:w="12"/><text x="26.6592%" y="223.50"></text></g><g><title>tailcall`_mi_malloc_generic (12 samples, 0.01%)</title><rect x="26.4092%" y="197" width="0.0119%" height="15" fill="rgb(224,6,22)" fg:x="26597" fg:w="12"/><text x="26.6592%" y="207.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (14 samples, 0.01%)</title><rect x="26.5800%" y="133" width="0.0139%" height="15" fill="rgb(224,145,5)" fg:x="26769" fg:w="14"/><text x="26.8300%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (498 samples, 0.49%)</title><rect x="28.2491%" y="117" width="0.4945%" height="15" fill="rgb(234,130,49)" fg:x="28450" fg:w="498"/><text x="28.4991%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (12 samples, 0.01%)</title><rect x="28.7436%" y="117" width="0.0119%" height="15" fill="rgb(254,6,2)" fg:x="28948" fg:w="12"/><text x="28.9936%" y="127.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (17 samples, 0.02%)</title><rect x="29.1924%" y="101" width="0.0169%" height="15" fill="rgb(208,96,46)" fg:x="29400" fg:w="17"/><text x="29.4424%" y="111.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as tailcall::core::http::response::FromValue&gt;::from_value (508 samples, 0.50%)</title><rect x="28.7555%" y="117" width="0.5044%" height="15" fill="rgb(239,3,39)" fg:x="28960" fg:w="508"/><text x="29.0055%" y="127.50"></text></g><g><title>tailcall`mi_malloc_aligned (48 samples, 0.05%)</title><rect x="29.2123%" y="101" width="0.0477%" height="15" fill="rgb(233,210,1)" fg:x="29420" fg:w="48"/><text x="29.4623%" y="111.50"></text></g><g><title>tailcall`DYLD-STUB$$memcpy (81 samples, 0.08%)</title><rect x="29.2619%" y="117" width="0.0804%" height="15" fill="rgb(244,137,37)" fg:x="29470" fg:w="81"/><text x="29.5119%" y="127.50"></text></g><g><title>tailcall`_mi_malloc_generic (11 samples, 0.01%)</title><rect x="29.3434%" y="117" width="0.0109%" height="15" fill="rgb(240,136,2)" fg:x="29552" fg:w="11"/><text x="29.5934%" y="127.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (75 samples, 0.07%)</title><rect x="29.7356%" y="101" width="0.0745%" height="15" fill="rgb(239,18,37)" fg:x="29947" fg:w="75"/><text x="29.9856%" y="111.50"></text></g><g><title>tailcall`async_graphql_value::Name::new (764 samples, 0.76%)</title><rect x="29.3593%" y="117" width="0.7586%" height="15" fill="rgb(218,185,22)" fg:x="29568" fg:w="764"/><text x="29.6093%" y="127.50"></text></g><g><title>tailcall`mi_malloc_aligned (309 samples, 0.31%)</title><rect x="29.8110%" y="101" width="0.3068%" height="15" fill="rgb(225,218,4)" fg:x="30023" fg:w="309"/><text x="30.0610%" y="111.50"></text></g><g><title>tailcall`hashbrown::raw::RawTableInner::fallible_with_capacity (23 samples, 0.02%)</title><rect x="30.1179%" y="117" width="0.0228%" height="15" fill="rgb(230,182,32)" fg:x="30332" fg:w="23"/><text x="30.3679%" y="127.50"></text></g><g><title>tailcall`mi_malloc_aligned (11 samples, 0.01%)</title><rect x="30.1298%" y="101" width="0.0109%" height="15" fill="rgb(242,56,43)" fg:x="30344" fg:w="11"/><text x="30.3798%" y="111.50"></text></g><g><title>tailcall`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,581 samples, 1.57%)</title><rect x="31.3243%" y="101" width="1.5698%" height="15" fill="rgb(233,99,24)" fg:x="31547" fg:w="1581"/><text x="31.5743%" y="111.50"></text></g><g><title>tailcall`indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (3,442 samples, 3.42%)</title><rect x="30.1437%" y="117" width="3.4177%" height="15" fill="rgb(234,209,42)" fg:x="30358" fg:w="3442"/><text x="30.3937%" y="127.50">tai..</text></g><g><title>tailcall`indexmap::map::IndexMap&lt;K,V,S&gt;::hash (672 samples, 0.67%)</title><rect x="32.8941%" y="101" width="0.6673%" height="15" fill="rgb(227,7,12)" fg:x="33128" fg:w="672"/><text x="33.1441%" y="111.50"></text></g><g><title>tailcall`mi_free (236 samples, 0.23%)</title><rect x="33.5614%" y="117" width="0.2343%" height="15" fill="rgb(245,203,43)" fg:x="33800" fg:w="236"/><text x="33.8114%" y="127.50"></text></g><g><title>tailcall`_mi_free_delayed_block (64 samples, 0.06%)</title><rect x="33.8275%" y="85" width="0.0635%" height="15" fill="rgb(238,205,33)" fg:x="34068" fg:w="64"/><text x="34.0775%" y="95.50"></text></g><g><title>tailcall`mi_segment_span_allocate (15 samples, 0.01%)</title><rect x="33.9635%" y="37" width="0.0149%" height="15" fill="rgb(231,56,7)" fg:x="34205" fg:w="15"/><text x="34.2135%" y="47.50"></text></g><g><title>tailcall`mi_page_fresh_alloc (28 samples, 0.03%)</title><rect x="33.9595%" y="69" width="0.0278%" height="15" fill="rgb(244,186,29)" fg:x="34201" fg:w="28"/><text x="34.2095%" y="79.50"></text></g><g><title>tailcall`mi_segments_page_alloc (28 samples, 0.03%)</title><rect x="33.9595%" y="53" width="0.0278%" height="15" fill="rgb(234,111,31)" fg:x="34201" fg:w="28"/><text x="34.2095%" y="63.50"></text></g><g><title>tailcall`mi_find_page (92 samples, 0.09%)</title><rect x="33.8970%" y="85" width="0.0914%" height="15" fill="rgb(241,149,10)" fg:x="34138" fg:w="92"/><text x="34.1470%" y="95.50"></text></g><g><title>tailcall`_mi_malloc_generic (196 samples, 0.19%)</title><rect x="33.8007%" y="101" width="0.1946%" height="15" fill="rgb(249,206,44)" fg:x="34041" fg:w="196"/><text x="34.0507%" y="111.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (254 samples, 0.25%)</title><rect x="33.7957%" y="117" width="0.2522%" height="15" fill="rgb(251,153,30)" fg:x="34036" fg:w="254"/><text x="34.0457%" y="127.50"></text></g><g><title>tailcall`mi_find_page (53 samples, 0.05%)</title><rect x="33.9953%" y="101" width="0.0526%" height="15" fill="rgb(239,152,38)" fg:x="34237" fg:w="53"/><text x="34.2453%" y="111.50"></text></g><g><title>tailcall`mi_malloc_aligned (23 samples, 0.02%)</title><rect x="34.0479%" y="117" width="0.0228%" height="15" fill="rgb(249,139,47)" fg:x="34290" fg:w="23"/><text x="34.2979%" y="127.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as tailcall::core::http::response::FromValue&gt;::from_value (7,534 samples, 7.48%)</title><rect x="26.5939%" y="133" width="7.4808%" height="15" fill="rgb(244,64,35)" fg:x="26783" fg:w="7534"/><text x="26.8439%" y="143.50">tailcall`&lt;..</text></g><g><title>tailcall`async_graphql_value::Name::new (177 samples, 0.18%)</title><rect x="34.0767%" y="133" width="0.1758%" height="15" fill="rgb(216,46,15)" fg:x="34319" fg:w="177"/><text x="34.3267%" y="143.50"></text></g><g><title>tailcall`indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (271 samples, 0.27%)</title><rect x="34.2584%" y="133" width="0.2691%" height="15" fill="rgb(250,74,19)" fg:x="34502" fg:w="271"/><text x="34.5084%" y="143.50"></text></g><g><title>tailcall`mi_free (16 samples, 0.02%)</title><rect x="34.5275%" y="133" width="0.0159%" height="15" fill="rgb(249,42,33)" fg:x="34773" fg:w="16"/><text x="34.7775%" y="143.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as tailcall::core::http::response::FromValue&gt;::from_value (8,067 samples, 8.01%)</title><rect x="26.5453%" y="149" width="8.0100%" height="15" fill="rgb(242,149,17)" fg:x="26734" fg:w="8067"/><text x="26.7953%" y="159.50">tailcall`&lt;a..</text></g><g><title>tailcall`async_graphql_value::Name::new (22 samples, 0.02%)</title><rect x="34.5563%" y="149" width="0.0218%" height="15" fill="rgb(244,29,21)" fg:x="34802" fg:w="22"/><text x="34.8063%" y="159.50"></text></g><g><title>tailcall`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (21 samples, 0.02%)</title><rect x="34.6119%" y="133" width="0.0209%" height="15" fill="rgb(220,130,37)" fg:x="34858" fg:w="21"/><text x="34.8619%" y="143.50"></text></g><g><title>tailcall`indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (58 samples, 0.06%)</title><rect x="34.5821%" y="149" width="0.0576%" height="15" fill="rgb(211,67,2)" fg:x="34828" fg:w="58"/><text x="34.8321%" y="159.50"></text></g><g><title>tailcall`mi_free (11 samples, 0.01%)</title><rect x="34.6397%" y="149" width="0.0109%" height="15" fill="rgb(235,68,52)" fg:x="34886" fg:w="11"/><text x="34.8897%" y="159.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as tailcall::core::http::response::FromValue&gt;::from_value (8,228 samples, 8.17%)</title><rect x="26.4827%" y="165" width="8.1699%" height="15" fill="rgb(246,142,3)" fg:x="26671" fg:w="8228"/><text x="26.7327%" y="175.50">tailcall`&lt;a..</text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as tailcall::core::http::response::FromValue&gt;::from_value (8,251 samples, 8.19%)</title><rect x="26.4708%" y="181" width="8.1927%" height="15" fill="rgb(241,25,7)" fg:x="26659" fg:w="8251"/><text x="26.7208%" y="191.50">tailcall`&lt;a..</text></g><g><title>tailcall`indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (15 samples, 0.01%)</title><rect x="34.6715%" y="181" width="0.0149%" height="15" fill="rgb(242,119,39)" fg:x="34918" fg:w="15"/><text x="34.9215%" y="191.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as tailcall::core::http::response::FromValue&gt;::from_value (8,310 samples, 8.25%)</title><rect x="26.4430%" y="197" width="8.2513%" height="15" fill="rgb(241,98,45)" fg:x="26631" fg:w="8310"/><text x="26.6930%" y="207.50">tailcall`&lt;a..</text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as tailcall::core::http::response::FromValue&gt;::from_value (8,323 samples, 8.26%)</title><rect x="26.4341%" y="213" width="8.2642%" height="15" fill="rgb(254,28,30)" fg:x="26622" fg:w="8323"/><text x="26.6841%" y="223.50">tailcall`&lt;as..</text></g><g><title>tailcall`&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (16 samples, 0.02%)</title><rect x="34.7589%" y="181" width="0.0159%" height="15" fill="rgb(241,142,54)" fg:x="35006" fg:w="16"/><text x="35.0089%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (13 samples, 0.01%)</title><rect x="34.8413%" y="165" width="0.0129%" height="15" fill="rgb(222,85,15)" fg:x="35089" fg:w="13"/><text x="35.0913%" y="175.50"></text></g><g><title>tailcall`&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (44 samples, 0.04%)</title><rect x="34.9157%" y="149" width="0.0437%" height="15" fill="rgb(210,85,47)" fg:x="35164" fg:w="44"/><text x="35.1657%" y="159.50"></text></g><g><title>tailcall`core::str::converts::from_utf8 (30 samples, 0.03%)</title><rect x="34.9297%" y="133" width="0.0298%" height="15" fill="rgb(224,206,25)" fg:x="35178" fg:w="30"/><text x="35.1797%" y="143.50"></text></g><g><title>tailcall`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (12 samples, 0.01%)</title><rect x="34.9594%" y="149" width="0.0119%" height="15" fill="rgb(243,201,19)" fg:x="35208" fg:w="12"/><text x="35.2094%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (312 samples, 0.31%)</title><rect x="35.0538%" y="133" width="0.3098%" height="15" fill="rgb(236,59,4)" fg:x="35303" fg:w="312"/><text x="35.3038%" y="143.50"></text></g><g><title>tailcall`&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed::has_next_key (131 samples, 0.13%)</title><rect x="35.3636%" y="133" width="0.1301%" height="15" fill="rgb(254,179,45)" fg:x="35615" fg:w="131"/><text x="35.6136%" y="143.50"></text></g><g><title>tailcall`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed::has_next_element (36 samples, 0.04%)</title><rect x="35.4936%" y="133" width="0.0357%" height="15" fill="rgb(226,14,10)" fg:x="35746" fg:w="36"/><text x="35.7436%" y="143.50"></text></g><g><title>tailcall`&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (144 samples, 0.14%)</title><rect x="35.5294%" y="133" width="0.1430%" height="15" fill="rgb(244,27,41)" fg:x="35782" fg:w="144"/><text x="35.7794%" y="143.50"></text></g><g><title>tailcall`DYLD-STUB$$memcpy (43 samples, 0.04%)</title><rect x="35.6724%" y="133" width="0.0427%" height="15" fill="rgb(235,35,32)" fg:x="35926" fg:w="43"/><text x="35.9224%" y="143.50"></text></g><g><title>tailcall`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (26 samples, 0.03%)</title><rect x="35.7151%" y="133" width="0.0258%" height="15" fill="rgb(218,68,31)" fg:x="35969" fg:w="26"/><text x="35.9651%" y="143.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (63 samples, 0.06%)</title><rect x="36.8798%" y="117" width="0.0626%" height="15" fill="rgb(207,120,37)" fg:x="37142" fg:w="63"/><text x="37.1298%" y="127.50"></text></g><g><title>tailcall`&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed::has_next_key (358 samples, 0.36%)</title><rect x="36.9423%" y="117" width="0.3555%" height="15" fill="rgb(227,98,0)" fg:x="37205" fg:w="358"/><text x="37.1923%" y="127.50"></text></g><g><title>tailcall`&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (2,519 samples, 2.50%)</title><rect x="37.2978%" y="117" width="2.5012%" height="15" fill="rgb(207,7,3)" fg:x="37563" fg:w="2519"/><text x="37.5478%" y="127.50">ta..</text></g><g><title>tailcall`core::str::converts::from_utf8 (1,275 samples, 1.27%)</title><rect x="38.5330%" y="101" width="1.2660%" height="15" fill="rgb(206,98,19)" fg:x="38807" fg:w="1275"/><text x="38.7830%" y="111.50"></text></g><g><title>tailcall`_mi_heap_realloc_zero (30 samples, 0.03%)</title><rect x="39.9500%" y="101" width="0.0298%" height="15" fill="rgb(217,5,26)" fg:x="40234" fg:w="30"/><text x="40.2000%" y="111.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (11 samples, 0.01%)</title><rect x="40.0056%" y="85" width="0.0109%" height="15" fill="rgb(235,190,38)" fg:x="40290" fg:w="11"/><text x="40.2556%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (262 samples, 0.26%)</title><rect x="40.0165%" y="85" width="0.2602%" height="15" fill="rgb(247,86,24)" fg:x="40301" fg:w="262"/><text x="40.2665%" y="95.50"></text></g><g><title>tailcall`_mi_free_delayed_block (73 samples, 0.07%)</title><rect x="40.4137%" y="53" width="0.0725%" height="15" fill="rgb(205,101,16)" fg:x="40701" fg:w="73"/><text x="40.6637%" y="63.50"></text></g><g><title>tailcall`_mi_malloc_generic (126 samples, 0.13%)</title><rect x="40.3938%" y="69" width="0.1251%" height="15" fill="rgb(246,168,33)" fg:x="40681" fg:w="126"/><text x="40.6438%" y="79.50"></text></g><g><title>tailcall`mi_find_page (32 samples, 0.03%)</title><rect x="40.4871%" y="53" width="0.0318%" height="15" fill="rgb(231,114,1)" fg:x="40775" fg:w="32"/><text x="40.7371%" y="63.50"></text></g><g><title>tailcall`_mi_heap_realloc_zero (250 samples, 0.25%)</title><rect x="40.2796%" y="85" width="0.2482%" height="15" fill="rgb(207,184,53)" fg:x="40566" fg:w="250"/><text x="40.5296%" y="95.50"></text></g><g><title>tailcall`_mi_malloc_generic (12 samples, 0.01%)</title><rect x="40.5278%" y="85" width="0.0119%" height="15" fill="rgb(224,95,51)" fg:x="40816" fg:w="12"/><text x="40.7778%" y="95.50"></text></g><g><title>tailcall`alloc::raw_vec::finish_grow (592 samples, 0.59%)</title><rect x="39.9797%" y="101" width="0.5878%" height="15" fill="rgb(212,188,45)" fg:x="40264" fg:w="592"/><text x="40.2297%" y="111.50"></text></g><g><title>tailcall`mi_realloc_aligned (14 samples, 0.01%)</title><rect x="40.5537%" y="85" width="0.0139%" height="15" fill="rgb(223,154,38)" fg:x="40842" fg:w="14"/><text x="40.8037%" y="95.50"></text></g><g><title>tailcall`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (776 samples, 0.77%)</title><rect x="39.7990%" y="117" width="0.7705%" height="15" fill="rgb(251,22,52)" fg:x="40082" fg:w="776"/><text x="40.0490%" y="127.50"></text></g><g><title>tailcall`alloc::raw_vec::finish_grow (29 samples, 0.03%)</title><rect x="40.5696%" y="117" width="0.0288%" height="15" fill="rgb(229,209,22)" fg:x="40858" fg:w="29"/><text x="40.8196%" y="127.50"></text></g><g><title>tailcall`core::str::converts::from_utf8 (40 samples, 0.04%)</title><rect x="40.5983%" y="117" width="0.0397%" height="15" fill="rgb(234,138,34)" fg:x="40887" fg:w="40"/><text x="40.8483%" y="127.50"></text></g><g><title>tailcall`_mi_malloc_generic (17 samples, 0.02%)</title><rect x="40.6381%" y="101" width="0.0169%" height="15" fill="rgb(212,95,11)" fg:x="40927" fg:w="17"/><text x="40.8881%" y="111.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (18 samples, 0.02%)</title><rect x="40.6381%" y="117" width="0.0179%" height="15" fill="rgb(240,179,47)" fg:x="40927" fg:w="18"/><text x="40.8881%" y="127.50"></text></g><g><title>tailcall`mi_malloc_aligned (178 samples, 0.18%)</title><rect x="40.6559%" y="117" width="0.1767%" height="15" fill="rgb(240,163,11)" fg:x="40945" fg:w="178"/><text x="40.9059%" y="127.50"></text></g><g><title>tailcall`serde_json::de::Deserializer&lt;R&gt;::parse_integer (19 samples, 0.02%)</title><rect x="40.8396%" y="117" width="0.0189%" height="15" fill="rgb(236,37,12)" fg:x="41130" fg:w="19"/><text x="41.0896%" y="127.50"></text></g><g><title>tailcall`&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (1,509 samples, 1.50%)</title><rect x="41.5337%" y="101" width="1.4983%" height="15" fill="rgb(232,164,16)" fg:x="41829" fg:w="1509"/><text x="41.7837%" y="111.50"></text></g><g><title>tailcall`core::str::converts::from_utf8 (540 samples, 0.54%)</title><rect x="42.4959%" y="85" width="0.5362%" height="15" fill="rgb(244,205,15)" fg:x="42798" fg:w="540"/><text x="42.7459%" y="95.50"></text></g><g><title>tailcall`serde_json::de::Deserializer&lt;R&gt;::f64_from_parts (13 samples, 0.01%)</title><rect x="43.0370%" y="101" width="0.0129%" height="15" fill="rgb(223,117,47)" fg:x="43343" fg:w="13"/><text x="43.2870%" y="111.50"></text></g><g><title>tailcall`serde_json::de::Deserializer&lt;R&gt;::f64_from_parts (21 samples, 0.02%)</title><rect x="43.4799%" y="85" width="0.0209%" height="15" fill="rgb(244,107,35)" fg:x="43789" fg:w="21"/><text x="43.7299%" y="95.50"></text></g><g><title>tailcall`tailcall::core::http::response::Response&lt;bytes::bytes::Bytes&gt;::to_json (17,303 samples, 17.18%)</title><rect x="26.4261%" y="229" width="17.1808%" height="15" fill="rgb(205,140,8)" fg:x="26614" fg:w="17303"/><text x="26.6761%" y="239.50">tailcall`tailcall::core::ht..</text></g><g><title>tailcall`serde_json_borrow::de::_&lt;impl serde::de::Deserialize for serde_json_borrow::value::Value&gt;::deserialize (8,969 samples, 8.91%)</title><rect x="34.7013%" y="213" width="8.9057%" height="15" fill="rgb(228,84,46)" fg:x="34948" fg:w="8969"/><text x="34.9513%" y="223.50">tailcall`serd..</text></g><g><title>tailcall`serde_json_borrow::de::_&lt;impl serde::de::Deserialize for serde_json_borrow::value::Value&gt;::deserialize (8,937 samples, 8.87%)</title><rect x="34.7330%" y="197" width="8.8739%" height="15" fill="rgb(254,188,9)" fg:x="34980" fg:w="8937"/><text x="34.9830%" y="207.50">tailcall`serd..</text></g><g><title>tailcall`serde_json_borrow::de::_&lt;impl serde::de::Deserialize for serde_json_borrow::value::Value&gt;::deserialize (8,889 samples, 8.83%)</title><rect x="34.7807%" y="181" width="8.8262%" height="15" fill="rgb(206,112,54)" fg:x="35028" fg:w="8889"/><text x="35.0307%" y="191.50">tailcall`ser..</text></g><g><title>tailcall`serde_json_borrow::de::_&lt;impl serde::de::Deserialize for serde_json_borrow::value::Value&gt;::deserialize (8,801 samples, 8.74%)</title><rect x="34.8681%" y="165" width="8.7389%" height="15" fill="rgb(216,84,49)" fg:x="35116" fg:w="8801"/><text x="35.1181%" y="175.50">tailcall`ser..</text></g><g><title>tailcall`serde_json_borrow::de::_&lt;impl serde::de::Deserialize for serde_json_borrow::value::Value&gt;::deserialize (8,693 samples, 8.63%)</title><rect x="34.9753%" y="149" width="8.6316%" height="15" fill="rgb(214,194,35)" fg:x="35224" fg:w="8693"/><text x="35.2253%" y="159.50">tailcall`ser..</text></g><g><title>tailcall`serde_json_borrow::de::_&lt;impl serde::de::Deserialize for serde_json_borrow::value::Value&gt;::deserialize (7,909 samples, 7.85%)</title><rect x="35.7538%" y="133" width="7.8532%" height="15" fill="rgb(249,28,3)" fg:x="36008" fg:w="7909"/><text x="36.0038%" y="143.50">tailcall`se..</text></g><g><title>tailcall`serde_json_borrow::de::_&lt;impl serde::de::Deserialize for serde_json_borrow::value::Value&gt;::deserialize (2,768 samples, 2.75%)</title><rect x="40.8585%" y="117" width="2.7485%" height="15" fill="rgb(222,56,52)" fg:x="41149" fg:w="2768"/><text x="41.1085%" y="127.50">ta..</text></g><g><title>tailcall`serde_json::de::Deserializer&lt;R&gt;::parse_integer (551 samples, 0.55%)</title><rect x="43.0598%" y="101" width="0.5471%" height="15" fill="rgb(245,217,50)" fg:x="43366" fg:w="551"/><text x="43.3098%" y="111.50"></text></g><g><title>tailcall`serde_json::de::Deserializer&lt;R&gt;::parse_decimal (107 samples, 0.11%)</title><rect x="43.5007%" y="85" width="0.1062%" height="15" fill="rgb(213,201,24)" fg:x="43810" fg:w="107"/><text x="43.7507%" y="95.50"></text></g><g><title>tailcall`tailcall::core::ir::eval_http::execute_raw_request::_{{closure}} (18,903 samples, 18.77%)</title><rect x="24.8384%" y="245" width="18.7695%" height="15" fill="rgb(248,116,28)" fg:x="25015" fg:w="18903"/><text x="25.0884%" y="255.50">tailcall`tailcall::core::ir::..</text></g><g><title>tailcall`tailcall::core::ir::eval_http::EvalHttp&lt;Context&gt;::execute::_{{closure}} (18,940 samples, 18.81%)</title><rect x="24.8027%" y="261" width="18.8063%" height="15" fill="rgb(219,72,43)" fg:x="24979" fg:w="18940"/><text x="25.0527%" y="271.50">tailcall`tailcall::core::ir::..</text></g><g><title>tailcall`tailcall::core::ir::eval_io::eval_io::_{{closure}} (19,552 samples, 19.41%)</title><rect x="24.2039%" y="293" width="19.4140%" height="15" fill="rgb(209,138,14)" fg:x="24376" fg:w="19552"/><text x="24.4539%" y="303.50">tailcall`tailcall::core::ir::e..</text></g><g><title>tailcall`tailcall::core::ir::eval_io::eval_io_inner::_{{closure}} (19,534 samples, 19.40%)</title><rect x="24.2218%" y="277" width="19.3961%" height="15" fill="rgb(222,18,33)" fg:x="24394" fg:w="19534"/><text x="24.4718%" y="287.50">tailcall`tailcall::core::ir::e..</text></g><g><title>tailcall`tailcall::core::ir::eval::_&lt;impl tailcall::core::ir::model::IR&gt;::eval::_{{closure}}::_{{closure}} (19,577 samples, 19.44%)</title><rect x="24.1811%" y="309" width="19.4388%" height="15" fill="rgb(213,199,7)" fg:x="24353" fg:w="19577"/><text x="24.4311%" y="319.50">tailcall`tailcall::core::ir::e..</text></g><g><title>tailcall`tracing::span::Span::new (23 samples, 0.02%)</title><rect x="43.6238%" y="309" width="0.0228%" height="15" fill="rgb(250,110,10)" fg:x="43934" fg:w="23"/><text x="43.8738%" y="319.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::new_span (23 samples, 0.02%)</title><rect x="43.6238%" y="293" width="0.0228%" height="15" fill="rgb(248,123,6)" fg:x="43934" fg:w="23"/><text x="43.8738%" y="303.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::new_span (22 samples, 0.02%)</title><rect x="43.6248%" y="277" width="0.0218%" height="15" fill="rgb(206,91,31)" fg:x="43935" fg:w="22"/><text x="43.8748%" y="287.50"></text></g><g><title>tailcall`&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (19,789 samples, 19.65%)</title><rect x="23.9984%" y="325" width="19.6493%" height="15" fill="rgb(211,154,13)" fg:x="24169" fg:w="19789"/><text x="24.2484%" y="335.50">tailcall`&lt;core::pin::Pin&lt;P&gt; as ..</text></g><g><title>tailcall`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (11 samples, 0.01%)</title><rect x="43.6655%" y="325" width="0.0109%" height="15" fill="rgb(225,148,7)" fg:x="43976" fg:w="11"/><text x="43.9155%" y="335.50"></text></g><g><title>tailcall`_mi_free_delayed_block (16 samples, 0.02%)</title><rect x="43.6765%" y="293" width="0.0159%" height="15" fill="rgb(220,160,43)" fg:x="43987" fg:w="16"/><text x="43.9265%" y="303.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (18 samples, 0.02%)</title><rect x="43.6765%" y="325" width="0.0179%" height="15" fill="rgb(213,52,39)" fg:x="43987" fg:w="18"/><text x="43.9265%" y="335.50"></text></g><g><title>tailcall`_mi_malloc_generic (18 samples, 0.02%)</title><rect x="43.6765%" y="309" width="0.0179%" height="15" fill="rgb(243,137,7)" fg:x="43987" fg:w="18"/><text x="43.9265%" y="319.50"></text></g><g><title>tailcall`_mi_page_free (21 samples, 0.02%)</title><rect x="43.7807%" y="229" width="0.0209%" height="15" fill="rgb(230,79,13)" fg:x="44092" fg:w="21"/><text x="44.0307%" y="239.50"></text></g><g><title>tailcall`mi_segment_page_clear (21 samples, 0.02%)</title><rect x="43.7807%" y="213" width="0.0209%" height="15" fill="rgb(247,105,23)" fg:x="44092" fg:w="21"/><text x="44.0307%" y="223.50"></text></g><g><title>tailcall`mi_segment_span_free_coalesce (20 samples, 0.02%)</title><rect x="43.7817%" y="197" width="0.0199%" height="15" fill="rgb(223,179,41)" fg:x="44093" fg:w="20"/><text x="44.0317%" y="207.50"></text></g><g><title>tailcall`mi_segment_span_free (14 samples, 0.01%)</title><rect x="43.7877%" y="181" width="0.0139%" height="15" fill="rgb(218,9,34)" fg:x="44099" fg:w="14"/><text x="44.0377%" y="191.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (289 samples, 0.29%)</title><rect x="44.1173%" y="213" width="0.2870%" height="15" fill="rgb(222,106,8)" fg:x="44431" fg:w="289"/><text x="44.3673%" y="223.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (608 samples, 0.60%)</title><rect x="43.8016%" y="229" width="0.6037%" height="15" fill="rgb(211,220,0)" fg:x="44113" fg:w="608"/><text x="44.0516%" y="239.50"></text></g><g><title>tailcall`mi_free (141 samples, 0.14%)</title><rect x="44.4053%" y="229" width="0.1400%" height="15" fill="rgb(229,52,16)" fg:x="44721" fg:w="141"/><text x="44.6553%" y="239.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (783 samples, 0.78%)</title><rect x="43.7698%" y="245" width="0.7775%" height="15" fill="rgb(212,155,18)" fg:x="44081" fg:w="783"/><text x="44.0198%" y="255.50"></text></g><g><title>tailcall`mi_free (25 samples, 0.02%)</title><rect x="44.5473%" y="245" width="0.0248%" height="15" fill="rgb(242,21,14)" fg:x="44864" fg:w="25"/><text x="44.7973%" y="255.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (818 samples, 0.81%)</title><rect x="43.7609%" y="261" width="0.8122%" height="15" fill="rgb(222,19,48)" fg:x="44072" fg:w="818"/><text x="44.0109%" y="271.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (827 samples, 0.82%)</title><rect x="43.7569%" y="277" width="0.8212%" height="15" fill="rgb(232,45,27)" fg:x="44068" fg:w="827"/><text x="44.0069%" y="287.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (834 samples, 0.83%)</title><rect x="43.7559%" y="293" width="0.8281%" height="15" fill="rgb(249,103,42)" fg:x="44067" fg:w="834"/><text x="44.0059%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (318 samples, 0.32%)</title><rect x="44.6376%" y="261" width="0.3158%" height="15" fill="rgb(246,81,33)" fg:x="44955" fg:w="318"/><text x="44.8876%" y="271.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (11 samples, 0.01%)</title><rect x="45.0010%" y="149" width="0.0109%" height="15" fill="rgb(252,33,42)" fg:x="45321" fg:w="11"/><text x="45.2510%" y="159.50"></text></g><g><title>tailcall`_mi_page_free (23 samples, 0.02%)</title><rect x="44.9901%" y="213" width="0.0228%" height="15" fill="rgb(209,212,41)" fg:x="45310" fg:w="23"/><text x="45.2401%" y="223.50"></text></g><g><title>tailcall`mi_segment_page_clear (23 samples, 0.02%)</title><rect x="44.9901%" y="197" width="0.0228%" height="15" fill="rgb(207,154,6)" fg:x="45310" fg:w="23"/><text x="45.2401%" y="207.50"></text></g><g><title>tailcall`mi_segment_span_free_coalesce (20 samples, 0.02%)</title><rect x="44.9931%" y="181" width="0.0199%" height="15" fill="rgb(223,64,47)" fg:x="45313" fg:w="20"/><text x="45.2431%" y="191.50"></text></g><g><title>tailcall`mi_segment_span_free (19 samples, 0.02%)</title><rect x="44.9941%" y="165" width="0.0189%" height="15" fill="rgb(211,161,38)" fg:x="45314" fg:w="19"/><text x="45.2441%" y="175.50"></text></g><g><title>tailcall`_mi_page_free (20 samples, 0.02%)</title><rect x="45.3247%" y="197" width="0.0199%" height="15" fill="rgb(219,138,40)" fg:x="45647" fg:w="20"/><text x="45.5747%" y="207.50"></text></g><g><title>tailcall`mi_segment_page_clear (20 samples, 0.02%)</title><rect x="45.3247%" y="181" width="0.0199%" height="15" fill="rgb(241,228,46)" fg:x="45647" fg:w="20"/><text x="45.5747%" y="191.50"></text></g><g><title>tailcall`mi_segment_span_free_coalesce (17 samples, 0.02%)</title><rect x="45.3277%" y="165" width="0.0169%" height="15" fill="rgb(223,209,38)" fg:x="45650" fg:w="17"/><text x="45.5777%" y="175.50"></text></g><g><title>tailcall`mi_segment_span_free (14 samples, 0.01%)</title><rect x="45.3307%" y="149" width="0.0139%" height="15" fill="rgb(236,164,45)" fg:x="45653" fg:w="14"/><text x="45.5807%" y="159.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (231 samples, 0.23%)</title><rect x="45.3446%" y="197" width="0.2294%" height="15" fill="rgb(231,15,5)" fg:x="45667" fg:w="231"/><text x="45.5946%" y="207.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (569 samples, 0.56%)</title><rect x="45.0140%" y="213" width="0.5650%" height="15" fill="rgb(252,35,15)" fg:x="45334" fg:w="569"/><text x="45.2640%" y="223.50"></text></g><g><title>tailcall`mi_free (147 samples, 0.15%)</title><rect x="45.5789%" y="213" width="0.1460%" height="15" fill="rgb(248,181,18)" fg:x="45903" fg:w="147"/><text x="45.8289%" y="223.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (773 samples, 0.77%)</title><rect x="44.9673%" y="229" width="0.7675%" height="15" fill="rgb(233,39,42)" fg:x="45287" fg:w="773"/><text x="45.2173%" y="239.50"></text></g><g><title>tailcall`mi_free (18 samples, 0.02%)</title><rect x="45.7348%" y="229" width="0.0179%" height="15" fill="rgb(238,110,33)" fg:x="46060" fg:w="18"/><text x="45.9848%" y="239.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (799 samples, 0.79%)</title><rect x="44.9623%" y="245" width="0.7934%" height="15" fill="rgb(233,195,10)" fg:x="45282" fg:w="799"/><text x="45.2123%" y="255.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (802 samples, 0.80%)</title><rect x="44.9613%" y="261" width="0.7963%" height="15" fill="rgb(254,105,3)" fg:x="45281" fg:w="802"/><text x="45.2113%" y="271.50"></text></g><g><title>tailcall`mi_free (17 samples, 0.02%)</title><rect x="45.9354%" y="245" width="0.0169%" height="15" fill="rgb(221,225,9)" fg:x="46262" fg:w="17"/><text x="46.1854%" y="255.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (15 samples, 0.01%)</title><rect x="45.9523%" y="245" width="0.0149%" height="15" fill="rgb(224,227,45)" fg:x="46279" fg:w="15"/><text x="46.2023%" y="255.50"></text></g><g><title>tailcall`_mi_malloc_generic (15 samples, 0.01%)</title><rect x="45.9523%" y="229" width="0.0149%" height="15" fill="rgb(229,198,43)" fg:x="46279" fg:w="15"/><text x="46.2023%" y="239.50"></text></g><g><title>tailcall`tailcall::core::jit::context::Context&lt;Input,Output&gt;::build_args (32 samples, 0.03%)</title><rect x="45.9672%" y="245" width="0.0318%" height="15" fill="rgb(206,209,35)" fg:x="46294" fg:w="32"/><text x="46.2172%" y="255.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (349 samples, 0.35%)</title><rect x="46.1270%" y="197" width="0.3465%" height="15" fill="rgb(245,195,53)" fg:x="46455" fg:w="349"/><text x="46.3770%" y="207.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (154 samples, 0.15%)</title><rect x="46.3207%" y="181" width="0.1529%" height="15" fill="rgb(240,92,26)" fg:x="46650" fg:w="154"/><text x="46.5707%" y="191.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (485 samples, 0.48%)</title><rect x="46.0824%" y="213" width="0.4816%" height="15" fill="rgb(207,40,23)" fg:x="46410" fg:w="485"/><text x="46.3324%" y="223.50"></text></g><g><title>tailcall`mi_free (91 samples, 0.09%)</title><rect x="46.4736%" y="197" width="0.0904%" height="15" fill="rgb(223,111,35)" fg:x="46804" fg:w="91"/><text x="46.7236%" y="207.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (624 samples, 0.62%)</title><rect x="46.0526%" y="229" width="0.6196%" height="15" fill="rgb(229,147,28)" fg:x="46380" fg:w="624"/><text x="46.3026%" y="239.50"></text></g><g><title>tailcall`mi_free (109 samples, 0.11%)</title><rect x="46.5639%" y="213" width="0.1082%" height="15" fill="rgb(211,29,28)" fg:x="46895" fg:w="109"/><text x="46.8139%" y="223.50"></text></g><g><title>tailcall`mi_free (31 samples, 0.03%)</title><rect x="46.6741%" y="229" width="0.0308%" height="15" fill="rgb(228,72,33)" fg:x="47006" fg:w="31"/><text x="46.9241%" y="239.50"></text></g><g><title>tailcall`tailcall::core::jit::exec::ExecutorInner&lt;Input,Output,Error,Exec&gt;::iter_field::_{{closure}} (149 samples, 0.15%)</title><rect x="46.7059%" y="229" width="0.1479%" height="15" fill="rgb(205,214,31)" fg:x="47038" fg:w="149"/><text x="46.9559%" y="239.50"></text></g><g><title>tailcall`mi_malloc_aligned (30 samples, 0.03%)</title><rect x="47.0961%" y="213" width="0.0298%" height="15" fill="rgb(224,111,15)" fg:x="47431" fg:w="30"/><text x="47.3461%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (13 samples, 0.01%)</title><rect x="47.7306%" y="197" width="0.0129%" height="15" fill="rgb(253,21,26)" fg:x="48070" fg:w="13"/><text x="47.9806%" y="207.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (22 samples, 0.02%)</title><rect x="47.7435%" y="197" width="0.0218%" height="15" fill="rgb(245,139,43)" fg:x="48083" fg:w="22"/><text x="47.9935%" y="207.50"></text></g><g><title>tailcall`_mi_malloc_generic (18 samples, 0.02%)</title><rect x="47.7475%" y="181" width="0.0179%" height="15" fill="rgb(252,170,7)" fg:x="48087" fg:w="18"/><text x="47.9975%" y="191.50"></text></g><g><title>tailcall`mi_malloc_aligned (42 samples, 0.04%)</title><rect x="47.7654%" y="197" width="0.0417%" height="15" fill="rgb(231,118,14)" fg:x="48105" fg:w="42"/><text x="48.0154%" y="207.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (21 samples, 0.02%)</title><rect x="49.0810%" y="181" width="0.0209%" height="15" fill="rgb(238,83,0)" fg:x="49430" fg:w="21"/><text x="49.3310%" y="191.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as core::clone::Clone&gt;::clone (104 samples, 0.10%)</title><rect x="49.1019%" y="181" width="0.1033%" height="15" fill="rgb(221,39,39)" fg:x="49451" fg:w="104"/><text x="49.3519%" y="191.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (158 samples, 0.16%)</title><rect x="49.2052%" y="181" width="0.1569%" height="15" fill="rgb(222,119,46)" fg:x="49555" fg:w="158"/><text x="49.4552%" y="191.50"></text></g><g><title>tailcall`_mi_free_delayed_block (27 samples, 0.03%)</title><rect x="49.3660%" y="149" width="0.0268%" height="15" fill="rgb(222,165,49)" fg:x="49717" fg:w="27"/><text x="49.6160%" y="159.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (49 samples, 0.05%)</title><rect x="49.3620%" y="181" width="0.0487%" height="15" fill="rgb(219,113,52)" fg:x="49713" fg:w="49"/><text x="49.6120%" y="191.50"></text></g><g><title>tailcall`_mi_malloc_generic (47 samples, 0.05%)</title><rect x="49.3640%" y="165" width="0.0467%" height="15" fill="rgb(214,7,15)" fg:x="49715" fg:w="47"/><text x="49.6140%" y="175.50"></text></g><g><title>tailcall`mi_find_page (14 samples, 0.01%)</title><rect x="49.3968%" y="149" width="0.0139%" height="15" fill="rgb(235,32,4)" fg:x="49748" fg:w="14"/><text x="49.6468%" y="159.50"></text></g><g><title>tailcall`mi_malloc_aligned (97 samples, 0.10%)</title><rect x="49.4107%" y="181" width="0.0963%" height="15" fill="rgb(238,90,54)" fg:x="49762" fg:w="97"/><text x="49.6607%" y="191.50"></text></g><g><title>tailcall`tailcall::core::json::graphql::_&lt;impl tailcall::core::json::json_like::JsonLike for async_graphql_value::ConstValue&gt;::get_key (220 samples, 0.22%)</title><rect x="49.5070%" y="181" width="0.2184%" height="15" fill="rgb(213,208,19)" fg:x="49859" fg:w="220"/><text x="49.7570%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (273 samples, 0.27%)</title><rect x="50.9080%" y="165" width="0.2711%" height="15" fill="rgb(233,156,4)" fg:x="51270" fg:w="273"/><text x="51.1580%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (740 samples, 0.73%)</title><rect x="51.1791%" y="165" width="0.7348%" height="15" fill="rgb(207,194,5)" fg:x="51543" fg:w="740"/><text x="51.4291%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (19 samples, 0.02%)</title><rect x="52.5394%" y="149" width="0.0189%" height="15" fill="rgb(206,111,30)" fg:x="52913" fg:w="19"/><text x="52.7894%" y="159.50"></text></g><g><title>tailcall`_mi_free_delayed_block (73 samples, 0.07%)</title><rect x="52.5732%" y="117" width="0.0725%" height="15" fill="rgb(243,70,54)" fg:x="52947" fg:w="73"/><text x="52.8232%" y="127.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (98 samples, 0.10%)</title><rect x="52.5593%" y="149" width="0.0973%" height="15" fill="rgb(242,28,8)" fg:x="52933" fg:w="98"/><text x="52.8093%" y="159.50"></text></g><g><title>tailcall`_mi_malloc_generic (96 samples, 0.10%)</title><rect x="52.5613%" y="133" width="0.0953%" height="15" fill="rgb(219,106,18)" fg:x="52935" fg:w="96"/><text x="52.8113%" y="143.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as core::clone::Clone&gt;::clone (893 samples, 0.89%)</title><rect x="51.9139%" y="165" width="0.8867%" height="15" fill="rgb(244,222,10)" fg:x="52283" fg:w="893"/><text x="52.1639%" y="175.50"></text></g><g><title>tailcall`mi_malloc_aligned (145 samples, 0.14%)</title><rect x="52.6566%" y="149" width="0.1440%" height="15" fill="rgb(236,179,52)" fg:x="53031" fg:w="145"/><text x="52.9066%" y="159.50"></text></g><g><title>tailcall`DYLD-STUB$$memcmp (29 samples, 0.03%)</title><rect x="52.8006%" y="165" width="0.0288%" height="15" fill="rgb(213,23,39)" fg:x="53176" fg:w="29"/><text x="53.0506%" y="175.50"></text></g><g><title>tailcall`DYLD-STUB$$memcpy (76 samples, 0.08%)</title><rect x="52.8294%" y="165" width="0.0755%" height="15" fill="rgb(238,48,10)" fg:x="53205" fg:w="76"/><text x="53.0794%" y="175.50"></text></g><g><title>tailcall`alloc::sync::Arc&lt;T,A&gt;::drop_slow (139 samples, 0.14%)</title><rect x="52.9048%" y="165" width="0.1380%" height="15" fill="rgb(251,196,23)" fg:x="53281" fg:w="139"/><text x="53.1548%" y="175.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;async_graphql_value::ConstValue&gt; (243 samples, 0.24%)</title><rect x="53.0429%" y="165" width="0.2413%" height="15" fill="rgb(250,152,24)" fg:x="53420" fg:w="243"/><text x="53.2929%" y="175.50"></text></g><g><title>tailcall`mi_free (208 samples, 0.21%)</title><rect x="53.2891%" y="165" width="0.2065%" height="15" fill="rgb(209,150,17)" fg:x="53668" fg:w="208"/><text x="53.5391%" y="175.50"></text></g><g><title>tailcall`mi_malloc_aligned (42 samples, 0.04%)</title><rect x="53.4976%" y="165" width="0.0417%" height="15" fill="rgb(234,202,34)" fg:x="53878" fg:w="42"/><text x="53.7476%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (112 samples, 0.11%)</title><rect x="54.5869%" y="149" width="0.1112%" height="15" fill="rgb(253,148,53)" fg:x="54975" fg:w="112"/><text x="54.8369%" y="159.50"></text></g><g><title>tailcall`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4,085 samples, 4.06%)</title><rect x="54.6981%" y="149" width="4.0562%" height="15" fill="rgb(218,129,16)" fg:x="55087" fg:w="4085"/><text x="54.9481%" y="159.50">tail..</text></g><g><title>tailcall`indexmap::map::IndexMap&lt;K,V,S&gt;::hash (833 samples, 0.83%)</title><rect x="58.7543%" y="149" width="0.8271%" height="15" fill="rgb(216,85,19)" fg:x="59172" fg:w="833"/><text x="59.0043%" y="159.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (12 samples, 0.01%)</title><rect x="59.5814%" y="149" width="0.0119%" height="15" fill="rgb(235,228,7)" fg:x="60005" fg:w="12"/><text x="59.8314%" y="159.50"></text></g><g><title>tailcall`_mi_malloc_generic (12 samples, 0.01%)</title><rect x="59.5814%" y="133" width="0.0119%" height="15" fill="rgb(245,175,0)" fg:x="60005" fg:w="12"/><text x="59.8314%" y="143.50"></text></g><g><title>tailcall`tailcall::core::jit::exec::ExecutorInner&lt;Input,Output,Error,Exec&gt;::execute::_{{closure}} (14,062 samples, 13.96%)</title><rect x="45.9989%" y="245" width="13.9627%" height="15" fill="rgb(208,168,36)" fg:x="46326" fg:w="14062"/><text x="46.2489%" y="255.50">tailcall`tailcall::co..</text></g><g><title>tailcall`tailcall::core::json::json_like_list::JsonLikeList::map_ref (13,201 samples, 13.11%)</title><rect x="46.8539%" y="229" width="13.1078%" height="15" fill="rgb(246,171,24)" fg:x="47187" fg:w="13201"/><text x="47.1039%" y="239.50">tailcall`tailcall::c..</text></g><g><title>tailcall`tailcall::core::json::json_like_list::JsonLikeList::map_ref (12,927 samples, 12.84%)</title><rect x="47.1259%" y="213" width="12.8357%" height="15" fill="rgb(215,142,24)" fg:x="47461" fg:w="12927"/><text x="47.3759%" y="223.50">tailcall`tailcall::..</text></g><g><title>tailcall`tailcall::core::json::json_like_list::JsonLikeList::map_ref (12,241 samples, 12.15%)</title><rect x="47.8071%" y="197" width="12.1546%" height="15" fill="rgb(250,187,7)" fg:x="48147" fg:w="12241"/><text x="48.0571%" y="207.50">tailcall`tailcall:..</text></g><g><title>tailcall`tailcall::core::json::json_like_list::JsonLikeList::map_ref (10,309 samples, 10.24%)</title><rect x="49.7255%" y="181" width="10.2362%" height="15" fill="rgb(228,66,33)" fg:x="50079" fg:w="10309"/><text x="49.9755%" y="191.50">tailcall`tailca..</text></g><g><title>tailcall`tailcall::core::json::graphql::_&lt;impl tailcall::core::json::json_like::JsonLike for async_graphql_value::ConstValue&gt;::get_key (6,468 samples, 6.42%)</title><rect x="53.5393%" y="165" width="6.4223%" height="15" fill="rgb(234,215,21)" fg:x="53920" fg:w="6468"/><text x="53.7893%" y="175.50">tailcall..</text></g><g><title>tailcall`mi_malloc_aligned (371 samples, 0.37%)</title><rect x="59.5933%" y="149" width="0.3684%" height="15" fill="rgb(222,191,20)" fg:x="60017" fg:w="371"/><text x="59.8433%" y="159.50"></text></g><g><title>tailcall`tailcall::core::jit::exec::ExecutorInner&lt;Input,Output,Error,Exec&gt;::iter_field::_{{closure}} (11 samples, 0.01%)</title><rect x="59.9617%" y="245" width="0.0109%" height="15" fill="rgb(245,79,54)" fg:x="60388" fg:w="11"/><text x="60.2117%" y="255.50"></text></g><g><title>tailcall`tailcall::core::jit::exec::ExecutorInner&lt;Input,Output,Error,Exec&gt;::iter_field::_{{closure}} (14,296 samples, 14.20%)</title><rect x="45.7924%" y="261" width="14.1951%" height="15" fill="rgb(240,10,37)" fg:x="46118" fg:w="14296"/><text x="46.0424%" y="271.50">tailcall`tailcall::cor..</text></g><g><title>tailcall`tailcall::core::json::json_like_list::JsonLikeList::map_ref (15 samples, 0.01%)</title><rect x="59.9726%" y="245" width="0.0149%" height="15" fill="rgb(214,192,32)" fg:x="60399" fg:w="15"/><text x="60.2226%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (16 samples, 0.02%)</title><rect x="60.1106%" y="181" width="0.0159%" height="15" fill="rgb(209,36,54)" fg:x="60538" fg:w="16"/><text x="60.3606%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (114 samples, 0.11%)</title><rect x="60.4750%" y="165" width="0.1132%" height="15" fill="rgb(220,10,11)" fg:x="60905" fg:w="114"/><text x="60.7250%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (12 samples, 0.01%)</title><rect x="61.1899%" y="149" width="0.0119%" height="15" fill="rgb(221,106,17)" fg:x="61625" fg:w="12"/><text x="61.4399%" y="159.50"></text></g><g><title>tailcall`mi_page_fresh_alloc (19 samples, 0.02%)</title><rect x="61.2515%" y="101" width="0.0189%" height="15" fill="rgb(251,142,44)" fg:x="61687" fg:w="19"/><text x="61.5015%" y="111.50"></text></g><g><title>tailcall`mi_segments_page_alloc (17 samples, 0.02%)</title><rect x="61.2535%" y="85" width="0.0169%" height="15" fill="rgb(238,13,15)" fg:x="61689" fg:w="17"/><text x="61.5035%" y="95.50"></text></g><g><title>tailcall`mi_find_page (62 samples, 0.06%)</title><rect x="61.2148%" y="117" width="0.0616%" height="15" fill="rgb(208,107,27)" fg:x="61650" fg:w="62"/><text x="61.4648%" y="127.50"></text></g><g><title>tailcall`mi_page_free_list_extend (29 samples, 0.03%)</title><rect x="61.2763%" y="117" width="0.0288%" height="15" fill="rgb(205,136,37)" fg:x="61712" fg:w="29"/><text x="61.5263%" y="127.50"></text></g><g><title>tailcall`_mi_malloc_generic (103 samples, 0.10%)</title><rect x="61.2058%" y="133" width="0.1023%" height="15" fill="rgb(250,205,27)" fg:x="61641" fg:w="103"/><text x="61.4558%" y="143.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (110 samples, 0.11%)</title><rect x="61.2028%" y="149" width="0.1092%" height="15" fill="rgb(210,80,43)" fg:x="61638" fg:w="110"/><text x="61.4528%" y="159.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as core::clone::Clone&gt;::clone (807 samples, 0.80%)</title><rect x="60.5882%" y="165" width="0.8013%" height="15" fill="rgb(247,160,36)" fg:x="61019" fg:w="807"/><text x="60.8382%" y="175.50"></text></g><g><title>tailcall`mi_malloc_aligned (78 samples, 0.08%)</title><rect x="61.3121%" y="149" width="0.0774%" height="15" fill="rgb(234,13,49)" fg:x="61748" fg:w="78"/><text x="61.5621%" y="159.50"></text></g><g><title>tailcall`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone_from (1,290 samples, 1.28%)</title><rect x="60.1265%" y="181" width="1.2809%" height="15" fill="rgb(234,122,0)" fg:x="60554" fg:w="1290"/><text x="60.3765%" y="191.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as core::clone::Clone&gt;::clone (212 samples, 0.21%)</title><rect x="61.4074%" y="181" width="0.2105%" height="15" fill="rgb(207,146,38)" fg:x="61844" fg:w="212"/><text x="61.6574%" y="191.50"></text></g><g><title>tailcall`core::clone::Clone::clone_from (319 samples, 0.32%)</title><rect x="61.6248%" y="181" width="0.3167%" height="15" fill="rgb(207,177,25)" fg:x="62063" fg:w="319"/><text x="61.8748%" y="191.50"></text></g><g><title>tailcall`mi_malloc_aligned (14 samples, 0.01%)</title><rect x="61.9277%" y="165" width="0.0139%" height="15" fill="rgb(211,178,42)" fg:x="62368" fg:w="14"/><text x="62.1777%" y="175.50"></text></g><g><title>tailcall`_mi_free_delayed_block (17 samples, 0.02%)</title><rect x="61.9962%" y="117" width="0.0169%" height="15" fill="rgb(230,69,54)" fg:x="62437" fg:w="17"/><text x="62.2462%" y="127.50"></text></g><g><title>tailcall`mi_segment_span_allocate (13 samples, 0.01%)</title><rect x="62.0935%" y="69" width="0.0129%" height="15" fill="rgb(214,135,41)" fg:x="62535" fg:w="13"/><text x="62.3435%" y="79.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (11 samples, 0.01%)</title><rect x="62.0955%" y="53" width="0.0109%" height="15" fill="rgb(237,67,25)" fg:x="62537" fg:w="11"/><text x="62.3455%" y="63.50"></text></g><g><title>tailcall`mi_page_fresh_alloc (33 samples, 0.03%)</title><rect x="62.0806%" y="101" width="0.0328%" height="15" fill="rgb(222,189,50)" fg:x="62522" fg:w="33"/><text x="62.3306%" y="111.50"></text></g><g><title>tailcall`mi_segments_page_alloc (31 samples, 0.03%)</title><rect x="62.0826%" y="85" width="0.0308%" height="15" fill="rgb(245,148,34)" fg:x="62524" fg:w="31"/><text x="62.3326%" y="95.50"></text></g><g><title>tailcall`mi_find_page (106 samples, 0.11%)</title><rect x="62.0161%" y="117" width="0.1053%" height="15" fill="rgb(222,29,6)" fg:x="62457" fg:w="106"/><text x="62.2661%" y="127.50"></text></g><g><title>tailcall`_mi_malloc_generic (150 samples, 0.15%)</title><rect x="61.9823%" y="133" width="0.1489%" height="15" fill="rgb(221,189,43)" fg:x="62423" fg:w="150"/><text x="62.2323%" y="143.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (158 samples, 0.16%)</title><rect x="61.9793%" y="149" width="0.1569%" height="15" fill="rgb(207,36,27)" fg:x="62420" fg:w="158"/><text x="62.2293%" y="159.50"></text></g><g><title>tailcall`alloc::raw_vec::finish_grow (175 samples, 0.17%)</title><rect x="61.9654%" y="165" width="0.1738%" height="15" fill="rgb(217,90,24)" fg:x="62406" fg:w="175"/><text x="62.2154%" y="175.50"></text></g><g><title>tailcall`indexmap::map::core::RefMut&lt;K,V&gt;::reserve_entries (207 samples, 0.21%)</title><rect x="61.9416%" y="181" width="0.2055%" height="15" fill="rgb(224,66,35)" fg:x="62382" fg:w="207"/><text x="62.1916%" y="191.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as core::clone::Clone&gt;::clone (2,075 samples, 2.06%)</title><rect x="60.0888%" y="197" width="2.0604%" height="15" fill="rgb(221,13,50)" fg:x="60516" fg:w="2075"/><text x="60.3388%" y="207.50">t..</text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as core::clone::Clone&gt;::clone (2,136 samples, 2.12%)</title><rect x="60.0471%" y="213" width="2.1209%" height="15" fill="rgb(236,68,49)" fg:x="60474" fg:w="2136"/><text x="60.2971%" y="223.50">t..</text></g><g><title>tailcall`tailcall::core::jit::exec::ExecutorInner&lt;Input,Output,Error,Exec&gt;::iter_field::_{{closure}} (17,731 samples, 17.61%)</title><rect x="44.5910%" y="293" width="17.6058%" height="15" fill="rgb(229,146,28)" fg:x="44908" fg:w="17731"/><text x="44.8410%" y="303.50">tailcall`tailcall::core::ji..</text></g><g><title>tailcall`tailcall::core::jit::exec::ExecutorInner&lt;Input,Output,Error,Exec&gt;::execute::_{{closure}} (17,692 samples, 17.57%)</title><rect x="44.6297%" y="277" width="17.5671%" height="15" fill="rgb(225,31,38)" fg:x="44947" fg:w="17692"/><text x="44.8797%" y="287.50">tailcall`tailcall::core::ji..</text></g><g><title>tailcall`tailcall::core::json::json_like_list::JsonLikeList::map_ref (2,225 samples, 2.21%)</title><rect x="59.9875%" y="261" width="2.2093%" height="15" fill="rgb(250,208,3)" fg:x="60414" fg:w="2225"/><text x="60.2375%" y="271.50">t..</text></g><g><title>tailcall`tailcall::core::json::json_like_list::JsonLikeList::map_ref (2,216 samples, 2.20%)</title><rect x="59.9964%" y="245" width="2.2004%" height="15" fill="rgb(246,54,23)" fg:x="60423" fg:w="2216"/><text x="60.2464%" y="255.50">t..</text></g><g><title>tailcall`tailcall::core::json::json_like_list::JsonLikeList::map_ref (2,184 samples, 2.17%)</title><rect x="60.0282%" y="229" width="2.1686%" height="15" fill="rgb(243,76,11)" fg:x="60455" fg:w="2184"/><text x="60.2782%" y="239.50">t..</text></g><g><title>tailcall`tailcall::core::json::graphql::_&lt;impl tailcall::core::json::json_like::JsonLike for async_graphql_value::ConstValue&gt;::get_key (21 samples, 0.02%)</title><rect x="62.1759%" y="213" width="0.0209%" height="15" fill="rgb(245,21,50)" fg:x="62618" fg:w="21"/><text x="62.4259%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (19 samples, 0.02%)</title><rect x="62.3288%" y="181" width="0.0189%" height="15" fill="rgb(228,9,43)" fg:x="62772" fg:w="19"/><text x="62.5788%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (116 samples, 0.12%)</title><rect x="62.7300%" y="165" width="0.1152%" height="15" fill="rgb(208,100,47)" fg:x="63176" fg:w="116"/><text x="62.9800%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (16 samples, 0.02%)</title><rect x="63.5660%" y="149" width="0.0159%" height="15" fill="rgb(232,26,8)" fg:x="64018" fg:w="16"/><text x="63.8160%" y="159.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (11 samples, 0.01%)</title><rect x="63.5819%" y="149" width="0.0109%" height="15" fill="rgb(216,166,38)" fg:x="64034" fg:w="11"/><text x="63.8319%" y="159.50"></text></g><g><title>tailcall`_mi_malloc_generic (11 samples, 0.01%)</title><rect x="63.5819%" y="133" width="0.0109%" height="15" fill="rgb(251,202,51)" fg:x="64034" fg:w="11"/><text x="63.8319%" y="143.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as core::clone::Clone&gt;::clone (829 samples, 0.82%)</title><rect x="62.8452%" y="165" width="0.8231%" height="15" fill="rgb(254,216,34)" fg:x="63292" fg:w="829"/><text x="63.0952%" y="175.50"></text></g><g><title>tailcall`mi_malloc_aligned (76 samples, 0.08%)</title><rect x="63.5929%" y="149" width="0.0755%" height="15" fill="rgb(251,32,27)" fg:x="64045" fg:w="76"/><text x="63.8429%" y="159.50"></text></g><g><title>tailcall`DYLD-STUB$$memcpy (11 samples, 0.01%)</title><rect x="63.6683%" y="165" width="0.0109%" height="15" fill="rgb(208,127,28)" fg:x="64121" fg:w="11"/><text x="63.9183%" y="175.50"></text></g><g><title>tailcall`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone_from (1,350 samples, 1.34%)</title><rect x="62.3477%" y="181" width="1.3405%" height="15" fill="rgb(224,137,22)" fg:x="62791" fg:w="1350"/><text x="62.5977%" y="191.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as core::clone::Clone&gt;::clone (171 samples, 0.17%)</title><rect x="63.6882%" y="181" width="0.1698%" height="15" fill="rgb(254,70,32)" fg:x="64141" fg:w="171"/><text x="63.9382%" y="191.50"></text></g><g><title>tailcall`core::clone::Clone::clone_from (343 samples, 0.34%)</title><rect x="63.8629%" y="181" width="0.3406%" height="15" fill="rgb(229,75,37)" fg:x="64317" fg:w="343"/><text x="64.1129%" y="191.50"></text></g><g><title>tailcall`_mi_free_delayed_block (14 samples, 0.01%)</title><rect x="64.2641%" y="117" width="0.0139%" height="15" fill="rgb(252,64,23)" fg:x="64721" fg:w="14"/><text x="64.5141%" y="127.50"></text></g><g><title>tailcall`mi_segment_span_allocate (11 samples, 0.01%)</title><rect x="64.3435%" y="69" width="0.0109%" height="15" fill="rgb(232,162,48)" fg:x="64801" fg:w="11"/><text x="64.5935%" y="79.50"></text></g><g><title>tailcall`mi_find_page (77 samples, 0.08%)</title><rect x="64.2829%" y="117" width="0.0765%" height="15" fill="rgb(246,160,12)" fg:x="64740" fg:w="77"/><text x="64.5329%" y="127.50"></text></g><g><title>tailcall`mi_page_fresh_alloc (17 samples, 0.02%)</title><rect x="64.3425%" y="101" width="0.0169%" height="15" fill="rgb(247,166,0)" fg:x="64800" fg:w="17"/><text x="64.5925%" y="111.50"></text></g><g><title>tailcall`mi_segments_page_alloc (16 samples, 0.02%)</title><rect x="64.3435%" y="85" width="0.0159%" height="15" fill="rgb(249,219,21)" fg:x="64801" fg:w="16"/><text x="64.5935%" y="95.50"></text></g><g><title>tailcall`_mi_malloc_generic (117 samples, 0.12%)</title><rect x="64.2442%" y="133" width="0.1162%" height="15" fill="rgb(205,209,3)" fg:x="64701" fg:w="117"/><text x="64.4942%" y="143.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (127 samples, 0.13%)</title><rect x="64.2393%" y="149" width="0.1261%" height="15" fill="rgb(243,44,1)" fg:x="64696" fg:w="127"/><text x="64.4893%" y="159.50"></text></g><g><title>tailcall`alloc::raw_vec::finish_grow (147 samples, 0.15%)</title><rect x="64.2234%" y="165" width="0.1460%" height="15" fill="rgb(206,159,16)" fg:x="64680" fg:w="147"/><text x="64.4734%" y="175.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (14 samples, 0.01%)</title><rect x="64.3693%" y="165" width="0.0139%" height="15" fill="rgb(244,77,30)" fg:x="64827" fg:w="14"/><text x="64.6193%" y="175.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as core::clone::Clone&gt;::clone (2,109 samples, 2.09%)</title><rect x="62.2931%" y="197" width="2.0941%" height="15" fill="rgb(218,69,12)" fg:x="62736" fg:w="2109"/><text x="62.5431%" y="207.50">t..</text></g><g><title>tailcall`indexmap::map::core::RefMut&lt;K,V&gt;::reserve_entries (185 samples, 0.18%)</title><rect x="64.2035%" y="181" width="0.1837%" height="15" fill="rgb(212,87,7)" fg:x="64660" fg:w="185"/><text x="64.4535%" y="191.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as core::clone::Clone&gt;::clone (2,163 samples, 2.15%)</title><rect x="62.2514%" y="213" width="2.1477%" height="15" fill="rgb(245,114,25)" fg:x="62694" fg:w="2163"/><text x="62.5014%" y="223.50">t..</text></g><g><title>tailcall`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone_from (2,176 samples, 2.16%)</title><rect x="62.2395%" y="229" width="2.1606%" height="15" fill="rgb(210,61,42)" fg:x="62682" fg:w="2176"/><text x="62.4895%" y="239.50">t..</text></g><g><title>tailcall`core::clone::Clone::clone_from (20 samples, 0.02%)</title><rect x="64.4071%" y="229" width="0.0199%" height="15" fill="rgb(211,52,33)" fg:x="64865" fg:w="20"/><text x="64.6571%" y="239.50"></text></g><g><title>tailcall`indexmap::map::core::RefMut&lt;K,V&gt;::reserve_entries (14 samples, 0.01%)</title><rect x="64.4269%" y="229" width="0.0139%" height="15" fill="rgb(234,58,33)" fg:x="64885" fg:w="14"/><text x="64.6769%" y="239.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as core::clone::Clone&gt;::clone (2,230 samples, 2.21%)</title><rect x="62.2276%" y="245" width="2.2143%" height="15" fill="rgb(220,115,36)" fg:x="62670" fg:w="2230"/><text x="62.4776%" y="255.50">t..</text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as core::clone::Clone&gt;::clone (2,240 samples, 2.22%)</title><rect x="62.2186%" y="261" width="2.2242%" height="15" fill="rgb(243,153,54)" fg:x="62661" fg:w="2240"/><text x="62.4686%" y="271.50">t..</text></g><g><title>tailcall`tailcall::core::jit::exec::ExecutorInner&lt;Input,Output,Error,Exec&gt;::execute::_{{closure}} (40,842 samples, 40.55%)</title><rect x="23.9021%" y="341" width="40.5537%" height="15" fill="rgb(251,47,18)" fg:x="24072" fg:w="40842"/><text x="24.1521%" y="351.50">tailcall`tailcall::core::jit::exec::ExecutorInner&lt;Input,Output,Err..</text></g><g><title>tailcall`tailcall::core::jit::exec::ExecutorInner&lt;Input,Output,Error,Exec&gt;::iter_field::_{{closure}} (20,904 samples, 20.76%)</title><rect x="43.6993%" y="325" width="20.7564%" height="15" fill="rgb(242,102,42)" fg:x="44010" fg:w="20904"/><text x="43.9493%" y="335.50">tailcall`tailcall::core::jit::exe..</text></g><g><title>tailcall`tailcall::core::jit::exec::ExecutorInner&lt;Input,Output,Error,Exec&gt;::execute::_{{closure}} (20,858 samples, 20.71%)</title><rect x="43.7450%" y="309" width="20.7107%" height="15" fill="rgb(234,31,38)" fg:x="44056" fg:w="20858"/><text x="43.9950%" y="319.50">tailcall`tailcall::core::jit::exe..</text></g><g><title>tailcall`tailcall::core::json::json_like_list::JsonLikeList::map_ref (2,275 samples, 2.26%)</title><rect x="62.1968%" y="293" width="2.2589%" height="15" fill="rgb(221,117,51)" fg:x="62639" fg:w="2275"/><text x="62.4468%" y="303.50">t..</text></g><g><title>tailcall`tailcall::core::json::json_like_list::JsonLikeList::map_ref (2,262 samples, 2.25%)</title><rect x="62.2097%" y="277" width="2.2460%" height="15" fill="rgb(212,20,18)" fg:x="62652" fg:w="2262"/><text x="62.4597%" y="287.50">t..</text></g><g><title>tailcall`async_graphql_value::Value::into_const_with_mut (30 samples, 0.03%)</title><rect x="64.4935%" y="325" width="0.0298%" height="15" fill="rgb(245,133,36)" fg:x="64952" fg:w="30"/><text x="64.7435%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (128 samples, 0.13%)</title><rect x="64.5312%" y="309" width="0.1271%" height="15" fill="rgb(212,6,19)" fg:x="64990" fg:w="128"/><text x="64.7812%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (105 samples, 0.10%)</title><rect x="64.6970%" y="293" width="0.1043%" height="15" fill="rgb(218,1,36)" fg:x="65157" fg:w="105"/><text x="64.9470%" y="303.50"></text></g><g><title>tailcall`tailcall::core::jit::model::Field&lt;Input&gt;::try_map (439 samples, 0.44%)</title><rect x="64.4567%" y="341" width="0.4359%" height="15" fill="rgb(246,84,54)" fg:x="64915" fg:w="439"/><text x="64.7067%" y="351.50"></text></g><g><title>tailcall`tailcall::core::jit::model::Field&lt;Input&gt;::try_map (372 samples, 0.37%)</title><rect x="64.5232%" y="325" width="0.3694%" height="15" fill="rgb(242,110,6)" fg:x="64982" fg:w="372"/><text x="64.7732%" y="335.50"></text></g><g><title>tailcall`tailcall::core::jit::model::Field&lt;Input&gt;::try_map (235 samples, 0.23%)</title><rect x="64.6593%" y="309" width="0.2333%" height="15" fill="rgb(214,47,5)" fg:x="65119" fg:w="235"/><text x="64.9093%" y="319.50"></text></g><g><title>tailcall`tailcall::core::jit::model::Field&lt;Input&gt;::try_map (86 samples, 0.09%)</title><rect x="64.8072%" y="293" width="0.0854%" height="15" fill="rgb(218,159,25)" fg:x="65268" fg:w="86"/><text x="65.0572%" y="303.50"></text></g><g><title>tailcall`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (11 samples, 0.01%)</title><rect x="64.9363%" y="325" width="0.0109%" height="15" fill="rgb(215,211,28)" fg:x="65398" fg:w="11"/><text x="65.1863%" y="335.50"></text></g><g><title>tailcall`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (11 samples, 0.01%)</title><rect x="64.9472%" y="325" width="0.0109%" height="15" fill="rgb(238,59,32)" fg:x="65409" fg:w="11"/><text x="65.1972%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (17 samples, 0.02%)</title><rect x="65.0108%" y="309" width="0.0169%" height="15" fill="rgb(226,82,3)" fg:x="65473" fg:w="17"/><text x="65.2608%" y="319.50"></text></g><g><title>tailcall`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (18 samples, 0.02%)</title><rect x="65.0326%" y="309" width="0.0179%" height="15" fill="rgb(240,164,32)" fg:x="65495" fg:w="18"/><text x="65.2826%" y="319.50"></text></g><g><title>tailcall`indexmap::map::IndexMap&lt;K,V,S&gt;::get (16 samples, 0.02%)</title><rect x="65.0574%" y="309" width="0.0159%" height="15" fill="rgb(232,46,7)" fg:x="65520" fg:w="16"/><text x="65.3074%" y="319.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (11 samples, 0.01%)</title><rect x="65.1557%" y="293" width="0.0109%" height="15" fill="rgb(229,129,53)" fg:x="65619" fg:w="11"/><text x="65.4057%" y="303.50"></text></g><g><title>tailcall`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (12 samples, 0.01%)</title><rect x="65.1726%" y="293" width="0.0119%" height="15" fill="rgb(234,188,29)" fg:x="65636" fg:w="12"/><text x="65.4226%" y="303.50"></text></g><g><title>tailcall`_mi_heap_realloc_zero (11 samples, 0.01%)</title><rect x="65.2183%" y="261" width="0.0109%" height="15" fill="rgb(246,141,4)" fg:x="65682" fg:w="11"/><text x="65.4683%" y="271.50"></text></g><g><title>tailcall`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (49 samples, 0.05%)</title><rect x="65.1845%" y="293" width="0.0487%" height="15" fill="rgb(229,23,39)" fg:x="65648" fg:w="49"/><text x="65.4345%" y="303.50"></text></g><g><title>tailcall`alloc::raw_vec::finish_grow (25 samples, 0.02%)</title><rect x="65.2084%" y="277" width="0.0248%" height="15" fill="rgb(206,12,3)" fg:x="65672" fg:w="25"/><text x="65.4584%" y="287.50"></text></g><g><title>tailcall`indexmap::map::IndexMap&lt;K,V,S&gt;::get (19 samples, 0.02%)</title><rect x="65.2342%" y="293" width="0.0189%" height="15" fill="rgb(252,226,20)" fg:x="65698" fg:w="19"/><text x="65.4842%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (17 samples, 0.02%)</title><rect x="65.4109%" y="277" width="0.0169%" height="15" fill="rgb(216,123,35)" fg:x="65876" fg:w="17"/><text x="65.6609%" y="287.50"></text></g><g><title>tailcall`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (45 samples, 0.04%)</title><rect x="65.4278%" y="277" width="0.0447%" height="15" fill="rgb(212,68,40)" fg:x="65893" fg:w="45"/><text x="65.6778%" y="287.50"></text></g><g><title>tailcall`core::hash::BuildHasher::hash_one (12 samples, 0.01%)</title><rect x="65.4844%" y="277" width="0.0119%" height="15" fill="rgb(254,125,32)" fg:x="65950" fg:w="12"/><text x="65.7344%" y="287.50"></text></g><g><title>tailcall`indexmap::map::IndexMap&lt;K,V,S&gt;::get (61 samples, 0.06%)</title><rect x="65.4963%" y="277" width="0.0606%" height="15" fill="rgb(253,97,22)" fg:x="65962" fg:w="61"/><text x="65.7463%" y="287.50"></text></g><g><title>tailcall`indexmap::map::IndexMap&lt;K,V,S&gt;::get_index_of (16 samples, 0.02%)</title><rect x="65.5569%" y="277" width="0.0159%" height="15" fill="rgb(241,101,14)" fg:x="66023" fg:w="16"/><text x="65.8069%" y="287.50"></text></g><g><title>tailcall`mi_free (12 samples, 0.01%)</title><rect x="65.5777%" y="277" width="0.0119%" height="15" fill="rgb(238,103,29)" fg:x="66044" fg:w="12"/><text x="65.8277%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (14 samples, 0.01%)</title><rect x="65.7237%" y="261" width="0.0139%" height="15" fill="rgb(233,195,47)" fg:x="66191" fg:w="14"/><text x="65.9737%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (287 samples, 0.28%)</title><rect x="65.7376%" y="261" width="0.2850%" height="15" fill="rgb(246,218,30)" fg:x="66205" fg:w="287"/><text x="65.9876%" y="271.50"></text></g><g><title>tailcall`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (41 samples, 0.04%)</title><rect x="66.0226%" y="261" width="0.0407%" height="15" fill="rgb(219,145,47)" fg:x="66492" fg:w="41"/><text x="66.2726%" y="271.50"></text></g><g><title>tailcall`DYLD-STUB$$memcpy (49 samples, 0.05%)</title><rect x="66.0663%" y="261" width="0.0487%" height="15" fill="rgb(243,12,26)" fg:x="66536" fg:w="49"/><text x="66.3163%" y="271.50"></text></g><g><title>tailcall`_mi_heap_realloc_zero (17 samples, 0.02%)</title><rect x="66.2311%" y="229" width="0.0169%" height="15" fill="rgb(214,87,16)" fg:x="66702" fg:w="17"/><text x="66.4811%" y="239.50"></text></g><g><title>tailcall`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (138 samples, 0.14%)</title><rect x="66.1149%" y="261" width="0.1370%" height="15" fill="rgb(208,99,42)" fg:x="66585" fg:w="138"/><text x="66.3649%" y="271.50"></text></g><g><title>tailcall`alloc::raw_vec::finish_grow (97 samples, 0.10%)</title><rect x="66.1556%" y="245" width="0.0963%" height="15" fill="rgb(253,99,2)" fg:x="66626" fg:w="97"/><text x="66.4056%" y="255.50"></text></g><g><title>tailcall`alloc::raw_vec::finish_grow (23 samples, 0.02%)</title><rect x="66.2519%" y="261" width="0.0228%" height="15" fill="rgb(220,168,23)" fg:x="66723" fg:w="23"/><text x="66.5019%" y="271.50"></text></g><g><title>tailcall`indexmap::map::IndexMap&lt;K,V,S&gt;::get (71 samples, 0.07%)</title><rect x="66.2758%" y="261" width="0.0705%" height="15" fill="rgb(242,38,24)" fg:x="66747" fg:w="71"/><text x="66.5258%" y="271.50"></text></g><g><title>tailcall`indexmap::map::IndexMap&lt;K,V,S&gt;::get_index_of (359 samples, 0.36%)</title><rect x="66.3463%" y="261" width="0.3565%" height="15" fill="rgb(225,182,9)" fg:x="66818" fg:w="359"/><text x="66.5963%" y="271.50"></text></g><g><title>tailcall`mi_free (285 samples, 0.28%)</title><rect x="66.7027%" y="261" width="0.2830%" height="15" fill="rgb(243,178,37)" fg:x="67177" fg:w="285"/><text x="66.9527%" y="271.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (63 samples, 0.06%)</title><rect x="70.0936%" y="245" width="0.0626%" height="15" fill="rgb(232,139,19)" fg:x="70592" fg:w="63"/><text x="70.3436%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (381 samples, 0.38%)</title><rect x="70.1562%" y="245" width="0.3783%" height="15" fill="rgb(225,201,24)" fg:x="70655" fg:w="381"/><text x="70.4062%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (333 samples, 0.33%)</title><rect x="70.5345%" y="245" width="0.3306%" height="15" fill="rgb(221,47,46)" fg:x="71036" fg:w="333"/><text x="70.7845%" y="255.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as core::clone::Clone&gt;::clone (81 samples, 0.08%)</title><rect x="70.8651%" y="245" width="0.0804%" height="15" fill="rgb(249,23,13)" fg:x="71369" fg:w="81"/><text x="71.1151%" y="255.50"></text></g><g><title>tailcall`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3,704 samples, 3.68%)</title><rect x="70.9456%" y="245" width="3.6779%" height="15" fill="rgb(219,9,5)" fg:x="71450" fg:w="3704"/><text x="71.1956%" y="255.50">tail..</text></g><g><title>tailcall`DYLD-STUB$$memcmp (43 samples, 0.04%)</title><rect x="74.6234%" y="245" width="0.0427%" height="15" fill="rgb(254,171,16)" fg:x="75154" fg:w="43"/><text x="74.8734%" y="255.50"></text></g><g><title>tailcall`DYLD-STUB$$memcpy (58 samples, 0.06%)</title><rect x="74.6661%" y="245" width="0.0576%" height="15" fill="rgb(230,171,20)" fg:x="75197" fg:w="58"/><text x="74.9161%" y="255.50"></text></g><g><title>tailcall`core::hash::BuildHasher::hash_one (986 samples, 0.98%)</title><rect x="74.7237%" y="245" width="0.9790%" height="15" fill="rgb(210,71,41)" fg:x="75255" fg:w="986"/><text x="74.9737%" y="255.50"></text></g><g><title>tailcall`indexmap::map::IndexMap&lt;K,V,S&gt;::get (402 samples, 0.40%)</title><rect x="75.7028%" y="245" width="0.3992%" height="15" fill="rgb(206,173,20)" fg:x="76241" fg:w="402"/><text x="75.9528%" y="255.50"></text></g><g><title>tailcall`indexmap::map::IndexMap&lt;K,V,S&gt;::get_index_of (4,363 samples, 4.33%)</title><rect x="76.1019%" y="245" width="4.3322%" height="15" fill="rgb(233,88,34)" fg:x="76643" fg:w="4363"/><text x="76.3519%" y="255.50">tailc..</text></g><g><title>tailcall`indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (220 samples, 0.22%)</title><rect x="80.4341%" y="245" width="0.2184%" height="15" fill="rgb(223,209,46)" fg:x="81006" fg:w="220"/><text x="80.6841%" y="255.50"></text></g><g><title>tailcall`mi_malloc_aligned (257 samples, 0.26%)</title><rect x="80.6585%" y="245" width="0.2552%" height="15" fill="rgb(250,43,18)" fg:x="81232" fg:w="257"/><text x="80.9085%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (46 samples, 0.05%)</title><rect x="82.2194%" y="229" width="0.0457%" height="15" fill="rgb(208,13,10)" fg:x="82804" fg:w="46"/><text x="82.4694%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (13 samples, 0.01%)</title><rect x="82.6871%" y="213" width="0.0129%" height="15" fill="rgb(212,200,36)" fg:x="83275" fg:w="13"/><text x="82.9371%" y="223.50"></text></g><g><title>tailcall`_mi_malloc_generic (19 samples, 0.02%)</title><rect x="82.7010%" y="197" width="0.0189%" height="15" fill="rgb(225,90,30)" fg:x="83289" fg:w="19"/><text x="82.9510%" y="207.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (20 samples, 0.02%)</title><rect x="82.7010%" y="213" width="0.0199%" height="15" fill="rgb(236,182,39)" fg:x="83289" fg:w="20"/><text x="82.9510%" y="223.50"></text></g><g><title>tailcall`&lt;async_graphql_value::ConstValue as core::clone::Clone&gt;::clone (502 samples, 0.50%)</title><rect x="82.2651%" y="229" width="0.4985%" height="15" fill="rgb(212,144,35)" fg:x="82850" fg:w="502"/><text x="82.5151%" y="239.50"></text></g><g><title>tailcall`mi_malloc_aligned (43 samples, 0.04%)</title><rect x="82.7209%" y="213" width="0.0427%" height="15" fill="rgb(228,63,44)" fg:x="83309" fg:w="43"/><text x="82.9709%" y="223.50"></text></g><g><title>tailcall`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,784 samples, 1.77%)</title><rect x="82.7636%" y="229" width="1.7714%" height="15" fill="rgb(228,109,6)" fg:x="83352" fg:w="1784"/><text x="83.0136%" y="239.50">t..</text></g><g><title>tailcall`core::hash::BuildHasher::hash_one (24 samples, 0.02%)</title><rect x="84.5409%" y="229" width="0.0238%" height="15" fill="rgb(238,117,24)" fg:x="85142" fg:w="24"/><text x="84.7909%" y="239.50"></text></g><g><title>tailcall`indexmap::map::IndexMap&lt;K,V,S&gt;::get (1,052 samples, 1.04%)</title><rect x="84.5647%" y="229" width="1.0446%" height="15" fill="rgb(242,26,26)" fg:x="85166" fg:w="1052"/><text x="84.8147%" y="239.50"></text></g><g><title>tailcall`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2,185 samples, 2.17%)</title><rect x="86.3004%" y="213" width="2.1696%" height="15" fill="rgb(221,92,48)" fg:x="86914" fg:w="2185"/><text x="86.5504%" y="223.50">t..</text></g><g><title>tailcall`tailcall::core::scalar::Scalar::find (3,680 samples, 3.65%)</title><rect x="85.6183%" y="229" width="3.6540%" height="15" fill="rgb(209,209,32)" fg:x="86227" fg:w="3680"/><text x="85.8683%" y="239.50">tail..</text></g><g><title>tailcall`core::hash::BuildHasher::hash_one (808 samples, 0.80%)</title><rect x="88.4700%" y="213" width="0.8023%" height="15" fill="rgb(221,70,22)" fg:x="89099" fg:w="808"/><text x="88.7200%" y="223.50"></text></g><g><title>tailcall`tailcall::core::scalar::Scalar::is_predefined (225 samples, 0.22%)</title><rect x="89.2723%" y="229" width="0.2234%" height="15" fill="rgb(248,145,5)" fg:x="89907" fg:w="225"/><text x="89.5223%" y="239.50"></text></g><g><title>tailcall`tailcall::core::jit::synth::synth::Synth&lt;Value&gt;::iter_inner (8,748 samples, 8.69%)</title><rect x="80.9137%" y="245" width="8.6862%" height="15" fill="rgb(226,116,26)" fg:x="81489" fg:w="8748"/><text x="81.1637%" y="255.50">tailcall`tai..</text></g><g><title>tailcall`tailcall::core::scalar::Scalar::validate (105 samples, 0.10%)</title><rect x="89.4957%" y="229" width="0.1043%" height="15" fill="rgb(244,5,17)" fg:x="90132" fg:w="105"/><text x="89.7457%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (81 samples, 0.08%)</title><rect x="89.9792%" y="229" width="0.0804%" height="15" fill="rgb(252,159,33)" fg:x="90619" fg:w="81"/><text x="90.2292%" y="239.50"></text></g><g><title>tailcall`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (33 samples, 0.03%)</title><rect x="90.0666%" y="229" width="0.0328%" height="15" fill="rgb(206,71,0)" fg:x="90707" fg:w="33"/><text x="90.3166%" y="239.50"></text></g><g><title>tailcall`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2,084 samples, 2.07%)</title><rect x="91.7209%" y="213" width="2.0693%" height="15" fill="rgb(233,118,54)" fg:x="92373" fg:w="2084"/><text x="91.9709%" y="223.50">t..</text></g><g><title>tailcall`alloc::raw_vec::finish_grow (26 samples, 0.03%)</title><rect x="93.7902%" y="213" width="0.0258%" height="15" fill="rgb(234,83,48)" fg:x="94457" fg:w="26"/><text x="94.0402%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (44 samples, 0.04%)</title><rect x="94.7066%" y="197" width="0.0437%" height="15" fill="rgb(228,3,54)" fg:x="95380" fg:w="44"/><text x="94.9566%" y="207.50"></text></g><g><title>tailcall`DYLD-STUB$$memset (12 samples, 0.01%)</title><rect x="94.7503%" y="197" width="0.0119%" height="15" fill="rgb(226,155,13)" fg:x="95424" fg:w="12"/><text x="95.0003%" y="207.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (18 samples, 0.02%)</title><rect x="94.8705%" y="181" width="0.0179%" height="15" fill="rgb(241,28,37)" fg:x="95545" fg:w="18"/><text x="95.1205%" y="191.50"></text></g><g><title>tailcall`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1,122 samples, 1.11%)</title><rect x="93.8160%" y="213" width="1.1141%" height="15" fill="rgb(233,93,10)" fg:x="94483" fg:w="1122"/><text x="94.0660%" y="223.50"></text></g><g><title>tailcall`hashbrown::raw::RawTableInner::fallible_with_capacity (169 samples, 0.17%)</title><rect x="94.7622%" y="197" width="0.1678%" height="15" fill="rgb(225,113,19)" fg:x="95436" fg:w="169"/><text x="95.0122%" y="207.50"></text></g><g><title>tailcall`mi_malloc_aligned (33 samples, 0.03%)</title><rect x="94.8973%" y="181" width="0.0328%" height="15" fill="rgb(241,2,18)" fg:x="95572" fg:w="33"/><text x="95.1473%" y="191.50"></text></g><g><title>tailcall`hashbrown::raw::RawTableInner::fallible_with_capacity (18 samples, 0.02%)</title><rect x="94.9300%" y="213" width="0.0179%" height="15" fill="rgb(228,207,21)" fg:x="95605" fg:w="18"/><text x="95.1800%" y="223.50"></text></g><g><title>tailcall`indexmap::map::IndexMap&lt;K,V,S&gt;::hash (794 samples, 0.79%)</title><rect x="94.9479%" y="213" width="0.7884%" height="15" fill="rgb(213,211,35)" fg:x="95623" fg:w="794"/><text x="95.1979%" y="223.50"></text></g><g><title>tailcall`_mi_heap_realloc_zero (76 samples, 0.08%)</title><rect x="96.0560%" y="197" width="0.0755%" height="15" fill="rgb(209,83,10)" fg:x="96739" fg:w="76"/><text x="96.3060%" y="207.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (14 samples, 0.01%)</title><rect x="96.1533%" y="181" width="0.0139%" height="15" fill="rgb(209,164,1)" fg:x="96837" fg:w="14"/><text x="96.4033%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (396 samples, 0.39%)</title><rect x="96.1673%" y="181" width="0.3932%" height="15" fill="rgb(213,184,43)" fg:x="96851" fg:w="396"/><text x="96.4173%" y="191.50"></text></g><g><title>tailcall`_mi_free_delayed_block (283 samples, 0.28%)</title><rect x="96.7034%" y="149" width="0.2810%" height="15" fill="rgb(231,61,34)" fg:x="97391" fg:w="283"/><text x="96.9534%" y="159.50"></text></g><g><title>tailcall`_mi_page_try_use_delayed_free (19 samples, 0.02%)</title><rect x="96.9854%" y="149" width="0.0189%" height="15" fill="rgb(235,75,3)" fg:x="97675" fg:w="19"/><text x="97.2354%" y="159.50"></text></g><g><title>tailcall`mi_segment_span_allocate (16 samples, 0.02%)</title><rect x="97.0867%" y="101" width="0.0159%" height="15" fill="rgb(220,106,47)" fg:x="97777" fg:w="16"/><text x="97.3367%" y="111.50"></text></g><g><title>tailcall`mi_page_fresh_alloc (25 samples, 0.02%)</title><rect x="97.0827%" y="133" width="0.0248%" height="15" fill="rgb(210,196,33)" fg:x="97773" fg:w="25"/><text x="97.3327%" y="143.50"></text></g><g><title>tailcall`mi_segments_page_alloc (24 samples, 0.02%)</title><rect x="97.0837%" y="117" width="0.0238%" height="15" fill="rgb(229,154,42)" fg:x="97774" fg:w="24"/><text x="97.3337%" y="127.50"></text></g><g><title>tailcall`mi_find_page (105 samples, 0.10%)</title><rect x="97.0043%" y="149" width="0.1043%" height="15" fill="rgb(228,114,26)" fg:x="97694" fg:w="105"/><text x="97.2543%" y="159.50"></text></g><g><title>tailcall`_mi_malloc_generic (478 samples, 0.47%)</title><rect x="96.6419%" y="165" width="0.4746%" height="15" fill="rgb(208,144,1)" fg:x="97329" fg:w="478"/><text x="96.8919%" y="175.50"></text></g><g><title>tailcall`_mi_heap_realloc_zero (568 samples, 0.56%)</title><rect x="96.5634%" y="181" width="0.5640%" height="15" fill="rgb(239,112,37)" fg:x="97250" fg:w="568"/><text x="96.8134%" y="191.50"></text></g><g><title>tailcall`mi_find_page (11 samples, 0.01%)</title><rect x="97.1165%" y="165" width="0.0109%" height="15" fill="rgb(210,96,50)" fg:x="97807" fg:w="11"/><text x="97.3665%" y="175.50"></text></g><g><title>tailcall`mi_malloc_aligned (14 samples, 0.01%)</title><rect x="97.1374%" y="181" width="0.0139%" height="15" fill="rgb(222,178,2)" fg:x="97828" fg:w="14"/><text x="97.3874%" y="191.50"></text></g><g><title>tailcall`alloc::raw_vec::finish_grow (1,036 samples, 1.03%)</title><rect x="96.1315%" y="197" width="1.0287%" height="15" fill="rgb(226,74,18)" fg:x="96815" fg:w="1036"/><text x="96.3815%" y="207.50"></text></g><g><title>tailcall`indexmap::map::core::RefMut&lt;K,V&gt;::reserve_entries (1,438 samples, 1.43%)</title><rect x="95.7363%" y="213" width="1.4278%" height="15" fill="rgb(225,67,54)" fg:x="96417" fg:w="1438"/><text x="95.9863%" y="223.50"></text></g><g><title>tailcall`indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (7,184 samples, 7.13%)</title><rect x="90.1054%" y="229" width="7.1333%" height="15" fill="rgb(251,92,32)" fg:x="90746" fg:w="7184"/><text x="90.3554%" y="239.50">tailcall`i..</text></g><g><title>tailcall`mi_free (75 samples, 0.07%)</title><rect x="97.1642%" y="213" width="0.0745%" height="15" fill="rgb(228,149,22)" fg:x="97855" fg:w="75"/><text x="97.4142%" y="223.50"></text></g><g><title>tailcall`indexmap::map::core::RefMut&lt;K,V&gt;::reserve_entries (13 samples, 0.01%)</title><rect x="97.2386%" y="229" width="0.0129%" height="15" fill="rgb(243,54,13)" fg:x="97930" fg:w="13"/><text x="97.4886%" y="239.50"></text></g><g><title>tailcall`_mi_free_delayed_block (21 samples, 0.02%)</title><rect x="97.2664%" y="197" width="0.0209%" height="15" fill="rgb(243,180,28)" fg:x="97958" fg:w="21"/><text x="97.5164%" y="207.50"></text></g><g><title>tailcall`mi_page_fresh_alloc (22 samples, 0.02%)</title><rect x="97.3300%" y="181" width="0.0218%" height="15" fill="rgb(208,167,24)" fg:x="98022" fg:w="22"/><text x="97.5800%" y="191.50"></text></g><g><title>tailcall`mi_segments_page_alloc (21 samples, 0.02%)</title><rect x="97.3310%" y="165" width="0.0209%" height="15" fill="rgb(245,73,45)" fg:x="98023" fg:w="21"/><text x="97.5810%" y="175.50"></text></g><g><title>tailcall`mi_find_page (70 samples, 0.07%)</title><rect x="97.2883%" y="197" width="0.0695%" height="15" fill="rgb(237,203,48)" fg:x="97980" fg:w="70"/><text x="97.5383%" y="207.50"></text></g><g><title>tailcall`mi_page_free_list_extend (11 samples, 0.01%)</title><rect x="97.3578%" y="197" width="0.0109%" height="15" fill="rgb(211,197,16)" fg:x="98050" fg:w="11"/><text x="97.6078%" y="207.50"></text></g><g><title>tailcall`_mi_malloc_generic (120 samples, 0.12%)</title><rect x="97.2545%" y="213" width="0.1192%" height="15" fill="rgb(243,99,51)" fg:x="97946" fg:w="120"/><text x="97.5045%" y="223.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (124 samples, 0.12%)</title><rect x="97.2515%" y="229" width="0.1231%" height="15" fill="rgb(215,123,29)" fg:x="97943" fg:w="124"/><text x="97.5015%" y="239.50"></text></g><g><title>tailcall`tailcall::core::json::graphql::_&lt;impl tailcall::core::json::json_like::JsonObjectLike for indexmap::map::IndexMap&lt;async_graphql_value::Name,Value&gt;&gt;::insert_key (8,105 samples, 8.05%)</title><rect x="89.5999%" y="245" width="8.0478%" height="15" fill="rgb(239,186,37)" fg:x="90237" fg:w="8105"/><text x="89.8499%" y="255.50">tailcall`ta..</text></g><g><title>tailcall`mi_malloc_aligned (275 samples, 0.27%)</title><rect x="97.3747%" y="229" width="0.2731%" height="15" fill="rgb(252,136,39)" fg:x="98067" fg:w="275"/><text x="97.6247%" y="239.50"></text></g><g><title>tailcall`tailcall::core::scalar::Scalar::find (163 samples, 0.16%)</title><rect x="97.6477%" y="245" width="0.1618%" height="15" fill="rgb(223,213,32)" fg:x="98342" fg:w="163"/><text x="97.8977%" y="255.50"></text></g><g><title>tailcall`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (46 samples, 0.05%)</title><rect x="98.0975%" y="229" width="0.0457%" height="15" fill="rgb(233,115,5)" fg:x="98795" fg:w="46"/><text x="98.3475%" y="239.50"></text></g><g><title>tailcall`tailcall::core::scalar::Scalar::is_predefined (363 samples, 0.36%)</title><rect x="97.8096%" y="245" width="0.3604%" height="15" fill="rgb(207,226,44)" fg:x="98505" fg:w="363"/><text x="98.0596%" y="255.50"></text></g><g><title>tailcall`core::hash::BuildHasher::hash_one (27 samples, 0.03%)</title><rect x="98.1432%" y="229" width="0.0268%" height="15" fill="rgb(208,126,0)" fg:x="98841" fg:w="27"/><text x="98.3932%" y="239.50"></text></g><g><title>tailcall`tailcall::core::jit::synth::synth::Synth&lt;Value&gt;::iter_inner (31,497 samples, 31.27%)</title><rect x="66.9957%" y="261" width="31.2746%" height="15" fill="rgb(244,66,21)" fg:x="67472" fg:w="31497"/><text x="67.2457%" y="271.50">tailcall`tailcall::core::jit::synth::synth::Synth&lt;V..</text></g><g><title>tailcall`tailcall::core::scalar::Scalar::validate (101 samples, 0.10%)</title><rect x="98.1700%" y="245" width="0.1003%" height="15" fill="rgb(222,97,12)" fg:x="98868" fg:w="101"/><text x="98.4200%" y="255.50"></text></g><g><title>tailcall`tailcall::core::json::graphql::_&lt;impl tailcall::core::json::json_like::JsonObjectLike for indexmap::map::IndexMap&lt;async_graphql_value::Name,Value&gt;&gt;::insert_key (255 samples, 0.25%)</title><rect x="98.2703%" y="261" width="0.2532%" height="15" fill="rgb(219,213,19)" fg:x="98969" fg:w="255"/><text x="98.5203%" y="271.50"></text></g><g><title>tailcall`tailcall::core::jit::synth::synth::Synth&lt;Value&gt;::iter_inner (33,196 samples, 32.96%)</title><rect x="65.5926%" y="277" width="32.9616%" height="15" fill="rgb(252,169,30)" fg:x="66059" fg:w="33196"/><text x="65.8426%" y="287.50">tailcall`tailcall::core::jit::synth::synth::Synth&lt;Val..</text></g><g><title>tailcall`tailcall::core::scalar::Scalar::is_predefined (31 samples, 0.03%)</title><rect x="98.5235%" y="261" width="0.0308%" height="15" fill="rgb(206,32,51)" fg:x="99224" fg:w="31"/><text x="98.7735%" y="271.50"></text></g><g><title>tailcall`core::hash::BuildHasher::hash_one (12 samples, 0.01%)</title><rect x="98.5424%" y="245" width="0.0119%" height="15" fill="rgb(250,172,42)" fg:x="99243" fg:w="12"/><text x="98.7924%" y="255.50"></text></g><g><title>tailcall`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (22 samples, 0.02%)</title><rect x="98.5880%" y="245" width="0.0218%" height="15" fill="rgb(209,34,43)" fg:x="99289" fg:w="22"/><text x="98.8380%" y="255.50"></text></g><g><title>tailcall`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (18 samples, 0.02%)</title><rect x="98.6119%" y="245" width="0.0179%" height="15" fill="rgb(223,11,35)" fg:x="99313" fg:w="18"/><text x="98.8619%" y="255.50"></text></g><g><title>tailcall`indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (89 samples, 0.09%)</title><rect x="98.5662%" y="261" width="0.0884%" height="15" fill="rgb(251,219,26)" fg:x="99267" fg:w="89"/><text x="98.8162%" y="271.50"></text></g><g><title>tailcall`indexmap::map::core::RefMut&lt;K,V&gt;::reserve_entries (13 samples, 0.01%)</title><rect x="98.6417%" y="245" width="0.0129%" height="15" fill="rgb(231,119,3)" fg:x="99343" fg:w="13"/><text x="98.8917%" y="255.50"></text></g><g><title>tailcall`tailcall::core::json::graphql::_&lt;impl tailcall::core::json::json_like::JsonObjectLike for indexmap::map::IndexMap&lt;async_graphql_value::Name,Value&gt;&gt;::insert_key (110 samples, 0.11%)</title><rect x="98.5543%" y="277" width="0.1092%" height="15" fill="rgb(216,97,11)" fg:x="99255" fg:w="110"/><text x="98.8043%" y="287.50"></text></g><g><title>tailcall`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (22 samples, 0.02%)</title><rect x="98.6695%" y="261" width="0.0218%" height="15" fill="rgb(223,59,9)" fg:x="99371" fg:w="22"/><text x="98.9195%" y="271.50"></text></g><g><title>tailcall`tailcall::core::jit::synth::synth::Synth&lt;Value&gt;::iter_inner (33,678 samples, 33.44%)</title><rect x="65.2650%" y="293" width="33.4402%" height="15" fill="rgb(233,93,31)" fg:x="65729" fg:w="33678"/><text x="65.5150%" y="303.50">tailcall`tailcall::core::jit::synth::synth::Synth&lt;Valu..</text></g><g><title>tailcall`tailcall::core::scalar::Scalar::is_predefined (42 samples, 0.04%)</title><rect x="98.6635%" y="277" width="0.0417%" height="15" fill="rgb(239,81,33)" fg:x="99365" fg:w="42"/><text x="98.9135%" y="287.50"></text></g><g><title>tailcall`core::hash::BuildHasher::hash_one (14 samples, 0.01%)</title><rect x="98.6913%" y="261" width="0.0139%" height="15" fill="rgb(213,120,34)" fg:x="99393" fg:w="14"/><text x="98.9413%" y="271.50"></text></g><g><title>tailcall`tailcall::core::jit::synth::synth::Synth&lt;Value&gt;::iter_inner (33,879 samples, 33.64%)</title><rect x="65.0882%" y="309" width="33.6398%" height="15" fill="rgb(243,49,53)" fg:x="65551" fg:w="33879"/><text x="65.3382%" y="319.50">tailcall`tailcall::core::jit::synth::synth::Synth&lt;Value..</text></g><g><title>tailcall`tailcall::core::scalar::Scalar::is_predefined (14 samples, 0.01%)</title><rect x="98.7141%" y="293" width="0.0139%" height="15" fill="rgb(247,216,33)" fg:x="99416" fg:w="14"/><text x="98.9641%" y="303.50"></text></g><g><title>tailcall`indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (36 samples, 0.04%)</title><rect x="98.7320%" y="293" width="0.0357%" height="15" fill="rgb(226,26,14)" fg:x="99434" fg:w="36"/><text x="98.9820%" y="303.50"></text></g><g><title>tailcall`tailcall::core::json::graphql::_&lt;impl tailcall::core::json::json_like::JsonObjectLike for indexmap::map::IndexMap&lt;async_graphql_value::Name,Value&gt;&gt;::insert_key (42 samples, 0.04%)</title><rect x="98.7280%" y="309" width="0.0417%" height="15" fill="rgb(215,49,53)" fg:x="99430" fg:w="42"/><text x="98.9780%" y="319.50"></text></g><g><title>tailcall`tailcall::core::jit::synth::synth::Synth&lt;Value&gt;::iter_inner (34,050 samples, 33.81%)</title><rect x="64.9701%" y="325" width="33.8096%" height="15" fill="rgb(245,162,40)" fg:x="65432" fg:w="34050"/><text x="65.2201%" y="335.50">tailcall`tailcall::core::jit::synth::synth::Synth&lt;Value..</text></g><g><title>tailcall`tailcall::core::jit::synth::synth::Synth&lt;Value&gt;::iter_inner (34,129 samples, 33.89%)</title><rect x="64.9025%" y="341" width="33.8881%" height="15" fill="rgb(229,68,17)" fg:x="65364" fg:w="34129"/><text x="65.1525%" y="351.50">tailcall`tailcall::core::jit::synth::synth::Synth&lt;Value..</text></g><g><title>tailcall`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (14 samples, 0.01%)</title><rect x="98.8393%" y="309" width="0.0139%" height="15" fill="rgb(213,182,10)" fg:x="99542" fg:w="14"/><text x="99.0893%" y="319.50"></text></g><g><title>tailcall`tailcall::core::jit::transform::input_resolver::InputResolver&lt;Input&gt;::recursive_parse_arg (30 samples, 0.03%)</title><rect x="98.8353%" y="325" width="0.0298%" height="15" fill="rgb(245,125,30)" fg:x="99538" fg:w="30"/><text x="99.0853%" y="335.50"></text></g><g><title>tailcall`indexmap::map::IndexMap&lt;K,V,S&gt;::get (12 samples, 0.01%)</title><rect x="98.8532%" y="309" width="0.0119%" height="15" fill="rgb(232,202,2)" fg:x="99556" fg:w="12"/><text x="99.1032%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (104 samples, 0.10%)</title><rect x="98.8690%" y="309" width="0.1033%" height="15" fill="rgb(237,140,51)" fg:x="99572" fg:w="104"/><text x="99.1190%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (99 samples, 0.10%)</title><rect x="98.9942%" y="293" width="0.0983%" height="15" fill="rgb(236,157,25)" fg:x="99698" fg:w="99"/><text x="99.2442%" y="303.50"></text></g><g><title>tailcall`tailcall::core::jit::transform::input_resolver::InputResolver&lt;Input&gt;::resolve_field (388 samples, 0.39%)</title><rect x="98.7946%" y="341" width="0.3853%" height="15" fill="rgb(219,209,0)" fg:x="99497" fg:w="388"/><text x="99.0446%" y="351.50"></text></g><g><title>tailcall`tailcall::core::jit::transform::input_resolver::InputResolver&lt;Input&gt;::resolve_field (317 samples, 0.31%)</title><rect x="98.8651%" y="325" width="0.3148%" height="15" fill="rgb(240,116,54)" fg:x="99568" fg:w="317"/><text x="99.1151%" y="335.50"></text></g><g><title>tailcall`tailcall::core::jit::transform::input_resolver::InputResolver&lt;Input&gt;::resolve_field (206 samples, 0.20%)</title><rect x="98.9753%" y="309" width="0.2045%" height="15" fill="rgb(216,10,36)" fg:x="99679" fg:w="206"/><text x="99.2253%" y="319.50"></text></g><g><title>tailcall`tailcall::core::jit::transform::input_resolver::InputResolver&lt;Input&gt;::resolve_field (83 samples, 0.08%)</title><rect x="99.0974%" y="293" width="0.0824%" height="15" fill="rgb(222,72,44)" fg:x="99802" fg:w="83"/><text x="99.3474%" y="303.50"></text></g><g><title>tailcall`tailcall::core::jit::transform::skip::skip (39 samples, 0.04%)</title><rect x="99.1798%" y="341" width="0.0387%" height="15" fill="rgb(232,159,9)" fg:x="99885" fg:w="39"/><text x="99.4298%" y="351.50"></text></g><g><title>tailcall`tailcall::core::jit::transform::skip::skip (38 samples, 0.04%)</title><rect x="99.1808%" y="325" width="0.0377%" height="15" fill="rgb(210,39,32)" fg:x="99886" fg:w="38"/><text x="99.4308%" y="335.50"></text></g><g><title>tailcall`tailcall::core::jit::transform::skip::skip (37 samples, 0.04%)</title><rect x="99.1818%" y="309" width="0.0367%" height="15" fill="rgb(216,194,45)" fg:x="99887" fg:w="37"/><text x="99.4318%" y="319.50"></text></g><g><title>tailcall`tailcall::core::jit::transform::skip::skip (29 samples, 0.03%)</title><rect x="99.1898%" y="293" width="0.0288%" height="15" fill="rgb(218,18,35)" fg:x="99895" fg:w="29"/><text x="99.4398%" y="303.50"></text></g><g><title>tailcall`tailcall::core::jit::graphql_executor::JITExecutor::exec::_{{closure}} (90,661 samples, 90.02%)</title><rect x="9.2105%" y="357" width="90.0210%" height="15" fill="rgb(207,83,51)" fg:x="9276" fg:w="90661"/><text x="9.4605%" y="367.50">tailcall`tailcall::core::jit::graphql_executor::JITExecutor::exec::_{{closure}}</text></g><g><title>tailcall`tailcall::core::json::graphql::_&lt;impl tailcall::core::json::json_like::JsonObjectLike for indexmap::map::IndexMap&lt;async_graphql_value::Name,Value&gt;&gt;::insert_key (13 samples, 0.01%)</title><rect x="99.2186%" y="341" width="0.0129%" height="15" fill="rgb(225,63,43)" fg:x="99924" fg:w="13"/><text x="99.4686%" y="351.50"></text></g><g><title>tailcall`indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (12 samples, 0.01%)</title><rect x="99.2195%" y="325" width="0.0119%" height="15" fill="rgb(207,57,36)" fg:x="99925" fg:w="12"/><text x="99.4695%" y="335.50"></text></g><g><title>tailcall`&lt;tailcall::core::async_graphql_hyper::GraphQLRequest as tailcall::core::async_graphql_hyper::GraphQLRequestLike&gt;::execute_with_jit::_{{closure}} (91,835 samples, 91.19%)</title><rect x="8.0468%" y="389" width="91.1867%" height="15" fill="rgb(216,99,33)" fg:x="8104" fg:w="91835"/><text x="8.2968%" y="399.50">tailcall`&lt;tailcall::core::async_graphql_hyper::GraphQLRequest as tailcall::core::async_graphql_hyper::GraphQLRequestLike&gt;::execute_with_jit::_{{closure}}</text></g><g><title>tailcall`tailcall::core::jit::graphql_executor::JITExecutor::execute::_{{closure}} (91,750 samples, 91.10%)</title><rect x="8.1312%" y="373" width="91.1023%" height="15" fill="rgb(225,42,16)" fg:x="8189" fg:w="91750"/><text x="8.3812%" y="383.50">tailcall`tailcall::core::jit::graphql_executor::JITExecutor::execute::_{{closure}}</text></g><g><title>tailcall`alloc::sync::Arc&lt;T,A&gt;::drop_slow (39 samples, 0.04%)</title><rect x="99.2414%" y="389" width="0.0387%" height="15" fill="rgb(220,201,45)" fg:x="99947" fg:w="39"/><text x="99.4914%" y="399.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;http::header::map::HeaderMap&gt; (16 samples, 0.02%)</title><rect x="99.2950%" y="373" width="0.0159%" height="15" fill="rgb(225,33,4)" fg:x="100001" fg:w="16"/><text x="99.5450%" y="383.50"></text></g><g><title>tailcall`core::ptr::drop_in_place&lt;http::request::Parts&gt; (45 samples, 0.04%)</title><rect x="99.2900%" y="389" width="0.0447%" height="15" fill="rgb(224,33,50)" fg:x="99996" fg:w="45"/><text x="99.5400%" y="399.50"></text></g><g><title>tailcall`mi_free_block_mt (12 samples, 0.01%)</title><rect x="99.3228%" y="373" width="0.0119%" height="15" fill="rgb(246,198,51)" fg:x="100029" fg:w="12"/><text x="99.5728%" y="383.50"></text></g><g><title>tailcall`futures_channel::mpsc::Receiver&lt;T&gt;::next_message (12 samples, 0.01%)</title><rect x="99.3665%" y="357" width="0.0119%" height="15" fill="rgb(205,22,4)" fg:x="100073" fg:w="12"/><text x="99.6165%" y="367.50"></text></g><g><title>tailcall`hyper::body::body::Body::poll_inner (23 samples, 0.02%)</title><rect x="99.3596%" y="373" width="0.0228%" height="15" fill="rgb(206,3,8)" fg:x="100066" fg:w="23"/><text x="99.6096%" y="383.50"></text></g><g><title>tailcall`hyper::body::to_bytes::to_bytes::_{{closure}} (47 samples, 0.05%)</title><rect x="99.3407%" y="389" width="0.0467%" height="15" fill="rgb(251,23,15)" fg:x="100047" fg:w="47"/><text x="99.5907%" y="399.50"></text></g><g><title>tailcall`mi_free (29 samples, 0.03%)</title><rect x="99.3874%" y="389" width="0.0288%" height="15" fill="rgb(252,88,28)" fg:x="100094" fg:w="29"/><text x="99.6374%" y="399.50"></text></g><g><title>tailcall`mi_free_block_delayed_mt (34 samples, 0.03%)</title><rect x="99.4162%" y="389" width="0.0338%" height="15" fill="rgb(212,127,14)" fg:x="100123" fg:w="34"/><text x="99.6662%" y="399.50"></text></g><g><title>tailcall`mi_free_block_mt (18 samples, 0.02%)</title><rect x="99.4499%" y="389" width="0.0179%" height="15" fill="rgb(247,145,37)" fg:x="100157" fg:w="18"/><text x="99.6999%" y="399.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (28 samples, 0.03%)</title><rect x="99.4767%" y="389" width="0.0278%" height="15" fill="rgb(209,117,53)" fg:x="100184" fg:w="28"/><text x="99.7267%" y="399.50"></text></g><g><title>tailcall`_mi_malloc_generic (20 samples, 0.02%)</title><rect x="99.4847%" y="373" width="0.0199%" height="15" fill="rgb(212,90,42)" fg:x="100192" fg:w="20"/><text x="99.7347%" y="383.50"></text></g><g><title>tailcall`&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (46 samples, 0.05%)</title><rect x="99.5095%" y="373" width="0.0457%" height="15" fill="rgb(218,164,37)" fg:x="100217" fg:w="46"/><text x="99.7595%" y="383.50"></text></g><g><title>tailcall`core::str::converts::from_utf8 (12 samples, 0.01%)</title><rect x="99.5432%" y="357" width="0.0119%" height="15" fill="rgb(246,65,34)" fg:x="100251" fg:w="12"/><text x="99.7932%" y="367.50"></text></g><g><title>tailcall`serde::de::impls::_&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (52 samples, 0.05%)</title><rect x="99.5065%" y="389" width="0.0516%" height="15" fill="rgb(231,100,33)" fg:x="100214" fg:w="52"/><text x="99.7565%" y="399.50"></text></g><g><title>tailcall`_mi_page_free (20 samples, 0.02%)</title><rect x="99.5710%" y="373" width="0.0199%" height="15" fill="rgb(228,126,14)" fg:x="100279" fg:w="20"/><text x="99.8210%" y="383.50"></text></g><g><title>tailcall`mi_segment_page_clear (12 samples, 0.01%)</title><rect x="99.5790%" y="357" width="0.0119%" height="15" fill="rgb(215,173,21)" fg:x="100287" fg:w="12"/><text x="99.8290%" y="367.50"></text></g><g><title>tailcall`mi_segment_span_free_coalesce (11 samples, 0.01%)</title><rect x="99.5800%" y="341" width="0.0109%" height="15" fill="rgb(210,6,40)" fg:x="100288" fg:w="11"/><text x="99.8300%" y="351.50"></text></g><g><title>tailcall`http::header::map::HeaderMap&lt;T&gt;::try_reserve_one (11 samples, 0.01%)</title><rect x="99.6197%" y="341" width="0.0109%" height="15" fill="rgb(212,48,18)" fg:x="100328" fg:w="11"/><text x="99.8697%" y="351.50"></text></g><g><title>tailcall`http::header::map::HeaderMap&lt;T&gt;::try_append2 (26 samples, 0.03%)</title><rect x="99.6058%" y="357" width="0.0258%" height="15" fill="rgb(230,214,11)" fg:x="100314" fg:w="26"/><text x="99.8558%" y="367.50"></text></g><g><title>tailcall`http::response::Builder::and_then (41 samples, 0.04%)</title><rect x="99.5929%" y="373" width="0.0407%" height="15" fill="rgb(254,105,39)" fg:x="100301" fg:w="41"/><text x="99.8429%" y="383.50"></text></g><g><title>tailcall`_mi_free_delayed_block (46 samples, 0.05%)</title><rect x="99.6376%" y="341" width="0.0457%" height="15" fill="rgb(245,158,5)" fg:x="100346" fg:w="46"/><text x="99.8876%" y="351.50"></text></g><g><title>tailcall`_mi_malloc_generic (109 samples, 0.11%)</title><rect x="99.6356%" y="357" width="0.1082%" height="15" fill="rgb(249,208,11)" fg:x="100344" fg:w="109"/><text x="99.8856%" y="367.50"></text></g><g><title>tailcall`mi_find_page (59 samples, 0.06%)</title><rect x="99.6852%" y="341" width="0.0586%" height="15" fill="rgb(210,39,28)" fg:x="100394" fg:w="59"/><text x="99.9352%" y="351.50"></text></g><g><title>tailcall`mi_page_fresh_alloc (21 samples, 0.02%)</title><rect x="99.7230%" y="325" width="0.0209%" height="15" fill="rgb(211,56,53)" fg:x="100432" fg:w="21"/><text x="99.9730%" y="335.50"></text></g><g><title>tailcall`mi_segments_page_alloc (21 samples, 0.02%)</title><rect x="99.7230%" y="309" width="0.0209%" height="15" fill="rgb(226,201,30)" fg:x="100432" fg:w="21"/><text x="99.9730%" y="319.50"></text></g><g><title>tailcall`mi_heap_malloc_zero_aligned_at_generic (110 samples, 0.11%)</title><rect x="99.6356%" y="373" width="0.1092%" height="15" fill="rgb(239,101,34)" fg:x="100344" fg:w="110"/><text x="99.8856%" y="383.50"></text></g><g><title>tailcall`tailcall::core::async_graphql_hyper::GraphQLArcResponse::into_response (196 samples, 0.19%)</title><rect x="99.5581%" y="389" width="0.1946%" height="15" fill="rgb(226,209,5)" fg:x="100266" fg:w="196"/><text x="99.8081%" y="399.50"></text></g><g><title>tailcall`&lt;tailcall::core::blueprint::server::Server as core::clone::Clone&gt;::clone (16 samples, 0.02%)</title><rect x="99.7994%" y="373" width="0.0159%" height="15" fill="rgb(250,105,47)" fg:x="100509" fg:w="16"/><text x="100.0494%" y="383.50"></text></g><g><title>tailcall`tailcall::core::http::request_handler::create_request_context (79 samples, 0.08%)</title><rect x="99.7528%" y="389" width="0.0784%" height="15" fill="rgb(230,72,3)" fg:x="100462" fg:w="79"/><text x="100.0028%" y="399.50"></text></g><g><title>tailcall`tailcall::core::http::request_handler::graphql_request::_{{closure}}::_{{closure}} (93,059 samples, 92.40%)</title><rect x="7.4341%" y="405" width="92.4020%" height="15" fill="rgb(232,218,39)" fg:x="7487" fg:w="93059"/><text x="7.6841%" y="415.50">tailcall`tailcall::core::http::request_handler::graphql_request::_{{closure}}::_{{closure}}</text></g><g><title>tailcall`tailcall::core::http::request_handler::graphql_request::_{{closure}} (93,357 samples, 92.70%)</title><rect x="7.1521%" y="421" width="92.6979%" height="15" fill="rgb(248,166,6)" fg:x="7203" fg:w="93357"/><text x="7.4021%" y="431.50">tailcall`tailcall::core::http::request_handler::graphql_request::_{{closure}}</text></g><g><title>tailcall`tailcall::core::http::request_handler::handle_request_inner::_{{closure}} (93,425 samples, 92.77%)</title><rect x="7.0856%" y="437" width="92.7654%" height="15" fill="rgb(247,89,20)" fg:x="7136" fg:w="93425"/><text x="7.3356%" y="447.50">tailcall`tailcall::core::http::request_handler::handle_request_inner::_{{closure}}</text></g><g><title>tailcall`opentelemetry::propagation::text_map_propagator::TextMapPropagator::extract (17 samples, 0.02%)</title><rect x="99.8689%" y="421" width="0.0169%" height="15" fill="rgb(248,130,54)" fg:x="100579" fg:w="17"/><text x="100.1189%" y="431.50"></text></g><g><title>tailcall`opentelemetry::context::Context::current (13 samples, 0.01%)</title><rect x="99.8729%" y="405" width="0.0129%" height="15" fill="rgb(234,196,4)" fg:x="100583" fg:w="13"/><text x="100.1229%" y="415.50"></text></g><g><title>tailcall`tailcall::core::http::telemetry::propagate_context (39 samples, 0.04%)</title><rect x="99.8521%" y="437" width="0.0387%" height="15" fill="rgb(250,143,31)" fg:x="100562" fg:w="39"/><text x="100.1021%" y="447.50"></text></g><g><title>tailcall`tailcall::core::http::request_handler::handle_request::_{{closure}}::_{{closure}} (93,530 samples, 92.87%)</title><rect x="7.0310%" y="453" width="92.8697%" height="15" fill="rgb(211,110,34)" fg:x="7081" fg:w="93530"/><text x="7.2810%" y="463.50">tailcall`tailcall::core::http::request_handler::handle_request::_{{closure}}::_{{closure}}</text></g><g><title>tailcall`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::new_span (15 samples, 0.01%)</title><rect x="99.9186%" y="437" width="0.0149%" height="15" fill="rgb(215,124,48)" fg:x="100629" fg:w="15"/><text x="100.1686%" y="447.50"></text></g><g><title>tailcall`&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::new_span (14 samples, 0.01%)</title><rect x="99.9196%" y="421" width="0.0139%" height="15" fill="rgb(216,46,13)" fg:x="100630" fg:w="14"/><text x="100.1696%" y="431.50"></text></g><g><title>tailcall`tracing::span::Span::new (18 samples, 0.02%)</title><rect x="99.9166%" y="453" width="0.0179%" height="15" fill="rgb(205,184,25)" fg:x="100627" fg:w="18"/><text x="100.1666%" y="463.50"></text></g><g><title>tailcall`tailcall::core::http::request_handler::handle_request::_{{closure}} (93,741 samples, 93.08%)</title><rect x="6.8572%" y="469" width="93.0792%" height="15" fill="rgb(228,1,10)" fg:x="6906" fg:w="93741"/><text x="7.1072%" y="479.50">tailcall`tailcall::core::http::request_handler::handle_request::_{{closure}}</text></g><g><title>tailcall`&lt;hyper::server::conn::upgrades::UpgradeableConnection&lt;I,S,E&gt; as core::future::future::Future&gt;::poll (96,826 samples, 96.14%)</title><rect x="3.7980%" y="485" width="96.1424%" height="15" fill="rgb(213,116,27)" fg:x="3825" fg:w="96826"/><text x="4.0480%" y="495.50">tailcall`&lt;hyper::server::conn::upgrades::UpgradeableConnection&lt;I,S,E&gt; as core::future::future::Future&gt;::poll</text></g><g><title>tailcall`&lt;hyper::server::server::new_svc::NewSvcTask&lt;I,N,S,E,W&gt; as core::future::future::Future&gt;::poll (96,857 samples, 96.17%)</title><rect x="3.7881%" y="501" width="96.1732%" height="15" fill="rgb(241,95,50)" fg:x="3815" fg:w="96857"/><text x="4.0381%" y="511.50">tailcall`&lt;hyper::server::server::new_svc::NewSvcTask&lt;I,N,S,E,W&gt; as core::future::future::Future&gt;::poll</text></g><g><title>tailcall`tokio::runtime::scheduler::multi_thread::worker::Context::run_task (100,442 samples, 99.73%)</title><rect x="0.2532%" y="533" width="99.7329%" height="15" fill="rgb(238,48,32)" fg:x="255" fg:w="100442"/><text x="0.5032%" y="543.50">tailcall`tokio::runtime::scheduler::multi_thread::worker::Context::run_task</text></g><g><title>tailcall`tokio::runtime::task::raw::poll (100,409 samples, 99.70%)</title><rect x="0.2860%" y="517" width="99.7001%" height="15" fill="rgb(235,113,49)" fg:x="288" fg:w="100409"/><text x="0.5360%" y="527.50">tailcall`tokio::runtime::task::raw::poll</text></g><g><title>all (100,711 samples, 100%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(205,127,43)" fg:x="0" fg:w="100711"/><text x="0.2500%" y="655.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (100,708 samples, 100.00%)</title><rect x="0.0030%" y="629" width="99.9970%" height="15" fill="rgb(250,162,2)" fg:x="3" fg:w="100708"/><text x="0.2530%" y="639.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (100,708 samples, 100.00%)</title><rect x="0.0030%" y="613" width="99.9970%" height="15" fill="rgb(220,13,41)" fg:x="3" fg:w="100708"/><text x="0.2530%" y="623.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>tailcall`std::sys::pal::unix::thread::Thread::new::thread_start (100,708 samples, 100.00%)</title><rect x="0.0030%" y="597" width="99.9970%" height="15" fill="rgb(249,221,25)" fg:x="3" fg:w="100708"/><text x="0.2530%" y="607.50">tailcall`std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>tailcall`core::ops::function::FnOnce::call_once{{vtable.shim}} (100,708 samples, 100.00%)</title><rect x="0.0030%" y="581" width="99.9970%" height="15" fill="rgb(215,208,19)" fg:x="3" fg:w="100708"/><text x="0.2530%" y="591.50">tailcall`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>tailcall`std::sys_common::backtrace::__rust_begin_short_backtrace (100,708 samples, 100.00%)</title><rect x="0.0030%" y="565" width="99.9970%" height="15" fill="rgb(236,175,2)" fg:x="3" fg:w="100708"/><text x="0.2530%" y="575.50">tailcall`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>tailcall`tokio::runtime::task::raw::poll (100,704 samples, 99.99%)</title><rect x="0.0070%" y="549" width="99.9930%" height="15" fill="rgb(241,52,2)" fg:x="7" fg:w="100704"/><text x="0.2570%" y="559.50">tailcall`tokio::runtime::task::raw::poll</text></g><g><title>tailcall`tokio::runtime::task::raw::poll (13 samples, 0.01%)</title><rect x="99.9871%" y="533" width="0.0129%" height="15" fill="rgb(248,140,14)" fg:x="100698" fg:w="13"/><text x="100.2371%" y="543.50"></text></g></svg></svg>